name: Discord Notifications for Zone Nova Updates

on:
  push:
    branches: [main]
    paths:
      - 'src/data/zone-nova/updates/**'
      - 'src/pages/guides/zone-nova/updates/**'

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch current and previous commit to compare
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install --production
        
      - name: Detect new Zone Nova updates
        id: detect-updates
        run: |
          echo "Detecting changes in Zone Nova update files..."
          
          # Get list of changed files in the Zone Nova updates directory
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '^src/(data|pages)/guides/zone-nova/updates/' | grep -v '.astro$' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Zone Nova update files changed"
            echo "has_updates=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if any of the changed files are new (added files)
          NEW_FILES=$(git diff --name-status HEAD~1 HEAD | grep -E '^A.*src/(data|pages)/guides/zone-nova/updates/' | cut -f2 | grep -v '.astro$' || true)
          
          if [ -z "$NEW_FILES" ]; then
            echo "No new Zone Nova update files added"
            echo "has_updates=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "New update files detected:"
          echo "$NEW_FILES"
          echo "has_updates=true" >> $GITHUB_OUTPUT
          
          # Store the new files for the next step
          echo "$NEW_FILES" > new_update_files.txt
          
      - name: Send Discord notifications
        if: steps.detect-updates.outputs.has_updates == 'true'
        env:
          ZONE_NOVA_UPDATES: ${{ secrets.ZONE_NOVA_UPDATES }}
        run: |
          # Create a Node.js script to process the updates and send Discord notifications
          cat > send_notifications.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // Import our Discord webhook utility
          const { sendDiscordNotification, validateUpdateData } = require('./src/utils/discord-webhook.js');
          
          async function main() {
            const webhookUrl = process.env.ZONE_NOVA_UPDATES;
            
            if (!webhookUrl) {
              console.log('Discord webhook URL not configured, skipping notifications');
              return;
            }
            
            try {
              // Read the list of new files
              const newFiles = fs.readFileSync('new_update_files.txt', 'utf8')
                .split('\n')
                .filter(line => line.trim())
                .filter(file => file.endsWith('.js')); // Only process .js data files
              
              console.log('Processing new update files:', newFiles);
              
              for (const filePath of newFiles) {
                try {
                  console.log(`Processing: ${filePath}`);
                  
                  // Dynamically import the update data
                  const fullPath = path.resolve(filePath);
                  
                  // Clear require cache to ensure fresh import
                  delete require.cache[fullPath];
                  
                  const updateModule = require(fullPath);
                  
                  // Try different export patterns
                  let updateData = null;
                  
                  if (updateModule.default) {
                    updateData = updateModule.default;
                  } else if (updateModule.updateData) {
                    updateData = updateModule.updateData;
                  } else {
                    // Look for any export that looks like update data
                    for (const [key, value] of Object.entries(updateModule)) {
                      if (value && typeof value === 'object' && value.title && value.date) {
                        updateData = value;
                        break;
                      }
                    }
                  }
                  
                  if (!updateData) {
                    console.log(`No valid update data found in ${filePath}`);
                    continue;
                  }
                  
                  if (!validateUpdateData(updateData)) {
                    console.log(`Invalid update data in ${filePath}`);
                    continue;
                  }
                  
                  console.log(`Sending Discord notification for: ${updateData.title}`);
                  
                  const success = await sendDiscordNotification(webhookUrl, updateData);
                  
                  if (success) {
                    console.log(`✅ Successfully sent notification for: ${updateData.title}`);
                  } else {
                    console.log(`❌ Failed to send notification for: ${updateData.title}`);
                  }
                  
                  // Add delay between notifications to avoid rate limiting
                  await new Promise(resolve => setTimeout(resolve, 2000));
                  
                } catch (error) {
                  console.error(`Error processing ${filePath}:`, error.message);
                }
              }
              
            } catch (error) {
              console.error('Error in main process:', error);
              process.exit(1);
            }
          }
          
          main().catch(console.error);
          EOF
          
          # Run the notification script
          node send_notifications.js
          
      - name: Cleanup
        if: always()
        run: |
          rm -f new_update_files.txt send_notifications.js
          
      - name: Summary
        if: steps.detect-updates.outputs.has_updates == 'true'
        run: |
          echo "✅ Discord notification workflow completed"
          echo "New Zone Nova updates have been processed and Discord notifications sent"