---
// Home Page Layout - Dedicated layout for the homepage
import HomeLayout from './HomeLayout.astro';
import GeneralSEO from '../components/GeneralSEO.astro';

export interface Props {
  title: string;
  description: string;
  showcaseGames: any[];
}

const { title, description, showcaseGames } = Astro.props;
---

<HomeLayout title={title} description={description}>
  <GeneralSEO 
    slot="head"
    title={title}
    description={description}
    keywords={['gacha games', 'game wikis', 'gaming guides', 'zone nova', 'silver and blood']}
    pageType="website"
  />
  
  <!-- Critical resource hints -->
  {
    showcaseGames
      .slice(0, 2)
      .map(game => <link rel="preload" href={game.image} as="image" type="image/jpeg" />)
  }
  <link rel="dns-prefetch" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

  <!-- Performance hints -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="prefetch" href="/guides/zone-nova/" />
  <link rel="prefetch" href="/guides/silver-and-blood/" />

  <!-- Optimize for mobile -->
  <meta name="mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

  <!-- Home Page Styles -->
  <style>
    @import '../styles/pages/home.css';
    @import '../styles/components/home-cta.css';
    @import '../styles/components/showcase.css';
    @import '../styles/pages/home-mobile.css';
  </style>

  <!-- Main Content Area -->
  <main class="home-main">
    <!-- Hero Section with Server Reset Timer -->
    <section class="hero-section">
      <div class="hero-bg-animation"></div>

      <div class="hero-content">
        <h1 class="hero-title">
          <span class="hero-text-gradient">Gacha Wikis</span>
        </h1>

        <!-- Primary CTA Button -->
        <div class="hero-cta">
          <a href="/wikis" class="cta-button primary">
            <span class="cta-text">Browse All Wikis</span>
            <svg class="cta-icon" width="20" height="20" viewBox="0 0 20 20" fill="none">
              <path
                d="M4 10h12m-6-6l6 6-6 6"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </a>
        </div>

      </div>
    </section>

    <!-- Auto-Rotating Games Showcase -->
    <section class="auto-showcase">
      <div class="showcase-container">
        <div class="showcase-content" id="showcaseContent">
          <!-- Image Section -->
          <div class="showcase-image-section">
            <img
              class="showcase-game-image"
              id="showcaseGameImage"
              src={showcaseGames[0]?.image}
              alt={showcaseGames[0]?.name}
              loading="lazy"
              decoding="async"
            />
            <div class="showcase-image-overlay"></div>
          </div>

          <!-- Content Section -->
          <div class="showcase-content-section">
            <div class="showcase-game-info">
              <h2 class="showcase-title" id="showcaseTitle">{showcaseGames[0]?.name}</h2>
              <p class="showcase-description" id="showcaseDescription">
                {showcaseGames[0]?.description}
              </p>

              <div class="showcase-features" id="showcaseFeatures">
                {
                  showcaseGames[0]?.features.map(feature => (
                    <div class="showcase-feature-tag">{feature}</div>
                  ))
                }
              </div>

              <div class="showcase-actions">
                <a href={showcaseGames[0]?.url} class="showcase-btn primary" id="showcaseLink">
                  <span>Explore Wiki</span>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                    <path
                      d="M4 10h12m-6-6l6 6-6 6"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"></path>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Open Source Section -->
    <section class="open-source-section">
      <h2 class="open-source-title">First Gacha wiki That Fully Open Source.</h2>
      <a href="https://github.com/boring877/gacha-wiki" target="_blank" rel="noopener noreferrer" class="github-link">
        <svg class="github-icon" width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path
            d="M12 2C6.477 2 2 6.477 2 12c0 4.42 2.865 8.17 6.839 9.49.5.092.682-.217.682-.482 0-.237-.008-.866-.013-1.7-2.782.604-3.369-1.34-3.369-1.34-.454-1.156-1.11-1.464-1.11-1.464-.908-.62.069-.608.069-.608 1.003.07 1.531 1.03 1.531 1.03.892 1.529 2.341 1.087 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.025A9.578 9.578 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.025 2.747-1.025.546 1.377.203 2.394.1 2.647.64.699 1.028 1.592 1.028 2.683 0 3.842-2.339 4.687-4.566 4.935.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.578.688.48C19.138 20.167 22 16.418 22 12c0-5.523-4.477-10-10-10z"
            fill="currentColor"
          />
        </svg>
        <span>View on GitHub</span>
        <svg class="external-icon" width="16" height="16" viewBox="0 0 16 16" fill="none">
          <path
            d="M12 4L4 12M12 4H8M12 4V8"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      </a>
    </section>
  </main>

  <!-- Homepage JavaScript -->
  <script define:vars={{ showcaseGames }}>
    // Homepage showcase functionality
    document.addEventListener('DOMContentLoaded', function () {
      // State management for showcase
      let currentShowcaseIndex = 0;
      let autoRotateInterval = null;
      let isAutoRotating = true;

      // DOM elements for showcase
      const showcaseGameImage = document.getElementById('showcaseGameImage');
      const showcaseTitle = document.getElementById('showcaseTitle');
      const showcaseDescription = document.getElementById('showcaseDescription');
      const showcaseFeatures = document.getElementById('showcaseFeatures');
      const showcaseLink = document.getElementById('showcaseLink');

      // Update showcase content - MOBILE OPTIMIZED
      function updateShowcase(index) {
        if (index < 0 || index >= showcaseGames.length) return;

        currentShowcaseIndex = index;
        const game = showcaseGames[currentShowcaseIndex];

        // Check if mobile device
        const isMobile = window.innerWidth <= 768;

        if (isMobile) {
          // Mobile-optimized transition - simple fade
          const elements = [
            showcaseTitle,
            showcaseDescription,
            showcaseFeatures,
            document.querySelector('.showcase-actions'),
            showcaseGameImage,
          ];

          // Quick fade out
          elements.forEach(el => {
            if (el) {
              el.style.opacity = '0.3';
              el.style.transform = 'translateY(5px)';
            }
          });

          // Update content after minimal delay
          setTimeout(() => {
            updateShowcaseContent(game);

            // Fade back in
            elements.forEach(el => {
              if (el) {
                el.style.opacity = '1';
                el.style.transform = 'translateY(0)';
              }
            });
          }, 150);
        } else {
          // Desktop version - keep existing animations
          updateShowcaseContent(game);

          const elements = [
            showcaseTitle,
            showcaseDescription,
            showcaseFeatures,
            document.querySelector('.showcase-actions'),
          ];
          elements.forEach(el => {
            if (el) el.classList.add('active');
          });
        }
      }

      // Update showcase content elements - SIMPLIFIED
      function updateShowcaseContent(game) {
        // Update image
        if (showcaseGameImage) {
          showcaseGameImage.src = game.image;
          showcaseGameImage.alt = game.name;
        }

        // Update text content
        if (showcaseTitle) {
          showcaseTitle.textContent = game.name;
        }
        if (showcaseDescription) showcaseDescription.textContent = game.description;
        if (showcaseLink) showcaseLink.href = game.url;

        // Update features - SIMPLE approach
        if (showcaseFeatures) {
          showcaseFeatures.innerHTML = '';
          game.features.forEach(feature => {
            const tag = document.createElement('div');
            tag.className = 'showcase-feature-tag';
            tag.textContent = feature;
            showcaseFeatures.appendChild(tag);
          });
        }
      }

      // Start auto-rotation for showcase - MOBILE OPTIMIZED
      function startAutoRotation() {
        if (autoRotateInterval) clearInterval(autoRotateInterval);

        // Detect mobile for optimized intervals
        const isMobile = window.innerWidth <= 768;
        const rotationInterval = isMobile ? 8000 : 6000; // Slower on mobile for better performance

        autoRotateInterval = setInterval(() => {
          const nextIndex = (currentShowcaseIndex + 1) % showcaseGames.length;
          updateShowcase(nextIndex);
        }, rotationInterval);
      }

      // Stop auto-rotation
      function stopAutoRotation() {
        if (autoRotateInterval) {
          clearInterval(autoRotateInterval);
          autoRotateInterval = null;
        }
        isAutoRotating = false;
      }

      // Initialize showcase with mobile optimizations
      function initializeShowcase() {
        // Preload images
        showcaseGames.forEach(game => {
          const img = new Image();
          img.src = game.image;
        });

        // Start with first game
        updateShowcase(0);

        // Mobile optimization: Pause animations when showcase is not visible
        if (window.IntersectionObserver) {
          const showcaseElement = document.querySelector('.auto-showcase');
          if (showcaseElement) {
            const observer = new IntersectionObserver(
              entries => {
                entries.forEach(entry => {
                  if (entry.isIntersecting) {
                    // Resume animations when visible
                    if (isAutoRotating && !autoRotateInterval) {
                      startAutoRotation();
                    }
                  } else {
                    // Pause animations when not visible (performance optimization)
                    if (autoRotateInterval) {
                      clearInterval(autoRotateInterval);
                      autoRotateInterval = null;
                    }
                  }
                });
              },
              { threshold: 0.1 }
            );

            observer.observe(showcaseElement);
          }
        }

        // Start auto-rotation
        if (isAutoRotating) {
          startAutoRotation();
        }
      }

      // Cleanup function to prevent memory leaks
      function cleanup() {
        if (autoRotateInterval) {
          clearInterval(autoRotateInterval);
          autoRotateInterval = null;
        }
      }

      // Initialize showcase
      initializeShowcase();

      // Cleanup on page unload
      window.addEventListener('beforeunload', cleanup);

      // Cleanup on page visibility change (for SPA navigation)
      document.addEventListener('astro:before-preparation', cleanup);
      document.addEventListener('astro:before-swap', cleanup);
    });
  </script>
</HomeLayout>
