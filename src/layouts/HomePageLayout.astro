---
// Home Page Layout - Dedicated layout for the homepage
import HomeLayout from './HomeLayout.astro';

export interface Props {
  title: string;
  description: string;
  clockGames: any[];
  showcaseGames: any[];
}

const { title, description, clockGames, showcaseGames } = Astro.props;
---

<HomeLayout title={title} description={description}>
  <!-- Critical resource hints -->
  {
    clockGames
      .slice(0, 2)
      .map(game => <link rel="preload" href={game.image} as="image" type="image/jpeg" />)
  }
  <link rel="dns-prefetch" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

  <!-- Performance hints -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="prefetch" href="/guides/zone-nova/" />
  <link rel="prefetch" href="/guides/silver-and-blood/" />

  <!-- Optimize for mobile -->
  <meta name="mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

  <!-- Home Page Styles -->
  <style>
    @import '../styles/pages/home.css';
    @import '../styles/components/home-cta.css';
    @import '../styles/components/master-clock.css';
    @import '../styles/components/clock-controls.css';
    @import '../styles/components/showcase.css';
    @import '../styles/pages/home-mobile.css';
  </style>

  <!-- Main Content Area -->
  <main class="home-main">
    <!-- Hero Section with Server Reset Timer -->
    <section class="hero-section">
      <div class="hero-bg-animation"></div>

      <div class="hero-content">
        <h1 class="hero-title">
          <span class="hero-text-gradient">Gacha Wikis</span>
        </h1>

        <!-- Primary CTA Button -->
        <div class="hero-cta">
          <a href="/wikis" class="cta-button primary">
            <span class="cta-text">Browse All Wikis</span>
            <svg class="cta-icon" width="20" height="20" viewBox="0 0 20 20" fill="none">
              <path
                d="M4 10h12m-6-6l6 6-6 6"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </a>
        </div>

        <!-- Beautiful Rotating Clock -->
        <div class="master-clock-container">
          <div class="master-clock" id="masterClock">
            <!-- Clock Background Animation -->
            <div class="clock-bg-animation"></div>

            <!-- Game Info Header -->
            <div class="clock-header">
              <div class="game-image-container" id="clockGameImageContainer">
                <img
                  class="game-image"
                  id="clockGameImage"
                  src="/images/games/zone-nova/zonenova1.jpg"
                  alt="Zone Nova"
                  loading="eager"
                />
              </div>
              <div class="game-info">
                <h3 class="game-name" id="clockGameName">Zone Nova</h3>
                <div class="game-status">Server Reset - Dailies • Events • Grinds</div>
              </div>
            </div>

            <!-- Main Clock Display -->
            <div class="clock-display">
              <div class="time-unit-group">
                <div class="time-unit">
                  <span class="time-value" id="clockHours">--</span>
                  <span class="time-label">Hours</span>
                </div>
                <div class="time-separator">:</div>
                <div class="time-unit">
                  <span class="time-value" id="clockMinutes">--</span>
                  <span class="time-label">Minutes</span>
                </div>
                <div class="time-separator">:</div>
                <div class="time-unit">
                  <span class="time-value" id="clockSeconds">--</span>
                  <span class="time-label">Seconds</span>
                </div>
              </div>
            </div>

            <!-- Timer Description -->
            <div class="timer-description-section">
              <div class="timer-main-label" id="timerMainLabel">Time until server reset</div>
              <div class="timer-reset-time">
                Resets at <span id="resetTimeDisplay">5:00</span> UTC
              </div>
            </div>

            <!-- Game Navigation -->
            <div class="clock-navigation">
              <button class="nav-btn prev-btn" id="prevGame" aria-label="Previous game">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                  <path
                    d="M10 12L6 8L10 4"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                </svg>
              </button>

              <div class="game-indicators" id="gameIndicators">
                <!-- Dots will be generated by JavaScript -->
              </div>

              <button class="nav-btn next-btn" id="nextGame" aria-label="Next game">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                  <path
                    d="M6 4L10 8L6 12"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                </svg>
              </button>
            </div>

            <!-- Clock Footer Controls Container -->
            <div class="clock-footer-controls">
              <!-- Auto-rotation toggle -->
              <button class="rotation-toggle" id="rotationToggle" aria-label="Toggle auto-rotation">
                <svg class="play-icon" width="14" height="14" viewBox="0 0 14 14" fill="none">
                  <path d="M3 2L11 7L3 12V2Z" fill="currentColor"></path>
                </svg>
                <svg
                  class="pause-icon"
                  width="14"
                  height="14"
                  viewBox="0 0 14 14"
                  fill="none"
                  style="display: none;"
                >
                  <rect x="3" y="2" width="2" height="10" fill="currentColor"></rect>
                  <rect x="9" y="2" width="2" height="10" fill="currentColor"></rect>
                </svg>
                <span class="rotation-text">Auto-rotate</span>
              </button>

              <!-- Open Source Badge -->
              <a
                href="https://github.com/boring877/gacha-wiki"
                target="_blank"
                rel="noopener noreferrer"
                class="clock-opensource-link"
              >
                <div class="clock-opensource-content">
                  <svg
                    class="clock-github-icon"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 2C6.477 2 2 6.477 2 12c0 4.42 2.865 8.17 6.839 9.49.5.092.682-.217.682-.482 0-.237-.008-.866-.013-1.7-2.782.604-3.369-1.34-3.369-1.34-.454-1.156-1.11-1.464-1.11-1.464-.908-.62.069-.608.069-.608 1.003.07 1.531 1.03 1.531 1.03.892 1.529 2.341 1.087 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.025A9.578 9.578 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.025 2.747-1.025.546 1.377.203 2.394.1 2.647.64.699 1.028 1.592 1.028 2.683 0 3.842-2.339 4.687-4.566 4.935.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.578.688.48C19.138 20.167 22 16.418 22 12c0-5.523-4.477-10-10-10z"
                      fill="currentColor"></path>
                  </svg>
                  <span class="clock-opensource-text">Open Source</span>
                  <div class="clock-opensource-star">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none">
                      <path
                        d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
                        fill="currentColor"></path>
                    </svg>
                    <span class="clock-star-count">Star</span>
                  </div>
                </div>
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Auto-Rotating Games Showcase -->
    <section class="auto-showcase">
      <div class="showcase-container">
        <div class="showcase-content" id="showcaseContent">
          <!-- Image Section -->
          <div class="showcase-image-section">
            <img
              class="showcase-game-image"
              id="showcaseGameImage"
              src={showcaseGames[0]?.image}
              alt={showcaseGames[0]?.name}
              loading="lazy"
              decoding="async"
            />
            <div class="showcase-image-overlay"></div>
          </div>

          <!-- Content Section -->
          <div class="showcase-content-section">
            <div class="showcase-game-info">
              <h2 class="showcase-title" id="showcaseTitle">{showcaseGames[0]?.name}</h2>
              <p class="showcase-description" id="showcaseDescription">
                {showcaseGames[0]?.description}
              </p>

              <div class="showcase-features" id="showcaseFeatures">
                {
                  showcaseGames[0]?.features.map(feature => (
                    <div class="showcase-feature-tag">{feature}</div>
                  ))
                }
              </div>

              <div class="showcase-actions">
                <a href={showcaseGames[0]?.url} class="showcase-btn primary" id="showcaseLink">
                  <span>Explore Wiki</span>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                    <path
                      d="M4 10h12m-6-6l6 6-6 6"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"></path>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <!-- Homepage JavaScript -->
  <script define:vars={{ clockGames, showcaseGames }}>
    // Beautiful Master Clock with dynamic games configuration
    document.addEventListener('DOMContentLoaded', function () {
      // Games configuration from server-side data
      const featuredGames = clockGames;

      // State management
      let currentGameIndex = 0;
      let currentShowcaseIndex = 0;
      let isAutoRotating = true;
      let autoRotateInterval = null;
      let clockUpdateInterval = null;

      // DOM elements - Master Clock
      const clockGameImage = document.getElementById('clockGameImage');
      const clockGameName = document.getElementById('clockGameName');
      const clockHours = document.getElementById('clockHours');
      const clockMinutes = document.getElementById('clockMinutes');
      const clockSeconds = document.getElementById('clockSeconds');
      const resetTimeDisplay = document.getElementById('resetTimeDisplay');
      const timerMainLabel = document.getElementById('timerMainLabel');
      const gameIndicators = document.getElementById('gameIndicators');
      const prevBtn = document.getElementById('prevGame');
      const nextBtn = document.getElementById('nextGame');
      const rotationToggle = document.getElementById('rotationToggle');
      const masterClock = document.getElementById('masterClock');

      // DOM elements for showcase
      const showcaseGameImage = document.getElementById('showcaseGameImage');
      const showcaseTitle = document.getElementById('showcaseTitle');
      const showcaseDescription = document.getElementById('showcaseDescription');
      const showcaseFeatures = document.getElementById('showcaseFeatures');
      const showcaseLink = document.getElementById('showcaseLink');

      // Calculate time until reset
      function getTimeUntilReset(resetHour, resetMinute = 0) {
        const now = new Date();
        const utcHour = now.getUTCHours();
        const utcMinutes = now.getUTCMinutes();
        const utcSeconds = now.getUTCSeconds();

        // Calculate target reset time
        const resetTime = new Date();
        resetTime.setUTCHours(resetHour, resetMinute, 0, 0);

        // If reset time has passed today, set it for tomorrow
        if (resetTime <= now) {
          resetTime.setUTCDate(resetTime.getUTCDate() + 1);
        }

        // Calculate time difference in milliseconds
        const timeDiff = resetTime.getTime() - now.getTime();

        // Convert to hours, minutes, seconds
        const hoursUntilReset = Math.floor(timeDiff / (1000 * 60 * 60));
        const minutesUntilReset = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        const secondsUntilReset = Math.floor((timeDiff % (1000 * 60)) / 1000);

        return {
          hours: Math.max(0, hoursUntilReset),
          minutes: Math.max(0, minutesUntilReset),
          seconds: Math.max(0, secondsUntilReset),
        };
      }

      // Update master clock display with performance optimization
      function updateClock() {
        const currentGame = featuredGames[currentGameIndex];
        const time = getTimeUntilReset(currentGame.resetHour, currentGame.resetMinute || 0);

        const newHours = String(time.hours).padStart(2, '0');
        const newMinutes = String(time.minutes).padStart(2, '0');
        const newSeconds = String(time.seconds).padStart(2, '0');

        // Only update if value changed to reduce DOM manipulation
        if (clockHours && clockHours.textContent !== newHours) {
          clockHours.textContent = newHours;
        }
        if (clockMinutes && clockMinutes.textContent !== newMinutes) {
          clockMinutes.textContent = newMinutes;
        }
        if (clockSeconds && clockSeconds.textContent !== newSeconds) {
          clockSeconds.textContent = newSeconds;
        }
      }

      // Switch master clock to a specific game with smooth animation
      function switchToGame(index, direction = 'next') {
        if (index < 0 || index >= featuredGames.length) return;

        currentGameIndex = index;
        const game = featuredGames[currentGameIndex];

        // Fade out image
        if (clockGameImage) {
          clockGameImage.style.opacity = '0';
        }

        // Fade out text slightly
        if (clockGameName) {
          clockGameName.style.opacity = '0.5';
          clockGameName.style.transform = 'translateY(10px)';
        }

        // Use requestAnimationFrame for smoother transitions
        requestAnimationFrame(() => {
          setTimeout(() => {
            // Update content with smooth transitions
            if (clockGameImage && game.image) {
              clockGameImage.src = game.image;
              clockGameImage.alt = game.name;
              clockGameImage.style.opacity = '1';
            }
            if (clockGameName) {
              clockGameName.textContent = game.name;
              clockGameName.style.opacity = '1';
              clockGameName.style.transform = 'translateY(0)';
            }

            // Update reset time display
            if (resetTimeDisplay) {
              const resetHour = String(game.resetHour).padStart(2, '0');
              const resetMin = String(game.resetMinute || 0).padStart(2, '0');
              resetTimeDisplay.textContent = `${resetHour}:${resetMin}`;
            }

            // Update timer description with mobile-responsive text
            if (timerMainLabel) {
              const isMobile = window.innerWidth <= 768;
              const desktopText = game.timerDescription || 'Server reset timer';
              const mobileText = isMobile ? 'Daily reset' : desktopText;
              timerMainLabel.textContent = mobileText;
            }

            // Update indicators
            updateIndicators();

            // Update clock immediately
            updateClock();
          }, 200);
        });

        // Save preference only for manual interactions (not auto-rotation)
        if (direction !== 'auto') {
          localStorage.setItem('master-clock-game', game.id);
          localStorage.setItem('master-clock-last-interaction', Date.now().toString());
        }
      }

      // Update showcase content - MOBILE OPTIMIZED
      function updateShowcase(index) {
        if (index < 0 || index >= showcaseGames.length) return;

        currentShowcaseIndex = index;
        const game = showcaseGames[currentShowcaseIndex];

        // Check if mobile device
        const isMobile = window.innerWidth <= 768;

        if (isMobile) {
          // Mobile-optimized transition - simple fade
          const elements = [
            showcaseTitle,
            showcaseDescription,
            showcaseFeatures,
            document.querySelector('.showcase-actions'),
            showcaseGameImage,
          ];

          // Quick fade out
          elements.forEach(el => {
            if (el) {
              el.style.opacity = '0.3';
              el.style.transform = 'translateY(5px)';
            }
          });

          // Update content after minimal delay
          setTimeout(() => {
            updateShowcaseContent(game);

            // Fade back in
            elements.forEach(el => {
              if (el) {
                el.style.opacity = '1';
                el.style.transform = 'translateY(0)';
              }
            });
          }, 150);
        } else {
          // Desktop version - keep existing animations
          updateShowcaseContent(game);

          const elements = [
            showcaseTitle,
            showcaseDescription,
            showcaseFeatures,
            document.querySelector('.showcase-actions'),
          ];
          elements.forEach(el => {
            if (el) el.classList.add('active');
          });
        }
      }

      // Update showcase content elements - SIMPLIFIED
      function updateShowcaseContent(game) {
        // Update image
        if (showcaseGameImage) {
          showcaseGameImage.src = game.image;
          showcaseGameImage.alt = game.name;
        }

        // Update text content
        if (showcaseTitle) {
          showcaseTitle.textContent = game.name;
        }
        if (showcaseDescription) showcaseDescription.textContent = game.description;
        if (showcaseLink) showcaseLink.href = game.url;

        // Update features - SIMPLE approach
        if (showcaseFeatures) {
          showcaseFeatures.innerHTML = '';
          game.features.forEach(feature => {
            const tag = document.createElement('div');
            tag.className = 'showcase-feature-tag';
            tag.textContent = feature;
            showcaseFeatures.appendChild(tag);
          });
        }
      }

      // Create indicator dots for master clock
      function createIndicators() {
        if (!gameIndicators) return;

        gameIndicators.innerHTML = '';
        featuredGames.forEach((game, index) => {
          const dot = document.createElement('div');
          dot.className = 'indicator-dot';
          dot.setAttribute('data-index', index);
          dot.setAttribute('title', game.name);

          dot.addEventListener('click', () => {
            stopAutoRotation();
            const direction = index > currentGameIndex ? 'next' : 'prev';
            switchToGame(index, direction);
            // Sync showcase with clock
            updateShowcase(index);
          });

          gameIndicators.appendChild(dot);
        });

        updateIndicators();
      }

      // Update indicator states
      function updateIndicators() {
        if (!gameIndicators) return;

        const dots = gameIndicators.querySelectorAll('.indicator-dot');
        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === currentGameIndex);
        });
      }

      // Start auto-rotation for master clock - MOBILE OPTIMIZED
      function startAutoRotation() {
        if (autoRotateInterval) clearInterval(autoRotateInterval);

        // Detect mobile for optimized intervals
        const isMobile = window.innerWidth <= 768;
        const rotationInterval = isMobile ? 8000 : 6000; // Slower on mobile for better performance

        autoRotateInterval = setInterval(() => {
          const nextIndex = (currentGameIndex + 1) % featuredGames.length;
          switchToGame(nextIndex, 'auto');
          // Sync showcase with clock
          updateShowcase(nextIndex);
        }, rotationInterval);
      }

      // Stop auto-rotation
      function stopAutoRotation() {
        if (autoRotateInterval) {
          clearInterval(autoRotateInterval);
          autoRotateInterval = null;
        }
        isAutoRotating = false;
        updateRotationToggle();
      }

      // Toggle auto-rotation
      function toggleAutoRotation() {
        if (isAutoRotating) {
          stopAutoRotation();
        } else {
          isAutoRotating = true;
          startAutoRotation();
          updateRotationToggle();
        }
      }

      // Update rotation toggle button
      function updateRotationToggle() {
        if (!rotationToggle) return;

        const playIcon = rotationToggle.querySelector('.play-icon');
        const pauseIcon = rotationToggle.querySelector('.pause-icon');

        rotationToggle.classList.toggle('active', isAutoRotating);

        if (isAutoRotating) {
          playIcon.style.display = 'none';
          pauseIcon.style.display = 'block';
        } else {
          playIcon.style.display = 'block';
          pauseIcon.style.display = 'none';
        }
      }

      // Load saved game preference
      function loadSavedGame() {
        // Start with Silver & Blood to ensure it shows up
        let savedIndex = 1; // Silver & Blood is index 1

        if (featuredGames.length <= 1) {
          savedIndex = 0; // Fallback to first game if only one exists
        }

        // Only respect saved preference if user manually interacted recently
        const savedGameId = localStorage.getItem('master-clock-game');
        const lastInteraction = localStorage.getItem('master-clock-last-interaction');
        const now = Date.now();
        const oneHour = 60 * 60 * 1000;

        if (savedGameId && lastInteraction && now - parseInt(lastInteraction) < oneHour) {
          const foundIndex = featuredGames.findIndex(game => game.id === savedGameId);
          if (foundIndex !== -1) {
            savedIndex = foundIndex;
          }
        }

        switchToGame(savedIndex, 'next');
      }

      // Setup event listeners
      function setupEventListeners() {
        // Navigation buttons
        if (prevBtn) {
          prevBtn.addEventListener('click', () => {
            stopAutoRotation();
            const prevIndex =
              currentGameIndex === 0 ? featuredGames.length - 1 : currentGameIndex - 1;
            switchToGame(prevIndex, 'prev');
            // Sync showcase with clock
            updateShowcase(prevIndex);
          });
        }

        if (nextBtn) {
          nextBtn.addEventListener('click', () => {
            stopAutoRotation();
            const nextIndex = (currentGameIndex + 1) % featuredGames.length;
            switchToGame(nextIndex, 'next');
            // Sync showcase with clock
            updateShowcase(nextIndex);
          });
        }

        // Auto-rotation toggle
        if (rotationToggle) {
          rotationToggle.addEventListener('click', toggleAutoRotation);
        }

        // Pause auto-rotation on hover
        if (masterClock) {
          masterClock.addEventListener('mouseenter', () => {
            if (isAutoRotating && autoRotateInterval) {
              clearInterval(autoRotateInterval);
            }
          });

          masterClock.addEventListener('mouseleave', () => {
            if (isAutoRotating) {
              startAutoRotation();
            }
          });
        }
      }

      // Initialize the master clock
      function initializeClock() {
        createIndicators();
        loadSavedGame();
        setupEventListeners();
        updateRotationToggle();

        // Initialize reset time display and timer description
        const currentGame = featuredGames[currentGameIndex];
        if (resetTimeDisplay) {
          const resetHour = String(currentGame.resetHour).padStart(2, '0');
          const resetMin = String(currentGame.resetMinute || 0).padStart(2, '0');
          resetTimeDisplay.textContent = `${resetHour}:${resetMin}`;
        }
        if (timerMainLabel) {
          const isMobile = window.innerWidth <= 768;
          const desktopText = currentGame.timerDescription || 'Server reset timer';
          const mobileText = isMobile ? 'Daily reset' : desktopText;
          timerMainLabel.textContent = mobileText;
        }

        // Start clock updates
        updateClock();
        clockUpdateInterval = setInterval(updateClock, 1000);

        // Start auto-rotation
        if (isAutoRotating) {
          startAutoRotation();
        }
      }

      // Initialize showcase with mobile optimizations
      function initializeShowcase() {
        // Preload images
        showcaseGames.forEach(game => {
          const img = new Image();
          img.src = game.image;
        });

        // Sync with clock's initial game
        updateShowcase(currentGameIndex);

        // Mobile optimization: Pause animations when showcase is not visible
        if (window.IntersectionObserver) {
          const showcaseElement = document.querySelector('.auto-showcase');
          if (showcaseElement) {
            const observer = new IntersectionObserver(
              entries => {
                entries.forEach(entry => {
                  if (entry.isIntersecting) {
                    // Resume animations when visible
                    if (isAutoRotating && !autoRotateInterval) {
                      startAutoRotation();
                    }
                  } else {
                    // Pause animations when not visible (performance optimization)
                    if (autoRotateInterval) {
                      clearInterval(autoRotateInterval);
                      autoRotateInterval = null;
                    }
                  }
                });
              },
              { threshold: 0.1 }
            );

            observer.observe(showcaseElement);
          }
        }
      }

      // Initialize everything
      initializeClock();
      initializeShowcase();
    });
  </script>
</HomeLayout>
