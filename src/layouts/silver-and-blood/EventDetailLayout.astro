---
import { Image } from 'astro:assets';
import SABBaseHead from '../../components/silver-and-blood/SABBaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import MobileMenu from '../../components/MobileMenu.astro';
import GameNavigationHeader from '../../components/GameNavigationHeader.astro';
import DecorativeLines from '../../components/DecorativeLines.astro';
import GameSEO from '../../components/GameSEO.astro';
import CustomScrollbar from '../../components/CustomScrollbar.astro';
import Breadcrumb from '../../components/silver-and-blood/Breadcrumb.astro';

// Import consolidated CSS file for events
import '../../styles/games/silver-and-blood/sab-colors.css';
import '../../styles/games/silver-and-blood/sab-event-complete.css';

export interface Props {
	title: string;
	description?: string;
	gameTitle?: string;
	eventData?: any;
}

const { title, description, gameTitle, eventData } = Astro.props;
---

<html lang="en">
	<head>
		<SABBaseHead title={title} description={description || ""} />
		<GameSEO gameKey="silver-and-blood" title={title} description={description} />
		
		<slot name="head" />
	</head>
	<body class="sab-body">
		<CustomScrollbar />
		<!-- Background layers for visual depth -->
		<div class="bg-layer sab-bg-primary"></div>
		<div class="bg-layer sab-bg-accent-1"></div>
		<div class="bg-layer sab-bg-accent-2"></div>
		<div class="bg-layer sab-bg-accent-3"></div>
		
		<div class="sab-content">
			<Header />
			<GameNavigationHeader currentPath={Astro.url.pathname} gameKey="silver-and-blood" />
			<MobileMenu />
			
			<div class="sab-container">
				<main class="silver-and-blood-main" id="main-content">
					<!-- Title Section -->
					{gameTitle && (
						<section class="title-only-section">
							<h1 class="title-only-heading">
								{gameTitle}
							</h1>
							
							<DecorativeLines />
						</section>
					)}

					<!-- Breadcrumb Navigation -->
					<Breadcrumb
						autoGenerate={true}
						gameKey="silver-and-blood"
						showBackButton={true}
					/>

					<!-- Content Area -->
					<div class="content-area">
						{eventData && (
							<section class="event-details-section">
								<div class="event-header">
									<div class="guide-author">
										<p class="author-info">
											<strong>Author:</strong> {eventData.author}<br />
											<em>{eventData.authorNote}</em>
										</p>
									</div>
								</div>


{/* Introduction Section with Embedded Images */}
								<div class="introduction-section">
									<h2>{eventData.introduction?.title}</h2>
									{eventData.introduction?.content.map((paragraph, index) => (
										<div class="intro-paragraph-section">
											<div class="content-paragraph">
												<p>{paragraph}</p>
											</div>
											{(() => {
												const imageInfo = eventData.introduction?.images?.find(img => img.afterParagraph === index);
												if (imageInfo) {
													const img = eventData.images?.find(image => image.id === imageInfo.imageId);
													return img && (
														<div class="guide-image-section">
															<div class="guide-image">
																<Image
																	src={img.src}
																	alt={img.alt}
																	loading="lazy"
																	width={600}
																	height={400}
																	format="webp"
																	quality={85}
																/>
															</div>
															{img.description && (
																<div class="image-description">
																	<p>{img.description}</p>
																</div>
															)}
														</div>
													);
												}
												return null;
											})()}
										</div>
									))}
								</div>

{/* Guide Synopsis Navigation */}
								{eventData.guideSynopsis && (
									<div class="guide-synopsis">
										<h2>{eventData.guideSynopsis.title}</h2>
										<p class="synopsis-subtitle">{eventData.guideSynopsis.subtitle}</p>
										<div class="synopsis-grid">
											{eventData.guideSynopsis.sections.map(section => (
												<a href={`#${section.id}`} class="synopsis-card">
													<div class="synopsis-title">{section.title}</div>
													<div class="synopsis-subtitle">{section.subtitle}</div>
													<div class="synopsis-description">{section.description}</div>
												</a>
											))}
										</div>
									</div>
								)}

								<!-- Upcoming Event Notice -->
								{eventData.upcomingEvent && (
									<div class="upcoming-event-notice">
										<h3>Upcoming Event</h3>
										<p>
											<strong>{eventData.upcomingEvent.name}</strong> featuring {eventData.upcomingEvent.character} - {eventData.upcomingEvent.date}
										</p>
									</div>
								)}

								<!-- Guide Sections -->
								<div class="guide-sections">
									{eventData.sections?.map(section => (
										<div class="guide-section" id={section.id}>
											<h2>{section.title}</h2>
											{section.contentWithImages ? (
												<div class="section-content">
													{section.contentWithImages.map(item => {
														if (item.type === 'text') {
															return (
																<p class="inline-text">{item.content}</p>
															);
														} else if (item.type === 'image') {
															const img = eventData.images?.find(image => image.id === item.imageId);
															return img && (
																<div class="inline-small-image">
																	<Image
																	src={img.src}
																	alt={img.alt}
																	loading="lazy"
																	width={600}
																	height={400}
																	format="webp"
																	quality={85}
																/>
																</div>
															);
														}
														return null;
													})}
												</div>
											) : section.content && section.content.length > 0 ? (
												<div class="section-content">
													{section.content.map(item => (
														<p>{item}</p>
													))}
												</div>
											) : (
												<p class="coming-soon">Content coming soon...</p>
											)}
										</div>
									))}
								</div>

								<!-- Custom Content Slot -->
								<div class="custom-content">
									<slot />
								</div>

								<!-- Source Information -->
								<div class="source-info">
									<p class="source-label">
										Source: {eventData.sourceInfo?.sourceUrl ? (
											<a href={eventData.sourceInfo.sourceUrl} target="_blank" rel="noopener noreferrer" class="source-link">
												{eventData.sourceInfo.source}
											</a>
										) : (
											eventData.sourceInfo?.source
										)}
									</p>
									{eventData.sourceInfo?.verified && (
										<span class="verified-badge">âœ“ Verified</span>
									)}
									<p class="last-updated">Last updated: {eventData.sourceInfo?.lastUpdated}</p>
								</div>

							</section>
						)}
						
						{!eventData && (
							<slot />
						)}
					</div>
				</main>
			</div>
			
			<Footer />
		</div>

		<script is:inline>
			// Memory-leak safe image click handler using native APIs
			(function() {
				let isInitialized = false;
				let clickHandlers = new WeakMap();

				function handleImageClick(event) {
					// Use native window.open with security features
					const url = event.target.src;
					if (url) {
						window.open(url, '_blank', 'noopener,noreferrer');
					}
				}

				function initImageClick() {
					if (isInitialized) return;

					// Use event delegation to avoid memory leaks
					const container = document.querySelector('.event-details-section');
					if (!container) return;

					// Single event listener on container instead of individual images
					container.addEventListener('click', function(event) {
						const target = event.target;
						// Check if clicked element is an image we want to handle
						if (target.tagName === 'IMG' &&
							(target.closest('.inline-small-image') || target.closest('.guide-image'))) {
							event.preventDefault();
							target.style.cursor = 'pointer';
							handleImageClick(event);
						}
					});

					isInitialized = true;
				}

				// Cleanup function for page unload
				function cleanup() {
					clickHandlers = new WeakMap();
					isInitialized = false;
				}

				// Initialize when DOM is ready
				if (document.readyState === 'loading') {
					document.addEventListener('DOMContentLoaded', initImageClick, { once: true });
				} else {
					initImageClick();
				}

				// Cleanup on page unload to prevent memory leaks
				window.addEventListener('beforeunload', cleanup, { once: true });
			})();
		</script>
	</body>
</html>