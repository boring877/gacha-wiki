---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import MobileMenu from '../../components/MobileMenu.astro';
import DecorativeLines from '../../components/DecorativeLines.astro';
import SilverAndBloodNavigation from '../../components/silver-and-blood/SilverAndBloodNavigation.astro';

// Import consolidated CSS file for events
import '../../styles/games/silver-and-blood/sab-event-complete.css';

export interface Props {
	title: string;
	description?: string;
	gameTitle?: string;
	eventData?: any;
}

const { title, description, gameTitle, eventData } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description || ""} />
		<meta name="keywords" content="Silver and Blood, events, character events, guides, vampire game, limited time events" />
		<meta name="author" content="GachaWiki" />
		<meta name="robots" content="index, follow" />
		
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description || ""} />
		<meta property="og:type" content="article" />
		<meta property="og:url" content={new URL(Astro.url.pathname, Astro.site)} />
		
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description || ""} />
		
		<link rel="canonical" href={new URL(Astro.url.pathname, Astro.site)} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
		<meta name="theme-color" content="#5a7ba7" />
		
		<script type="application/ld+json">
			{JSON.stringify({
				"@context": "https://schema.org",
				"@type": "Event",
				"name": title,
				"description": description || `Event guide for ${title} in Silver and Blood`,
				"about": {
					"@type": "VideoGame",
					"name": "Silver and Blood"
				},
				"publisher": {
					"@type": "Organization",
					"name": "GachaWiki"
				},
				"mainEntityOfPage": {
					"@type": "WebPage",
					"@id": new URL(Astro.url.pathname, Astro.site)
				}
			})}
		</script>
		
		<slot name="head" />
	</head>
	<body class="sab-body">
		<!-- Background layers for visual depth -->
		<div class="bg-layer bg-primary"></div>
		<div class="bg-layer bg-accent-1"></div>
		<div class="bg-layer bg-accent-2"></div>
		<div class="bg-layer bg-accent-3"></div>
		
		<div class="sab-content">
			<Header />
			<MobileMenu />
			
			<div class="sab-container">
				<main class="sab-main">
					<!-- Title Section -->
					{gameTitle && (
						<section class="title-only-section">
							<h1 class="title-only-heading">
								{gameTitle}
							</h1>
							
							<DecorativeLines />
						</section>
					)}
					
					<!-- Silver and Blood Navigation -->
					<SilverAndBloodNavigation currentPath={Astro.url.pathname} showWaifuGallery={true} />
					
					<!-- Content Area -->
					<div class="content-area">
						{eventData && (
							<section class="event-details-section">
								<div class="event-header">
									<div class="guide-author">
										<p class="author-info">
											<strong>Author:</strong> {eventData.author}<br />
											<em>{eventData.authorNote}</em>
										</p>
										<p class="community-link">
											<strong>Community Discord:</strong> 
											<a href={eventData.communityDiscord} target="_blank" rel="noopener noreferrer">
												{eventData.communityDiscord}
											</a>
										</p>
									</div>
								</div>


								<!-- Introduction Section with Embedded Images -->
								<div class="introduction-section">
									<h2>{eventData.introduction?.title}</h2>
									{eventData.introduction?.content.map((paragraph, index) => (
										<div class="intro-paragraph-section">
											<div class="content-paragraph">
												<p>{paragraph}</p>
											</div>
											{(() => {
												const imageInfo = eventData.introduction?.images?.find(img => img.afterParagraph === index);
												if (imageInfo) {
													const img = eventData.images?.find(image => image.id === imageInfo.imageId);
													return img && (
														<div class="guide-image-section">
															<div class="guide-image">
																<img src={img.src} alt={img.alt} loading="lazy" />
															</div>
															{img.description && (
																<div class="image-description">
																	<p>{img.description}</p>
																</div>
															)}
														</div>
													);
												}
												return null;
											})()}
										</div>
									))}
								</div>

								<!-- Guide Synopsis Navigation -->
								{eventData.guideSynopsis && (
									<div class="guide-synopsis">
										<h2>{eventData.guideSynopsis.title}</h2>
										<p class="synopsis-subtitle">{eventData.guideSynopsis.subtitle}</p>
										<div class="synopsis-grid">
											{eventData.guideSynopsis.sections.map(section => (
												<a href={`#${section.id}`} class="synopsis-card">
													<div class="synopsis-title">{section.title}</div>
													<div class="synopsis-subtitle">{section.subtitle}</div>
													<div class="synopsis-description">{section.description}</div>
												</a>
											))}
										</div>
									</div>
								)}

								<!-- Upcoming Event Notice -->
								{eventData.upcomingEvent && (
									<div class="upcoming-event-notice">
										<h3>Upcoming Event</h3>
										<p>
											<strong>{eventData.upcomingEvent.name}</strong> featuring {eventData.upcomingEvent.character} - {eventData.upcomingEvent.date}
										</p>
									</div>
								)}

								<!-- Guide Sections -->
								<div class="guide-sections">
									{eventData.sections?.map(section => (
										<div class="guide-section" id={section.id}>
											<h2>{section.title}</h2>
											{section.contentWithImages ? (
												<div class="section-content">
													{section.contentWithImages.map(item => {
														if (item.type === 'text') {
															return (
																<p class="inline-text">{item.content}</p>
															);
														} else if (item.type === 'image') {
															const img = eventData.images?.find(image => image.id === item.imageId);
															return img && (
																<div class="inline-small-image">
																	<img src={img.src} alt={img.alt} loading="lazy" />
																</div>
															);
														}
														return null;
													})}
												</div>
											) : section.content && section.content.length > 0 ? (
												<div class="section-content">
													{section.content.map(item => (
														<p>{item}</p>
													))}
												</div>
											) : (
												<p class="coming-soon">Content coming soon...</p>
											)}
										</div>
									))}
								</div>

								<!-- Custom Content Slot -->
								<div class="custom-content">
									<slot />
								</div>

								<!-- Source Information -->
								<div class="source-info">
									<p class="source-label">Source: {eventData.sourceInfo?.source}</p>
									{eventData.sourceInfo?.verified && (
										<span class="verified-badge">âœ“ Verified</span>
									)}
									<p class="last-updated">Last updated: {eventData.sourceInfo?.lastUpdated}</p>
								</div>

							</section>
						)}
						
						{!eventData && (
							<slot />
						)}
					</div>
				</main>
			</div>
			
			<Footer />
		</div>

		<script is:inline>
			// Simple image click handler - opens in new tab
			function initImageClick() {
				// Add click handlers to all images
				const images = document.querySelectorAll('.inline-small-image img, .guide-image img');
				
				images.forEach(img => {
					img.style.cursor = 'pointer';
					img.addEventListener('click', function() {
						// Open image in new tab/window
						window.open(this.src, '_blank');
					});
				});
			}
			
			// Initialize when page loads
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', initImageClick);
			} else {
				initImageClick();
			}
		</script>
	</body>
</html>