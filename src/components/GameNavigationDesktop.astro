---
import { getGameData, isValidGameKey, type GameKey } from '../data/game-navigation';

interface Props {
  currentPath?: string;
  gameKey?: GameKey;
}

const { currentPath = '', gameKey } = Astro.props;

// Validate and sanitize gameKey
const validatedGameKey = isValidGameKey(gameKey) ? gameKey : undefined;
const game = getGameData(validatedGameKey);

const isActive = (href: string) => {
  if (
    href.endsWith('/zone-nova/') ||
    href.endsWith('/silver-and-blood/') ||
    href.endsWith('/horizon-walker/')
  ) {
    return currentPath === href;
  }
  return (
    currentPath === href ||
    (currentPath.startsWith(href) && currentPath !== href.replace(/\/$/, ''))
  );
};

if (!game) return;
---

<style>
  @import '../styles/components/game-navigation-desktop.css';

  /* Hide desktop on mobile/tablet devices */
  @media (max-width: 1024px) {
    .game-nav-desktop {
      display: none;
    }
  }

  /* Additional hide for touch devices */
  @media (hover: none) and (pointer: coarse) {
    .game-nav-desktop {
      display: none;
    }
  }
</style>

<nav class="game-nav-desktop" data-game={validatedGameKey}>
  <div class="container">
    <div class="game-nav-header">
      <div class="game-info">
        <a
          href={validatedGameKey === 'zone-nova'
            ? '/guides/zone-nova/'
            : validatedGameKey === 'horizon-walker'
              ? '/guides/horizon-walker/'
              : '/guides/silver-and-blood/'}
          class="game-link"
        >
          <div class="game-image-container">
            <img src={game.image} alt={game.name} class="game-image" loading="lazy" />
            <div class="game-image-overlay"></div>
          </div>
          <h2 class="game-title">{game.name}</h2>
        </a>
      </div>

      <!-- Desktop Section Navigation -->
      <div class="section-nav">
        {
          game.sections.map(section => (
            <div class="section-item">
              <div class="section-trigger">
                <span class="section-name">{section.title}</span>
              </div>
              <div class="section-dropdown">
                {section.links.map(link => (
                  <a
                    href={link.href}
                    class={isActive(link.href) ? 'dropdown-link active' : 'dropdown-link'}
                    aria-current={isActive(link.href) ? 'page' : undefined}
                  >
                    {link.name}
                  </a>
                ))}
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</nav>

<script>
  // Desktop dropdown functionality with proper cleanup and performance optimizations
  document.addEventListener('DOMContentLoaded', () => {
    const nav = document.querySelector('.game-nav-desktop');
    if (!nav) return;

    const sectionItems = nav.querySelectorAll('.section-item');
    const dropdowns = nav.querySelectorAll('.section-dropdown');

    // Store timeout references for cleanup
    const hoverTimeouts = new Map();

    // Close all dropdowns efficiently
    const closeAllDropdowns = () => {
      dropdowns.forEach(dropdown => {
        (dropdown as HTMLElement).style.opacity = '0';
        (dropdown as HTMLElement).style.visibility = 'hidden';
      });
    };

    // Optimized dropdown toggle with event delegation
    nav.addEventListener('click', (e: Event) => {
      const target = e.target as HTMLElement;
      if (!target) return;

      const trigger = target.closest('.section-trigger');
      if (!trigger) return;

      e.preventDefault();
      e.stopPropagation();

      const item = trigger.closest('.section-item');
      const dropdown = item?.querySelector('.section-dropdown');

      if (!dropdown) return;

      // Close other dropdowns first
      dropdowns.forEach(otherDropdown => {
        if (otherDropdown !== dropdown) {
          (otherDropdown as HTMLElement).style.opacity = '0';
          (otherDropdown as HTMLElement).style.visibility = 'hidden';
        }
      });

      // Toggle current dropdown
      const dropdownElement = dropdown as HTMLElement;
      const isVisible = dropdownElement.style.visibility === 'visible';
      dropdownElement.style.opacity = isVisible ? '0' : '1';
      dropdownElement.style.visibility = isVisible ? 'hidden' : 'visible';
    });

    // Close dropdowns when clicking outside
    const handleOutsideClick = (e: Event) => {
      const target = e.target as HTMLElement;
      if (!target || !nav.contains(target)) {
        closeAllDropdowns();
      }
    };

    // Close dropdowns on ESC key
    const handleEscKey = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        closeAllDropdowns();
      }
    };

    // Enhanced hover behavior with proper timeout management
    sectionItems.forEach(item => {
      const dropdown = item.querySelector('.section-dropdown');
      if (!dropdown) return;

      const handleMouseEnter = () => {
        // Clear any existing timeout for this item
        const existingTimeout = hoverTimeouts.get(item);
        if (existingTimeout) {
          clearTimeout(existingTimeout);
          hoverTimeouts.delete(item);
        }

        // Close other dropdowns
        dropdowns.forEach(otherDropdown => {
          if (otherDropdown !== dropdown) {
            (otherDropdown as HTMLElement).style.opacity = '0';
            (otherDropdown as HTMLElement).style.visibility = 'hidden';
          }
        });

        // Show current dropdown
        const dropdownElement = dropdown as HTMLElement;
        dropdownElement.style.opacity = '1';
        dropdownElement.style.visibility = 'visible';
      };

      const handleMouseLeave = () => {
        // Clear existing timeout
        const existingTimeout = hoverTimeouts.get(item);
        if (existingTimeout) {
          clearTimeout(existingTimeout);
        }

        // Set new timeout and store reference
        const timeoutId = window.setTimeout(() => {
          if (!item.matches(':hover')) {
            const dropdownElement = dropdown as HTMLElement;
            dropdownElement.style.opacity = '0';
            dropdownElement.style.visibility = 'hidden';
          }
          hoverTimeouts.delete(item);
        }, 100);

        hoverTimeouts.set(item, timeoutId);
      };

      item.addEventListener('mouseenter', handleMouseEnter);
      item.addEventListener('mouseleave', handleMouseLeave);
    });

    // Add global event listeners
    document.addEventListener('click', handleOutsideClick);
    document.addEventListener('keydown', handleEscKey);

    // Cleanup function (though not called in this context, good practice)
    const cleanup = () => {
      hoverTimeouts.forEach(timeoutId => clearTimeout(timeoutId));
      hoverTimeouts.clear();
      document.removeEventListener('click', handleOutsideClick);
      document.removeEventListener('keydown', handleEscKey);
    };

    // Store cleanup function for potential future use
    (nav as HTMLElement).dataset.cleanupFn = 'desktopNavCleanup';
    (window as any).desktopNavCleanup = cleanup;

    // Enhanced prefetching system for instant navigation
    const prefetchedLinks = new Set<string>();

    function prefetchPage(url: string | null) {
      if (!url || prefetchedLinks.has(url)) return;

      const existing = document.querySelector(`link[href="${url}"]`);
      if (existing) return;

      const link = document.createElement('link');
      link.rel = 'prefetch';
      link.href = url;
      link.dataset.timestamp = Date.now().toString();
      document.head.appendChild(link);
      prefetchedLinks.add(url);

      // Clean up prefetch links after 30 seconds to manage memory
      setTimeout(() => {
        if (document.head.contains(link)) {
          document.head.removeChild(link);
          prefetchedLinks.delete(url);
        }
      }, 30000);
    }

    // Prefetch on dropdown link hover for instant navigation
    nav.addEventListener('mouseover', (e: Event) => {
      const target = e.target as HTMLElement;
      if (target && target.classList.contains('dropdown-link')) {
        const href = (target as HTMLAnchorElement).href;
        if (href) {
          prefetchPage(href);
        }
      }
    });

    // Prefetch main game pages on section hover
    sectionItems.forEach(item => {
      item.addEventListener('mouseenter', () => {
        const dropdown = item.querySelector('.section-dropdown');
        if (dropdown) {
          const links = dropdown.querySelectorAll('.dropdown-link');
          // Prefetch the first 3 links in each section for faster navigation
          Array.from(links)
            .slice(0, 3)
            .forEach(link => {
              const href = (link as HTMLAnchorElement).href;
              prefetchPage(href);
            });
        }
      });
    });
  });
</script>
