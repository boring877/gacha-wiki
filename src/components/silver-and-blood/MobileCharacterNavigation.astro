---
export interface Props {
  prevCharacter: {
    name: string;
    detailUrl: string;
  };
  nextCharacter: {
    name: string;
    detailUrl: string;
  };
}

const { prevCharacter, nextCharacter } = Astro.props;
---

<!-- Mobile Invisible Swipe Zones -->
<div
  class="mobile-swipe-left"
  data-direction="prev"
  data-character-url={prevCharacter.detailUrl}
  title={`Previous: ${prevCharacter.name}`}
>
</div>
<div
  class="mobile-swipe-right"
  data-direction="next"
  data-character-url={nextCharacter.detailUrl}
  title={`Next: ${nextCharacter.name}`}
>
</div>

<script>
  // High-performance mobile navigation functionality
  document.addEventListener('DOMContentLoaded', () => {
    const mobileSwipeLeft = document.querySelector('.mobile-swipe-left') as HTMLElement | null;
    const mobileSwipeRight = document.querySelector('.mobile-swipe-right') as HTMLElement | null;

    // Performance manager for mobile navigation
    const mobilePerfManager = {
      touchStartTime: 0,
      touchMoved: false,
      lastNavigation: 0,
      navigationThrottle: 300, // Prevent rapid navigation
    };

    // Instant mobile navigation with immediate feedback
    function handleNavigation(url: string | null) {
      if (!url || typeof url !== 'string') {
        return false;
      }

      // Throttle navigation to prevent rapid clicks
      const now = Date.now();
      if (now - mobilePerfManager.lastNavigation < mobilePerfManager.navigationThrottle) {
        return false;
      }
      mobilePerfManager.lastNavigation = now;

      try {
        // Add visual feedback to navigation element only (safer approach)
        const targetButton = document.querySelector(`[data-character-url="${url}"]`) as HTMLElement;
        if (targetButton) {
          targetButton.style.opacity = '0.6';
          targetButton.style.transform = 'scale(0.95)';
          targetButton.style.transition = 'all 0.08s ease';
          targetButton.style.pointerEvents = 'none';
        }

        // Use replace for instant feel
        window.location.replace(url);
        return true;
      } catch (_error: unknown) {
        // Reset element state on error
        const targetButton = document.querySelector(`[data-character-url="${url}"]`) as HTMLElement;
        if (targetButton) {
          targetButton.style.opacity = '1';
          targetButton.style.transform = 'scale(1)';
          targetButton.style.pointerEvents = '';
        }
        return false;
      }
    }

    // High-performance mobile touch handling
    function handleMobileNavigation(element: HTMLElement | null, _direction: string) {
      if (!element) return;

      // Handle touch start - optimized
      element.addEventListener(
        'touchstart',
        _e => {
          mobilePerfManager.touchStartTime = Date.now();
          mobilePerfManager.touchMoved = false;
        },
        { passive: true }
      );

      // Track touch movement - optimized
      element.addEventListener(
        'touchmove',
        _e => {
          mobilePerfManager.touchMoved = true;
        },
        { passive: true }
      );

      // Handle touch end with performance checks
      element.addEventListener('touchend', _e => {
        const touchDuration = Date.now() - mobilePerfManager.touchStartTime;

        // Enhanced touch validation
        if (!mobilePerfManager.touchMoved && touchDuration < 400 && touchDuration > 50) {
          // Prevent accidental touches
          const url = element.getAttribute('data-character-url');
          handleNavigation(url);
        }
      });

      // Optimized click handler with throttling
      element.addEventListener('click', _e => {
        const url = element.getAttribute('data-character-url');
        handleNavigation(url);
      });
    }

    // Initialize mobile navigation with error handling
    try {
      handleMobileNavigation(mobileSwipeLeft, 'prev');
      handleMobileNavigation(mobileSwipeRight, 'next');
    } catch (error: unknown) {
      console.warn('Failed to initialize mobile navigation:', error);
    }

    // Update mobile navigation when character data changes
    function updateMobileNavigation(prevChar: any, nextChar: any) {
      if (mobileSwipeLeft) {
        mobileSwipeLeft.setAttribute('data-character-url', prevChar.detailUrl);
        mobileSwipeLeft.setAttribute('title', `Previous: ${prevChar.name}`);
      }
      if (mobileSwipeRight) {
        mobileSwipeRight.setAttribute('data-character-url', nextChar.detailUrl);
        mobileSwipeRight.setAttribute('title', `Next: ${nextChar.name}`);
      }
    }

    // Expose update function for parent component
    (window as any).updateMobileNavigation = updateMobileNavigation;

    // Cleanup function for memory leak prevention
    function cleanup() {
      // Remove the global function reference
      delete (window as any).updateMobileNavigation;
    }

    // Register cleanup
    window.addEventListener('beforeunload', cleanup);
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') {
        // Reset navigation throttle when page is hidden
        mobilePerfManager.lastNavigation = 0;
      }
    });
  });
</script>
