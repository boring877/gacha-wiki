---
import { characters } from '../../data/silver-and-blood/characters.js';

interface Props {
  currentCharacter: any;
}

const { currentCharacter } = Astro.props;

// Get current character index in the full list
const currentIndex = characters.findIndex(char => char.id === currentCharacter.id);

// Default navigation (no filters)
const defaultPrevious = currentIndex > 0 ? characters[currentIndex - 1] : null;
const defaultNext = currentIndex < characters.length - 1 ? characters[currentIndex + 1] : null;
---

<div class="character-navigation">
  <div class="nav-container">
    <div class="nav-button-group">
      <button 
        id="prev-character" 
        class="nav-btn prev-btn"
        data-current-id={currentCharacter.id}
        data-default-prev={defaultPrevious?.id || ''}
        disabled
      >
        <span class="nav-icon">‚Üê</span>
        <span class="nav-text">
          <span class="nav-label">Previous</span>
          <span class="nav-name" id="prev-name">Loading...</span>
        </span>
      </button>

      <div class="nav-divider"></div>

      <button 
        id="next-character" 
        class="nav-btn next-btn"
        data-current-id={currentCharacter.id}
        data-default-next={defaultNext?.id || ''}
        disabled
      >
        <span class="nav-text">
          <span class="nav-label">Next</span>
          <span class="nav-name" id="next-name">Loading...</span>
        </span>
        <span class="nav-icon">‚Üí</span>
      </button>
    </div>

    <div class="nav-info">
      <span class="current-position" id="nav-position">
        Loading position...
      </span>
      <div class="nav-note">
        <span class="nav-note-text">üí° Navigation follows database filters and sorting</span>
      </div>
    </div>
  </div>
</div>

<script 
  is:inline
  define:vars={{ characters, currentCharacter }}
>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Character Navigation initialized for:', currentCharacter.name);
    
    const prevBtn = document.getElementById('prev-character');
    const nextBtn = document.getElementById('next-character');
    const prevName = document.getElementById('prev-name');
    const nextName = document.getElementById('next-name');
    const navPosition = document.getElementById('nav-position');
    
    if (!prevBtn || !nextBtn || !prevName || !nextName || !navPosition) {
      console.error('Navigation elements not found');
      return;
    }

    let filteredCharacters = characters;
    let currentIndex = 0;

    // Get filter state from sessionStorage (set by character database)
    function getFilterState() {
      try {
        const filterState = sessionStorage.getItem('sab-character-filters');
        const sortState = sessionStorage.getItem('sab-character-sort');
        
        return {
          filters: filterState ? JSON.parse(filterState) : {},
          sort: sortState ? JSON.parse(sortState) : { column: null, asc: true }
        };
      } catch (error) {
        console.log('No filter state found, using defaults');
        return {
          filters: {},
          sort: { column: null, asc: true }
        };
      }
    }

    // Apply filters to character list
    function applyFilters(filters) {
      return characters.filter(char => {
        if (filters.class && char.class !== filters.class) return false;
        if (filters.rarity && char.rarity !== filters.rarity) return false;
        if (filters.faction && char.faction !== filters.faction) return false;
        if (filters.moonPhase && char.moonPhase !== filters.moonPhase) return false;
        return true;
      });
    }

    // Apply sorting to character list
    function applySorting(chars, sort) {
      if (!sort.column) return chars;

      return [...chars].sort((a, b) => {
        let aValue, bValue;

        // Get the correct stat values
        switch (sort.column) {
          case 'hp':
            aValue = a.stats?.hp || 0;
            bValue = b.stats?.hp || 0;
            break;
          case 'atk':
            aValue = a.stats?.atk || 0;
            bValue = b.stats?.atk || 0;
            break;
          case 'pDef':
            aValue = a.stats?.pDef || 0;
            bValue = b.stats?.pDef || 0;
            break;
          case 'mDef':
            aValue = a.stats?.mDef || 0;
            bValue = b.stats?.mDef || 0;
            break;
          case 'bloodPower':
            aValue = a.stats?.bloodPower || 0;
            bValue = b.stats?.bloodPower || 0;
            break;
          default:
            return 0;
        }

        const multiplier = sort.asc ? 1 : -1;
        return (aValue - bValue) * multiplier;
      });
    }

    // Update navigation based on current filters/sort
    function updateNavigation() {
      const state = getFilterState();

      // Apply filters and sorting
      let filtered = applyFilters(state.filters);
      filteredCharacters = applySorting(filtered, state.sort);

      // Find current character index in filtered list
      currentIndex = filteredCharacters.findIndex(char => char.id === currentCharacter.id);
      
      if (currentIndex === -1) {
        // Fallback to unfiltered list if character not found in filtered results
        filteredCharacters = characters;
        currentIndex = characters.findIndex(char => char.id === currentCharacter.id);
      }

      const previousChar = currentIndex > 0 ? filteredCharacters[currentIndex - 1] : null;
      const nextChar = currentIndex < filteredCharacters.length - 1 ? filteredCharacters[currentIndex + 1] : null;

      // Update previous button
      if (previousChar) {
        prevBtn.disabled = false;
        prevName.textContent = previousChar.name;
        prevBtn.onclick = () => navigateToCharacter(previousChar.id);
      } else {
        prevBtn.disabled = true;
        prevName.textContent = 'None';
        prevBtn.onclick = null;
      }

      // Update next button
      if (nextChar) {
        nextBtn.disabled = false;
        nextName.textContent = nextChar.name;
        nextBtn.onclick = () => navigateToCharacter(nextChar.id);
      } else {
        nextBtn.disabled = true;
        nextName.textContent = 'None';
        nextBtn.onclick = null;
      }

      // Update position display
      navPosition.textContent = `${currentIndex + 1} of ${filteredCharacters.length}`;

      // Add filter info if filters are active
      const hasFilters = Object.keys(state.filters).length > 0 || state.sort.column;
      if (hasFilters) {
        let filterInfo = [];
        if (state.filters.class) filterInfo.push(`Class: ${state.filters.class}`);
        if (state.filters.rarity) filterInfo.push(`Rarity: ${state.filters.rarity}`);
        if (state.filters.faction) filterInfo.push(`Faction: ${state.filters.faction}`);
        if (state.filters.moonPhase) filterInfo.push(`Moon: ${state.filters.moonPhase}`);
        if (state.sort.column) {
          const sortDir = state.sort.asc ? '‚Üë' : '‚Üì';
          filterInfo.push(`Sort: ${state.sort.column.toUpperCase()} ${sortDir}`);
        }
        
        if (filterInfo.length > 0) {
          navPosition.textContent += ` (${filterInfo.join(', ')})`;
        }
      }
    }

    // Navigate to character page
    function navigateToCharacter(characterId) {
      if (!characterId) return;
      
      const url = `/guides/silver-and-blood/characters/${characterId}/`;
      console.log('Navigating to:', url);
      window.location.href = url;
    }

    // Keyboard navigation
    document.addEventListener('keydown', function(e) {
      // Don't interfere if user is typing in an input
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
      
      if (e.key === 'ArrowLeft' && !prevBtn.disabled) {
        e.preventDefault();
        prevBtn.click();
      } else if (e.key === 'ArrowRight' && !nextBtn.disabled) {
        e.preventDefault();
        nextBtn.click();
      }
    });

    // Initialize navigation
    updateNavigation();

    // Listen for storage changes (if filters are updated in another tab)
    window.addEventListener('storage', function(e) {
      if (e.key === 'sab-character-filters' || e.key === 'sab-character-sort') {
        updateNavigation();
      }
    });
  });
</script>

<style>
  .character-navigation {
    background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
    border-radius: 12px;
    padding: 1.5rem;
    margin: 2rem 0;
    border: 1px solid rgba(192, 192, 192, 0.1);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
  }

  .nav-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  .nav-button-group {
    display: flex;
    align-items: center;
    gap: 2rem;
    width: 100%;
    max-width: 600px;
  }

  .nav-btn {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1rem 1.5rem;
    background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%);
    color: #c0c0c0;
    border: 1px solid rgba(192, 192, 192, 0.3);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: 'Space Grotesk', sans-serif;
    min-height: 60px;
  }

  .nav-btn:hover:not(:disabled) {
    background: linear-gradient(135deg, #4a4a4a 0%, #3a3a3a 100%);
    border-color: rgba(194, 107, 107, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .nav-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .nav-icon {
    font-size: 1.2rem;
    font-weight: bold;
  }

  .nav-text {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
  }

  .prev-btn .nav-text {
    align-items: flex-end;
  }

  .next-btn .nav-text {
    align-items: flex-start;
  }

  .nav-label {
    font-size: 0.8rem;
    color: #a0a0a0;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .nav-name {
    font-size: 0.9rem;
    font-weight: 600;
    color: #c0c0c0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 120px;
  }

  .nav-divider {
    width: 1px;
    height: 40px;
    background: rgba(192, 192, 192, 0.2);
    flex-shrink: 0;
  }

  .nav-info {
    text-align: center;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .current-position {
    font-size: 0.85rem;
    color: #a0a0a0;
    font-style: italic;
  }

  .nav-note {
    margin-top: 0.5rem;
  }

  .nav-note-text {
    font-size: 0.75rem;
    color: #8a8a8a;
    background: rgba(139, 173, 255, 0.1);
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    border: 1px solid rgba(139, 173, 255, 0.2);
    display: inline-block;
    font-weight: 500;
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .nav-button-group {
      flex-direction: column;
      gap: 1rem;
      max-width: 100%;
    }

    .nav-divider {
      width: 40px;
      height: 1px;
    }

    .nav-btn {
      width: 100%;
      min-height: 50px;
      padding: 0.875rem 1rem;
    }

    .nav-name {
      max-width: 180px;
    }

    .nav-note-text {
      font-size: 0.7rem;
      padding: 0.2rem 0.6rem;
    }

    .current-position {
      font-size: 0.8rem;
    }
  }

  @media (max-width: 480px) {
    .character-navigation {
      padding: 1rem;
      margin: 1.5rem 0;
    }

    .nav-container {
      gap: 0.75rem;
    }

    .nav-btn {
      padding: 0.75rem 1rem;
      font-size: 0.85rem;
      min-height: 48px;
    }

    .nav-name {
      font-size: 0.8rem;
      max-width: 140px;
    }

    .nav-label {
      font-size: 0.7rem;
    }

    .nav-icon {
      font-size: 1rem;
    }

    .nav-note-text {
      font-size: 0.65rem;
      padding: 0.15rem 0.5rem;
    }

    .current-position {
      font-size: 0.75rem;
      line-height: 1.3;
    }
  }

  @media (max-width: 360px) {
    .nav-btn {
      padding: 0.625rem 0.75rem;
      font-size: 0.8rem;
    }

    .nav-name {
      max-width: 120px;
      font-size: 0.75rem;
    }

    .nav-note-text {
      font-size: 0.6rem;
    }
  }
</style>