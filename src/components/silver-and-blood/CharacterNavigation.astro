---
import { characters } from '../../data/silver-and-blood/characters.js';

interface Props {
  currentCharacter: any;
}

const { currentCharacter } = Astro.props;
---

<div class="character-navigation">
  <div class="nav-container">
    <div class="nav-button-group">
      <button id="prev-character" class="nav-btn prev-btn" disabled>
        <span class="nav-icon">‚Üê</span>
        <span class="nav-text">
          <span class="nav-label">Previous</span>
          <span class="nav-name" id="prev-name">Loading...</span>
        </span>
      </button>

      <div class="nav-divider"></div>

      <button id="next-character" class="nav-btn next-btn" disabled>
        <span class="nav-text">
          <span class="nav-label">Next</span>
          <span class="nav-name" id="next-name">Loading...</span>
        </span>
        <span class="nav-icon">‚Üí</span>
      </button>
    </div>

    <div class="nav-info">
      <span class="current-position" id="nav-position">Loading position...</span>
      <div class="nav-note">
        <span class="nav-note-text">üí° Navigation follows database filters and sorting</span>
      </div>
    </div>
  </div>
</div>

<script is:inline define:vars={{ characters, currentCharacter }}>
  document.addEventListener('DOMContentLoaded', function() {
    const prevBtn = document.getElementById('prev-character');
    const nextBtn = document.getElementById('next-character');
    const prevName = document.getElementById('prev-name');
    const nextName = document.getElementById('next-name');
    const navPosition = document.getElementById('nav-position');
    
    if (!prevBtn || !nextBtn || !prevName || !nextName || !navPosition) return;

    let filteredCharacters = characters;
    let currentIndex = 0;

    // Get stored filters/sorting from sessionStorage
    function getStoredState() {
      try {
        const filters = JSON.parse(sessionStorage.getItem('sab-character-filters') || '{}');
        const sort = JSON.parse(sessionStorage.getItem('sab-character-sort') || '{"column":null,"asc":true}');
        return { filters, sort };
      } catch (error) {
        console.log('Error parsing stored state, using defaults');
        return { filters: {}, sort: { column: null, asc: true } };
      }
    }

    // Apply filters
    function applyFilters(chars, filters) {
      return chars.filter(char => {
        if (filters.class && char.class !== filters.class) return false;
        if (filters.rarity && char.rarity !== filters.rarity) return false;
        if (filters.faction && char.faction !== filters.faction) return false;
        if (filters.moonPhase && char.moonPhase !== filters.moonPhase) return false;
        return true;
      });
    }

    // Apply sorting
    function applySorting(chars, sort) {
      if (!sort.column) return chars;
      
      return chars.slice().sort((a, b) => {
        if (sort.column === 'name') {
          const aName = a.name || '';
          const bName = b.name || '';
          return sort.asc ? aName.localeCompare(bName) : bName.localeCompare(aName);
        }
        
        let aValue, bValue;
        
        switch (sort.column) {
          case 'hp': aValue = a.stats?.hp || 0; bValue = b.stats?.hp || 0; break;
          case 'atk': aValue = a.stats?.atk || 0; bValue = b.stats?.atk || 0; break;
          case 'pDef': aValue = a.stats?.pDef || 0; bValue = b.stats?.pDef || 0; break;
          case 'mDef': aValue = a.stats?.mDef || 0; bValue = b.stats?.mDef || 0; break;
          case 'bloodPower': aValue = a.stats?.bloodPower || 0; bValue = b.stats?.bloodPower || 0; break;
          default: return 0;
        }
        
        return sort.asc ? (aValue - bValue) : (bValue - aValue);
      });
    }

    // Update navigation
    function updateNavigation() {
      const { filters, sort } = getStoredState();
      
      // Apply filters and sorting
      let filtered = applyFilters(characters, filters);
      filteredCharacters = applySorting(filtered, sort);

      // Find current character position
      currentIndex = filteredCharacters.findIndex(char => char.id === currentCharacter.id);
      
      if (currentIndex === -1) {
        filteredCharacters = characters;
        currentIndex = characters.findIndex(char => char.id === currentCharacter.id);
      }

      // Update buttons
      const prevChar = currentIndex > 0 ? filteredCharacters[currentIndex - 1] : null;
      const nextChar = currentIndex < filteredCharacters.length - 1 ? filteredCharacters[currentIndex + 1] : null;

      prevBtn.disabled = !prevChar;
      nextBtn.disabled = !nextChar;
      prevName.textContent = prevChar?.name || 'None';
      nextName.textContent = nextChar?.name || 'None';

      if (prevChar) prevBtn.onclick = () => window.location.href = `/guides/silver-and-blood/characters/${prevChar.id}/`;
      if (nextChar) nextBtn.onclick = () => window.location.href = `/guides/silver-and-blood/characters/${nextChar.id}/`;

      // Update position display
      navPosition.textContent = `${currentIndex + 1} of ${filteredCharacters.length}`;
      
      // Show active filters/sorting
      const hasFilters = Object.keys(filters).length > 0 || sort.column;
      if (hasFilters) {
        const info = [];
        if (filters.class) info.push(`Class: ${filters.class}`);
        if (filters.rarity) info.push(`Rarity: ${filters.rarity}`);
        if (filters.faction) info.push(`Faction: ${filters.faction}`);
        if (filters.moonPhase) info.push(`Moon: ${filters.moonPhase}`);
        if (sort.column) info.push(`Sort: ${sort.column.toUpperCase()} ${sort.asc ? '‚Üë' : '‚Üì'}`);
        
        if (info.length > 0) {
          navPosition.textContent += ` (${info.join(', ')})`;
        }
      }
    }

    // Keyboard navigation
    document.addEventListener('keydown', function(e) {
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
      
      if (e.key === 'ArrowLeft' && !prevBtn.disabled) {
        e.preventDefault();
        prevBtn.click();
      } else if (e.key === 'ArrowRight' && !nextBtn.disabled) {
        e.preventDefault();
        nextBtn.click();
      }
    });

    // Initialize and listen for changes
    updateNavigation();
    window.addEventListener('storage', function(e) {
      if (e.key === 'sab-character-filters' || e.key === 'sab-character-sort') {
        updateNavigation();
      }
    });
  });
</script>

<style>
  @import '../../styles/components/silver-and-blood-character-navigation.css';
</style>