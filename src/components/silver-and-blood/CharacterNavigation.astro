---
import { characters } from '../../data/silver-and-blood/characters';

const { currentCharacterSlug } = Astro.props;

// Get prev/next URLs (server-side)
const currentIndex = characters.findIndex(char => char.slug === currentCharacterSlug);

// If character not found, fallback to first character in list
let prevUrl = '/guides/silver-and-blood/characters';
let nextUrl = '/guides/silver-and-blood/characters';
let prevCharacterName = '';
let nextCharacterName = '';

if (currentIndex !== -1) {
  // Previous character (wrap to end if at start)
  const prevIndex = currentIndex > 0 ? currentIndex - 1 : characters.length - 1;
  prevUrl = characters[prevIndex].detailUrl;
  prevCharacterName = characters[prevIndex].name || characters[prevIndex].id;

  // Next character (wrap to start if at end)
  const nextIndex = currentIndex < characters.length - 1 ? currentIndex + 1 : 0;
  nextUrl = characters[nextIndex].detailUrl;
  nextCharacterName = characters[nextIndex].name || characters[nextIndex].id;
} else {
  // Character not found - log for debugging and use first character
  console.warn(`Character not found: ${currentCharacterSlug}`);
  if (characters.length > 0) {
    prevUrl = characters[characters.length - 1].detailUrl;
    nextUrl = characters[0].detailUrl;
    prevCharacterName =
      characters[characters.length - 1].name || characters[characters.length - 1].id;
    nextCharacterName = characters[0].name || characters[0].id;
  }
}
---

<!-- Client-side navigation script -->
<script define:vars={{ prevUrl, nextUrl, prevCharacterName, nextCharacterName }}>
  // Keyboard navigation
  document.addEventListener('keydown', e => {
    const target = e.target;
    if (
      target?.tagName === 'INPUT' ||
      target?.tagName === 'TEXTAREA' ||
      e.ctrlKey ||
      e.altKey ||
      e.metaKey
    ) {
      return;
    }

    if (e.key === 'ArrowLeft') {
      e.preventDefault();
      console.log(`Navigating to previous character: ${prevCharacterName}`);
      window.location.href = prevUrl;
    } else if (e.key === 'ArrowRight') {
      e.preventDefault();
      console.log(`Navigating to next character: ${nextCharacterName}`);
      window.location.href = nextUrl;
    }
  });

  // Mobile swipe zones
  const leftZone = document.getElementById('mobile-swipe-left');
  const rightZone = document.getElementById('mobile-swipe-right');

  let touchStartTime = 0;
  let touchMoved = false;

  function handleTouchStart() {
    touchStartTime = Date.now();
    touchMoved = false;
  }

  function handleTouchMove() {
    touchMoved = true;
  }

  if (leftZone) {
    leftZone.addEventListener('touchstart', handleTouchStart);
    leftZone.addEventListener('touchmove', handleTouchMove);
    leftZone.addEventListener('touchend', () => {
      const touchDuration = Date.now() - touchStartTime;
      if (!touchMoved && touchDuration < 400 && touchDuration > 50) {
        window.location.href = prevUrl;
      }
    });
  }

  if (rightZone) {
    rightZone.addEventListener('touchstart', handleTouchStart);
    rightZone.addEventListener('touchmove', handleTouchMove);
    rightZone.addEventListener('touchend', () => {
      const touchDuration = Date.now() - touchStartTime;
      if (!touchMoved && touchDuration < 400 && touchDuration > 50) {
        window.location.href = nextUrl;
      }
    });
  }
</script>

<!-- Mobile Invisible Swipe Zones -->
<div id="mobile-swipe-left" class="mobile-swipe-zone"></div>
<div id="mobile-swipe-right" class="mobile-swipe-zone"></div>

<style>
  .mobile-swipe-zone {
    position: fixed;
    top: 0;
    width: 80px;
    height: 100vh;
    z-index: 1000;
    cursor: pointer;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
  }

  #mobile-swipe-left {
    left: 0;
  }

  #mobile-swipe-right {
    right: 0;
  }

  /* Only show on mobile devices */
  @media (min-width: 768px) {
    .mobile-swipe-zone {
      display: none;
    }
  }
</style>
