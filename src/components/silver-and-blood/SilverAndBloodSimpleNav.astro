---
// Simple Silver and Blood Navigation for dedicated layouts
export interface Props {
	currentPath?: string;
}

const { currentPath = '' } = Astro.props;

// Navigation items
const quickLinks = [
	{ name: 'Overview', href: '/guides/silver-and-blood/' },
	{ name: 'Characters', href: '/guides/silver-and-blood/characters/' },
	{ name: 'Summon FAQ', href: '/guides/silver-and-blood/summon-faq/' },
	{ name: 'Dutchman\'s Revenge', href: '/guides/silver-and-blood/dutchmans-revenge/' },
	{ name: 'Events', href: '/guides/silver-and-blood/events/' }
];

// Function to check if a link is active
function isActiveLink(href: string): boolean {
	if (href === '/guides/silver-and-blood/' && (currentPath === '/guides/silver-and-blood/' || currentPath === '/guides/silver-and-blood')) {
		return true;
	}
	if (href !== '/guides/silver-and-blood/' && currentPath.startsWith(href)) {
		return true;
	}
	return false;
}
---

<nav class="sab-simple-nav" aria-label="Silver and Blood Navigation">
	<div class="nav-container">
		<div class="nav-header">
			<h3 class="nav-title">Silver and Blood Navigation</h3>
		</div>
		
		<div class="nav-links" id="sabNavContainer">
			{quickLinks.map(link => (
				<a 
					href={link.href} 
					class={`nav-link ${isActiveLink(link.href) ? 'active' : ''}`}
					aria-current={isActiveLink(link.href) ? 'page' : undefined}
				>
					{link.name}
				</a>
			))}
		</div>
		<div class="swipe-hint" id="sabSwipeHint">
			<span class="hint-text">← Swipe for more →</span>
		</div>
	</div>
</nav>

<style>
	.sab-simple-nav {
		width: 100%;
		margin-bottom: 3rem;
		position: relative;
		z-index: 10;
	}

	.nav-container {
		background: rgba(28, 28, 28, 0.95);
		border: 2px solid #dc2626;
		border-radius: 16px;
		backdrop-filter: blur(10px);
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
		overflow: hidden;
	}

	.nav-header {
		padding: 1.5rem;
		background: linear-gradient(135deg, rgba(220, 38, 38, 0.1), rgba(192, 192, 192, 0.1));
		border-bottom: 1px solid rgba(220, 38, 38, 0.2);
		text-align: center;
	}

	.nav-title {
		font-family: 'Inter', sans-serif;
		font-size: 1.25rem;
		font-weight: 700;
		color: #f8f9fa;
		margin: 0;
		background: linear-gradient(135deg, #dc2626, #c0c0c0);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.nav-links {
		padding: 1.5rem;
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 1rem;
	}

	.nav-link {
		display: block;
		padding: 1rem 1.5rem;
		color: #e8e8e8;
		text-decoration: none;
		border-radius: 12px;
		font-family: 'Inter', sans-serif;
		font-weight: 500;
		font-size: 1rem;
		transition: all 0.3s ease;
		border: 1px solid rgba(220, 38, 38, 0.2);
		position: relative;
		overflow: hidden;
		text-align: center;
		background: rgba(220, 38, 38, 0.05);
	}

	.nav-link::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, transparent, rgba(220, 38, 38, 0.15), transparent);
		transition: left 0.5s ease;
	}

	.nav-link:hover {
		color: #ffffff;
		background: linear-gradient(135deg, #dc2626, #b91c1c);
		border-color: #dc2626;
		transform: translateY(-2px);
		box-shadow: 0 6px 20px rgba(220, 38, 38, 0.4);
	}

	.nav-link:hover::before {
		left: 100%;
	}

	.nav-link.active {
		color: #ffffff;
		background: linear-gradient(135deg, #dc2626, #c0c0c0);
		border-color: #c0c0c0;
		font-weight: 600;
		box-shadow: 0 8px 25px rgba(220, 38, 38, 0.5);
		transform: translateY(-1px);
	}

	.nav-link.active::before {
		display: none;
	}

	/* Mobile responsive with Zone Nova optimizations */
	@media (max-width: 768px) {
		.sab-simple-nav {
			margin-bottom: 2rem;
		}

		.nav-container {
			overflow: visible;
		}

		.nav-links {
			display: flex;
			flex-direction: row;
			overflow-x: auto;
			overflow-y: visible;
			scroll-behavior: smooth;
			-webkit-overflow-scrolling: touch;
			scrollbar-width: none;
			-ms-overflow-style: none;
			scroll-snap-type: x mandatory;
			padding: 1rem;
			gap: 1rem;
			/* Performance optimizations */
			will-change: scroll-position;
			transform: translateZ(0);
			-webkit-transform: translateZ(0);
			contain: layout;
		}
		
		.nav-links::-webkit-scrollbar {
			display: none;
		}
		
		.nav-link {
			flex-shrink: 0;
			white-space: nowrap;
			min-width: 120px;
			max-width: 180px;
			padding: 0.875rem 1.25rem;
			font-size: 0.875rem;
			scroll-snap-align: start;
			touch-action: manipulation;
			/* Performance optimizations */
			will-change: transform;
			backface-visibility: hidden;
			-webkit-backface-visibility: hidden;
			text-overflow: ellipsis;
			overflow: hidden;
		}
		
		.nav-header {
			padding: 1rem;
		}
		
		.nav-title {
			font-size: 1.1rem;
		}

		/* Add swipe hint */
		.swipe-hint {
			display: block;
			text-align: center;
			margin-top: 0.5rem;
			margin-bottom: 0.5rem;
			opacity: 0;
			transition: opacity 0.3s ease;
			position: relative;
			z-index: 10;
		}
	}

	/* Hide swipe hint on desktop */
	@media (min-width: 769px) {
		.swipe-hint {
			display: none !important;
		}
	}

	/* Swipe hint animations - mobile only */
	@media (max-width: 768px) {
		.swipe-hint.show {
			opacity: 1;
			animation: fadeInUp 0.5s ease-out forwards;
		}

		.swipe-hint.hide {
			animation: fadeOut 0.3s ease-out forwards;
		}

		.hint-text {
			font-family: 'Inter', sans-serif;
			font-size: 0.75rem;
			color: #dc2626;
			font-weight: 500;
			letter-spacing: 0.5px;
			text-transform: uppercase;
		}

		@keyframes fadeInUp {
			from {
				opacity: 0;
				transform: translateY(10px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		@keyframes fadeOut {
			from {
				opacity: 0.7;
			}
			to {
				opacity: 0;
			}
		}
	}
	
	@media (max-width: 480px) {
		.sab-simple-nav {
			margin-bottom: 2rem;
		}
		
		.nav-link {
			min-width: 100px;
			max-width: 140px;
			padding: 0.75rem 1rem;
			font-size: 0.8rem;
		}

		.nav-links {
			padding: 0.75rem;
		}
	}

	/* Performance optimizations */
	@media (prefers-reduced-motion: reduce) {
		.nav-link {
			transition: none;
			transform: none;
		}
		
		.nav-link::before {
			transition: none;
		}
	}
</style>

<script>
	// Mobile navigation optimizations for Silver and Blood
	document.addEventListener('DOMContentLoaded', function() {
		const container = document.getElementById('sabNavContainer');
		const swipeHint = document.getElementById('sabSwipeHint');
		if (!container) return;

		let isDown = false;
		let startX;
		let scrollLeft;
		let animationFrame;
		let indicatorTimeout;

		// Throttle function for performance
		function throttle(func, limit) {
			let inThrottle;
			return function() {
				const args = arguments;
				const context = this;
				if (!inThrottle) {
					func.apply(context, args);
					inThrottle = true;
					setTimeout(() => inThrottle = false, limit);
				}
			}
		}

		// Show/hide swipe hint
		function updateSwipeHint() {
			if (!swipeHint || !container) return;
			
			const scrollWidth = container.scrollWidth;
			const clientWidth = container.clientWidth;
			
			// Only show hint if there's content to scroll (with small buffer)
			if (scrollWidth > clientWidth + 10) {
				swipeHint.classList.add('show');
				swipeHint.classList.remove('hide');
				return true;
			} else {
				swipeHint.classList.add('hide');
				swipeHint.classList.remove('show');
				return false;
			}
		}

		// Reset scroll position to default on page load
		container.scrollLeft = 0;
		
		// Additional reset after a short delay to override browser restoration
		setTimeout(() => {
			container.scrollLeft = 0;
		}, 50);

		// Handle browser back/forward navigation
		window.addEventListener('pageshow', () => {
			container.scrollLeft = 0;
		});

		// Handle window resize to update hint visibility
		if (typeof ResizeObserver !== 'undefined') {
			const resizeObserver = new ResizeObserver(() => {
				setTimeout(() => {
					updateSwipeHint();
				}, 100);
			});
			resizeObserver.observe(container);
		}

		// Initial hint setup
		if (swipeHint) {
			setTimeout(() => {
				const hasOverflow = updateSwipeHint();
				// Auto-hide hint after 4 seconds only if there's overflow
				if (hasOverflow) {
					indicatorTimeout = setTimeout(() => {
						if (swipeHint) {
							swipeHint.classList.add('hide');
							swipeHint.classList.remove('show');
						}
					}, 4000);
				}
			}, 500);
		}

		// Touch events for mobile (optimized)
		container.addEventListener('touchstart', (e) => {
			isDown = true;
			startX = e.touches[0].clientX;
			scrollLeft = container.scrollLeft;
			if (animationFrame) {
				cancelAnimationFrame(animationFrame);
			}
		}, { passive: true });

		const handleTouchMove = throttle((e) => {
			if (!isDown) return;
			const x = e.touches[0].clientX;
			const walk = (x - startX) * 1.5;
			
			animationFrame = requestAnimationFrame(() => {
				container.scrollLeft = scrollLeft - walk;
			});
		}, 16); // ~60fps

		container.addEventListener('touchmove', handleTouchMove, { passive: true });

		container.addEventListener('touchend', () => {
			isDown = false;
			if (animationFrame) {
				cancelAnimationFrame(animationFrame);
			}
			// Hide hint after user interacts
			if (swipeHint) {
				swipeHint.classList.add('hide');
				swipeHint.classList.remove('show');
			}
		}, { passive: true });

		// Hide hint on scroll
		container.addEventListener('scroll', () => {
			if (swipeHint) {
				swipeHint.classList.add('hide');
				swipeHint.classList.remove('show');
			}
		}, { passive: true });

		// Keyboard navigation
		container.addEventListener('keydown', (e) => {
			if (e.key === 'ArrowLeft') {
				container.scrollBy({ left: -150, behavior: 'smooth' });
			} else if (e.key === 'ArrowRight') {
				container.scrollBy({ left: 150, behavior: 'smooth' });
			}
		});

		// Optimized scroll to active item
		const activeItem = container.querySelector('.nav-link.active');
		if (activeItem) {
			// Use intersection observer for better performance
			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (!entry.isIntersecting) {
						activeItem.scrollIntoView({ 
							behavior: 'smooth', 
							block: 'nearest', 
							inline: 'center' 
						});
					}
				});
				observer.disconnect();
			}, { threshold: 0.5 });
			
			setTimeout(() => observer.observe(activeItem), 100);
		}
	});
</script>