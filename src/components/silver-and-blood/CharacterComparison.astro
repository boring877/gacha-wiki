---
import { characters } from '../../data/silver-and-blood/characters.js';

interface Props {
  selectedCharacters?: string[];
}

const { selectedCharacters = [] } = Astro.props;
---

<div class="character-comparison-container">
  <!-- Character Selection -->
  <div class="character-selector">
    <h2>Select Characters to Compare</h2>
    
    <!-- Filters and Sort Controls -->
    <div class="filter-bar">
      <div class="filter-controls">
        <select class="filter-select" id="class-filter">
          <option value="">Class</option>
          <option value="Warrior">Warrior</option>
          <option value="Assassin">Assassin</option>
          <option value="Defender">Defender</option>
          <option value="Marksman">Marksman</option>
          <option value="Sorcerer">Sorcerer</option>
          <option value="Enchanter">Enchanter</option>
        </select>
        <select class="filter-select" id="rarity-filter">
          <option value="">Rarity</option>
          <option value="SSR">SSR</option>
          <option value="SR">SR</option>
          <option value="R">R</option>
        </select>
        <select class="filter-select" id="faction-filter">
          <option value="">Faction</option>
          <option value="Kingdom">Kingdom</option>
          <option value="Ancestors">Ancestors</option>
          <option value="Church">Church</option>
          <option value="Bloodborn">Bloodborn</option>
        </select>
        <select class="filter-select" id="moonphase-filter">
          <option value="">Moon Phase</option>
          <option value="New Moon">New Moon</option>
          <option value="Crescent Moon">Crescent Moon</option>
          <option value="Full Moon">Full Moon</option>
        </select>
      </div>
      <div class="sort-controls">
        <button class="sort-btn" data-sort="hp">HP</button>
        <button class="sort-btn" data-sort="atk">ATK</button>
        <button class="sort-btn" data-sort="pDef">P.DEF</button>
        <button class="sort-btn" data-sort="mDef">M.DEF</button>
        <button class="sort-btn" data-sort="bloodPower">Blood Power</button>
        <button class="reset-btn" id="clear-filters">Reset</button>
      </div>
    </div>
    
    <div class="character-grid">
      {characters.map((character) => (
        <button 
          class="character-select-card"
          data-character-id={character.id}
          data-selected={selectedCharacters.includes(character.id)}
        >
          <img 
            src={character.image} 
            alt={character.name}
            class="character-portrait"
            width="80"
            height="80"
          />
          <div class="character-info">
            <h3>{character.name}</h3>
            <div class="character-badges">
              <span class={`rarity-badge ${character.rarity.toLowerCase()}`}>{character.rarity}</span>
              <span class={`class-badge ${character.class.toLowerCase().replace(' ', '-')}`}>{character.class}</span>
            </div>
          </div>
        </button>
      ))}
    </div>
  </div>

  <!-- Comparison Table -->
  <div class="comparison-table-container" id="comparison-table" style="display: none;">
    <h2>Character Comparison</h2>
    <div class="comparison-controls">
      <button id="clear-comparison" class="clear-btn">Clear All</button>
      <button id="export-comparison" class="export-btn">Export Data</button>
    </div>
    
    <!-- Desktop Premium View -->
    <div class="comparison-table-wrapper">
      <div class="premium-comparison-container">
        <!-- Character Headers -->
        <div class="premium-character-headers">
          <div class="premium-empty-cell"></div>
          <div class="premium-character-column" data-character="1">
            <div class="premium-character-card">
              <div class="character-portrait-container">
                <img class="premium-portrait" data-portrait="1" />
                <div class="portrait-glow"></div>
              </div>
              <h3 class="premium-character-name" data-name="1"></h3>
              <div class="premium-badges" data-badges="1"></div>
            </div>
          </div>
          <div class="premium-character-column" data-character="2">
            <div class="premium-character-card">
              <div class="character-portrait-container">
                <img class="premium-portrait" data-portrait="2" />
                <div class="portrait-glow"></div>
              </div>
              <h3 class="premium-character-name" data-name="2"></h3>
              <div class="premium-badges" data-badges="2"></div>
            </div>
          </div>
          <div class="premium-character-column" data-character="3">
            <div class="premium-character-card">
              <div class="character-portrait-container">
                <img class="premium-portrait" data-portrait="3" />
                <div class="portrait-glow"></div>
              </div>
              <h3 class="premium-character-name" data-name="3"></h3>
              <div class="premium-badges" data-badges="3"></div>
            </div>
          </div>
          <div class="premium-character-column" data-character="4">
            <div class="premium-character-card">
              <div class="character-portrait-container">
                <img class="premium-portrait" data-portrait="4" />
                <div class="portrait-glow"></div>
              </div>
              <h3 class="premium-character-name" data-name="4"></h3>
              <div class="premium-badges" data-badges="4"></div>
            </div>
          </div>
        </div>
        
        <!-- Stats Comparison -->
        <div class="premium-stats-container">
          <!-- Basic Info Section -->
          <div class="premium-section">
            <div class="premium-section-header">
              <span class="section-icon">‚öîÔ∏è</span>
              <h4>Basic Information</h4>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Class</div>
              <div class="stat-value-premium" data-stat="class-1"></div>
              <div class="stat-value-premium" data-stat="class-2"></div>
              <div class="stat-value-premium" data-stat="class-3"></div>
              <div class="stat-value-premium" data-stat="class-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Faction</div>
              <div class="stat-value-premium" data-stat="faction-1"></div>
              <div class="stat-value-premium" data-stat="faction-2"></div>
              <div class="stat-value-premium" data-stat="faction-3"></div>
              <div class="stat-value-premium" data-stat="faction-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Equipment</div>
              <div class="stat-value-premium" data-stat="equipment-1"></div>
              <div class="stat-value-premium" data-stat="equipment-2"></div>
              <div class="stat-value-premium" data-stat="equipment-3"></div>
              <div class="stat-value-premium" data-stat="equipment-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Moon Phase</div>
              <div class="stat-value-premium" data-stat="moon-1"></div>
              <div class="stat-value-premium" data-stat="moon-2"></div>
              <div class="stat-value-premium" data-stat="moon-3"></div>
              <div class="stat-value-premium" data-stat="moon-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Attack Type</div>
              <div class="stat-value-premium" data-stat="attack-1"></div>
              <div class="stat-value-premium" data-stat="attack-2"></div>
              <div class="stat-value-premium" data-stat="attack-3"></div>
              <div class="stat-value-premium" data-stat="attack-4"></div>
            </div>
          </div>
          
          <!-- Combat Stats Section -->
          <div class="premium-section">
            <div class="premium-section-header">
              <span class="section-icon">üìä</span>
              <h4>Combat Stats</h4>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">HP</div>
              <div class="stat-value-premium numeric" data-stat="hp-1"></div>
              <div class="stat-value-premium numeric" data-stat="hp-2"></div>
              <div class="stat-value-premium numeric" data-stat="hp-3"></div>
              <div class="stat-value-premium numeric" data-stat="hp-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">ATK</div>
              <div class="stat-value-premium numeric" data-stat="atk-1"></div>
              <div class="stat-value-premium numeric" data-stat="atk-2"></div>
              <div class="stat-value-premium numeric" data-stat="atk-3"></div>
              <div class="stat-value-premium numeric" data-stat="atk-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">P.DEF</div>
              <div class="stat-value-premium numeric" data-stat="pdef-1"></div>
              <div class="stat-value-premium numeric" data-stat="pdef-2"></div>
              <div class="stat-value-premium numeric" data-stat="pdef-3"></div>
              <div class="stat-value-premium numeric" data-stat="pdef-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">M.DEF</div>
              <div class="stat-value-premium numeric" data-stat="mdef-1"></div>
              <div class="stat-value-premium numeric" data-stat="mdef-2"></div>
              <div class="stat-value-premium numeric" data-stat="mdef-3"></div>
              <div class="stat-value-premium numeric" data-stat="mdef-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">ATK SPD</div>
              <div class="stat-value-premium numeric" data-stat="atkspd-1"></div>
              <div class="stat-value-premium numeric" data-stat="atkspd-2"></div>
              <div class="stat-value-premium numeric" data-stat="atkspd-3"></div>
              <div class="stat-value-premium numeric" data-stat="atkspd-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">CRIT Rate</div>
              <div class="stat-value-premium numeric" data-stat="crit-1"></div>
              <div class="stat-value-premium numeric" data-stat="crit-2"></div>
              <div class="stat-value-premium numeric" data-stat="crit-3"></div>
              <div class="stat-value-premium numeric" data-stat="crit-4"></div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">CRIT DMG</div>
              <div class="stat-value-premium numeric" data-stat="critdmg-1"></div>
              <div class="stat-value-premium numeric" data-stat="critdmg-2"></div>
              <div class="stat-value-premium numeric" data-stat="critdmg-3"></div>
              <div class="stat-value-premium numeric" data-stat="critdmg-4"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Character Cards View -->
    <div class="character-cards-view" id="character-cards-view">
      <h3 class="cards-section-title">Character Overview Cards</h3>
      <div id="character-cards-container"></div>
    </div>
  </div>
</div>

<script define:vars={{ characterData: characters }}>
  // Character data passed from Astro
  const characterDataProcessed = {
    characters: characterData.map(char => ({
      id: char.id,
      name: char.name,
      title: char.title || '',
      rarity: char.rarity,
      class: char.class,
      faction: char.faction,
      equipmentType: char.equipmentType,
      moonPhase: char.moonPhase,
      attackType: char.attackType,
      image: char.image,
      stats: char.stats || {},
      skills: char.skills || []
    }))
  };

  let selectedCharacters = [];
  const maxCharacters = 4;
  let filteredCharacters = [...characterDataProcessed.characters];
  let sortState = { column: null, asc: false };

  // Initialize comparison functionality
  document.addEventListener('DOMContentLoaded', function() {
    initializeCharacterSelection();
    initializeComparisonControls();
    initializeFilterControls();
    renderCharacterGrid();
  });

  function initializeCharacterSelection() {
    const characterCards = document.querySelectorAll('.character-select-card');
    
    characterCards.forEach(card => {
      card.addEventListener('click', function() {
        const characterId = this.dataset.characterId;
        const isSelected = this.dataset.selected === 'true';
        
        if (isSelected) {
          // Remove from selection
          selectedCharacters = selectedCharacters.filter(id => id !== characterId);
          this.dataset.selected = 'false';
        } else {
          // Add to selection if not at max
          if (selectedCharacters.length < maxCharacters) {
            selectedCharacters.push(characterId);
            this.dataset.selected = 'true';
          } else {
            alert(`You can only compare up to ${maxCharacters} characters at once.`);
            return;
          }
        }
        
        updateComparisonTable();
      });
    });
  }

  function initializeComparisonControls() {
    const clearBtn = document.getElementById('clear-comparison');
    const exportBtn = document.getElementById('export-comparison');
    
    clearBtn?.addEventListener('click', clearComparison);
    exportBtn?.addEventListener('click', exportComparison);
  }

  function initializeFilterControls() {
    const rarityFilter = document.getElementById('rarity-filter');
    const classFilter = document.getElementById('class-filter');
    const factionFilter = document.getElementById('faction-filter');
    const moonphaseFilter = document.getElementById('moonphase-filter');
    const sortBtns = document.querySelectorAll('.sort-btn');
    const clearFiltersBtn = document.getElementById('clear-filters');
    
    rarityFilter?.addEventListener('change', applyFilters);
    classFilter?.addEventListener('change', applyFilters);
    factionFilter?.addEventListener('change', applyFilters);
    moonphaseFilter?.addEventListener('change', applyFilters);
    
    sortBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const col = this.dataset.sort;
        // Toggle sort direction if same column, otherwise start with ascending
        sortState.asc = sortState.column === col ? !sortState.asc : true;
        sortState.column = col;
        
        // Update button states
        sortBtns.forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        
        applyFilters();
      });
    });
    
    clearFiltersBtn?.addEventListener('click', clearFilters);
  }

  function applyFilters() {
    const rarityFilter = document.getElementById('rarity-filter').value;
    const classFilter = document.getElementById('class-filter').value;
    const factionFilter = document.getElementById('faction-filter').value;
    const moonphaseFilter = document.getElementById('moonphase-filter').value;
    
    // Filter characters
    filteredCharacters = characterDataProcessed.characters.filter(character => {
      const matchesRarity = !rarityFilter || character.rarity === rarityFilter;
      const matchesClass = !classFilter || character.class === classFilter;
      const matchesFaction = !factionFilter || character.faction === factionFilter;
      const matchesMoonphase = !moonphaseFilter || character.moonPhase === moonphaseFilter;
      
      return matchesRarity && matchesClass && matchesFaction && matchesMoonphase;
    });
    
    // Sort characters if a sort is active
    if (sortState.column) {
      sortCharacters(sortState.column, sortState.asc);
    }
    
    // Re-render grid
    renderCharacterGrid();
  }

  function sortCharacters(sortOption, ascending) {
    filteredCharacters.sort((a, b) => {
      const aStats = a.stats || {};
      const bStats = b.stats || {};
      
      let comparison = 0;
      switch (sortOption) {
        case 'hp':
          comparison = (bStats.hp || 0) - (aStats.hp || 0);
          break;
        case 'atk':
          comparison = (bStats.atk || 0) - (aStats.atk || 0);
          break;
        case 'pDef':
          comparison = (bStats.pDef || 0) - (aStats.pDef || 0);
          break;
        case 'mDef':
          comparison = (bStats.mDef || 0) - (aStats.mDef || 0);
          break;
        case 'bloodPower':
          comparison = (bStats.bloodPower || 0) - (aStats.bloodPower || 0);
          break;
        default:
          comparison = 0;
      }
      
      // Apply direction multiplier (ascending = true means highest first, false means lowest first)
      return ascending ? comparison : -comparison;
    });
  }

  function clearFilters() {
    document.getElementById('rarity-filter').value = '';
    document.getElementById('class-filter').value = '';
    document.getElementById('faction-filter').value = '';
    document.getElementById('moonphase-filter').value = '';
    
    // Clear active sort button and reset sort state
    document.querySelectorAll('.sort-btn').forEach(btn => btn.classList.remove('active'));
    sortState = { column: null, asc: false };
    
    filteredCharacters = [...characterDataProcessed.characters];
    renderCharacterGrid();
  }

  function renderCharacterGrid() {
    const characterGrid = document.querySelector('.character-grid');
    
    characterGrid.innerHTML = filteredCharacters.map(character => `
      <button 
        class="character-select-card"
        data-character-id="${character.id}"
        data-selected="${selectedCharacters.includes(character.id)}"
      >
        <img 
          src="${character.image}" 
          alt="${character.name}"
          class="character-portrait"
          width="80"
          height="80"
        />
        <div class="character-info">
          <h3>${character.name}</h3>
          <div class="character-badges">
            <span class="rarity-badge ${character.rarity.toLowerCase()}">${character.rarity}</span>
            <span class="class-badge ${character.class.toLowerCase().replace(' ', '-')}">${character.class}</span>
          </div>
        </div>
      </button>
    `).join('');
    
    // Re-initialize selection functionality
    initializeCharacterSelection();
  }

  function updateComparisonTable() {
    const comparisonTable = document.getElementById('comparison-table');
    
    if (selectedCharacters.length === 0) {
      comparisonTable.style.display = 'none';
      return;
    }
    
    comparisonTable.style.display = 'block';
    
    // Clear existing data
    clearTableCells();
    
    // Populate table with selected characters
    selectedCharacters.forEach((characterId, index) => {
      const character = characterDataProcessed.characters.find(c => c.id === characterId);
      if (character) {
        populateCharacterColumn(character, index + 1);
      }
    });
    
    // Hide unused columns
    for (let i = selectedCharacters.length + 1; i <= maxCharacters; i++) {
      hideCharacterColumn(i);
    }
    
    // Update mobile view (now shown on desktop too)
    updateMobileComparisonView();
  }

  function updateMobileComparisonView() {
    const mobileCardsContainer = document.getElementById('character-cards-container');
    
    if (selectedCharacters.length === 0) {
      mobileCardsContainer.innerHTML = '';
      return;
    }
    
    const mobileCards = selectedCharacters.map(characterId => {
      const character = characterDataProcessed.characters.find(c => c.id === characterId);
      if (!character) return '';
      
      const stats = character.stats || {};
      const skills = character.skills || [];
      
      return `
        <div class="character-comparison-card">
          <div class="card-header">
            <img src="${character.image}" alt="${character.name}" class="card-portrait">
            <div class="card-info">
              <h3>${character.name}</h3>
              <div class="card-badges">
                <span class="rarity-badge ${character.rarity.toLowerCase()}">${character.rarity}</span>
                <span class="class-badge ${character.class.toLowerCase().replace(' ', '-')}">${character.class}</span>
                <span class="faction-badge ${character.faction.toLowerCase()}">${character.faction}</span>
              </div>
            </div>
          </div>
          
          <div class="card-section">
            <h4>Basic Info</h4>
            <div class="card-stats">
              <div class="card-stat">
                <span class="stat-label">Equipment:</span>
                <span class="stat-value">${character.equipmentType}</span>
              </div>
              <div class="card-stat">
                <span class="stat-label">Moon Phase:</span>
                <span class="stat-value">${character.moonPhase}</span>
              </div>
              <div class="card-stat">
                <span class="stat-label">Attack Type:</span>
                <span class="stat-value">${character.attackType}</span>
              </div>
            </div>
          </div>
          
          <div class="card-section">
            <h4>Base Stats</h4>
            <div class="card-stats">
              <div class="card-stat">
                <span class="stat-label">HP:</span>
                <span class="stat-value">${stats.hp !== undefined ? stats.hp.toLocaleString() : 'N/A'}</span>
              </div>
              <div class="card-stat">
                <span class="stat-label">ATK:</span>
                <span class="stat-value">${stats.atk !== undefined ? stats.atk.toLocaleString() : 'N/A'}</span>
              </div>
              <div class="card-stat">
                <span class="stat-label">P.DEF:</span>
                <span class="stat-value">${stats.pDef !== undefined ? stats.pDef.toLocaleString() : 'N/A'}</span>
              </div>
              <div class="card-stat">
                <span class="stat-label">M.DEF:</span>
                <span class="stat-value">${stats.mDef !== undefined ? stats.mDef.toLocaleString() : 'N/A'}</span>
              </div>
              <div class="card-stat">
                <span class="stat-label">ATK SPD:</span>
                <span class="stat-value">${stats.atkSpd !== undefined ? stats.atkSpd : 'N/A'}</span>
              </div>
              <div class="card-stat">
                <span class="stat-label">CRIT Rate:</span>
                <span class="stat-value">${stats.critRate !== undefined ? stats.critRate + '%' : 'N/A'}</span>
              </div>
              <div class="card-stat">
                <span class="stat-label">CRIT DMG:</span>
                <span class="stat-value">${stats.critDmgIncrease !== undefined ? stats.critDmgIncrease + '%' : 'N/A'}</span>
              </div>
            </div>
          </div>
          
        </div>
      `;
    }).join('');
    
    mobileCardsContainer.innerHTML = mobileCards;
  }

  function clearTableCells() {
    // Clear premium design elements
    for (let i = 1; i <= 4; i++) {
      const column = document.querySelector(`.premium-character-column[data-character="${i}"]`);
      if (column) {
        column.classList.remove('active');
        column.style.display = 'none';
      }
      
      // Clear all stat values for this column
      document.querySelectorAll(`[data-stat$="-${i}"]`).forEach(el => {
        el.textContent = '';
        el.classList.remove('active');
        el.style.display = 'none';
      });
    }
  }

  function populateCharacterColumn(character, columnIndex) {
    // Show character column
    const column = document.querySelector(`.premium-character-column[data-character="${columnIndex}"]`);
    if (column) {
      column.classList.add('active');
      column.style.display = 'block';
    }
    
    // Populate character header
    const portrait = document.querySelector(`.premium-portrait[data-portrait="${columnIndex}"]`);
    if (portrait) {
      portrait.src = character.image;
      portrait.alt = character.name;
    }
    
    const nameEl = document.querySelector(`.premium-character-name[data-name="${columnIndex}"]`);
    if (nameEl) {
      nameEl.textContent = character.name;
    }
    
    const badgesEl = document.querySelector(`.premium-badges[data-badges="${columnIndex}"]`);
    if (badgesEl) {
      badgesEl.innerHTML = `
        <span class="rarity-badge ${character.rarity.toLowerCase()}">${character.rarity}</span>
        <span class="class-badge ${character.class.toLowerCase().replace(' ', '-')}">${character.class}</span>
      `;
    }
    
    // Populate stats
    const stats = character.stats || {};
    
    // Basic info
    const setStatValue = (statName, value) => {
      const el = document.querySelector(`[data-stat="${statName}-${columnIndex}"]`);
      if (el) {
        el.textContent = value;
        el.classList.add('active');
        el.style.display = 'block';
      }
    };
    
    setStatValue('class', character.class);
    setStatValue('faction', character.faction);
    setStatValue('equipment', character.equipmentType);
    setStatValue('moon', character.moonPhase);
    setStatValue('attack', character.attackType);
    
    // Combat stats
    setStatValue('hp', stats.hp !== undefined ? stats.hp.toLocaleString() : 'N/A');
    setStatValue('atk', stats.atk !== undefined ? stats.atk.toLocaleString() : 'N/A');
    setStatValue('pdef', stats.pDef !== undefined ? stats.pDef.toLocaleString() : 'N/A');
    setStatValue('mdef', stats.mDef !== undefined ? stats.mDef.toLocaleString() : 'N/A');
    setStatValue('atkspd', stats.atkSpd !== undefined ? stats.atkSpd + '%' : 'N/A');
    setStatValue('crit', stats.critRate !== undefined ? stats.critRate + '%' : 'N/A');
    setStatValue('critdmg', stats.critDmgIncrease !== undefined ? stats.critDmgIncrease + '%' : 'N/A');
  }

  function hideCharacterColumn(columnIndex) {
    const column = document.querySelector(`.premium-character-column[data-character="${columnIndex}"]`);
    if (column) {
      column.classList.remove('active');
      column.style.display = 'none';
    }
    
    // Hide all stat values for this column
    document.querySelectorAll(`[data-stat$="-${columnIndex}"]`).forEach(el => {
      el.classList.remove('active');
      el.style.display = 'none';
    });
  }

  function clearComparison() {
    selectedCharacters = [];
    
    // Clear all selected states
    const characterCards = document.querySelectorAll('.character-select-card');
    characterCards.forEach(card => {
      card.dataset.selected = 'false';
    });
    
    // Hide comparison table
    document.getElementById('comparison-table').style.display = 'none';
  }

  function exportComparison() {
    if (selectedCharacters.length === 0) {
      alert('Please select characters to compare before exporting.');
      return;
    }
    
    const selectedData = selectedCharacters.map(id => 
      characterDataProcessed.characters.find(c => c.id === id)
    );
    
    // Create formatted text output
    let textOutput = 'SILVER AND BLOOD - CHARACTER COMPARISON\n';
    textOutput += '======================================\n\n';
    textOutput += `Date: ${new Date().toLocaleDateString()}\n`;
    textOutput += `Characters Compared: ${selectedData.length}\n\n`;
    
    selectedData.forEach((char, index) => {
      textOutput += `--- CHARACTER ${index + 1} ---\n`;
      textOutput += `Name: ${char.name}\n`;
      textOutput += `Rarity: ${char.rarity}\n`;
      textOutput += `Class: ${char.class}\n`;
      textOutput += `Faction: ${char.faction}\n`;
      textOutput += `Equipment Type: ${char.equipmentType}\n`;
      textOutput += `Moon Phase: ${char.moonPhase}\n`;
      textOutput += `Attack Type: ${char.attackType}\n\n`;
      
      textOutput += 'BASE STATS (Level 200):\n';
      const stats = char.stats || {};
      textOutput += `  HP: ${stats.hp !== undefined ? stats.hp.toLocaleString() : 'N/A'}\n`;
      textOutput += `  ATK: ${stats.atk !== undefined ? stats.atk.toLocaleString() : 'N/A'}\n`;
      textOutput += `  P.DEF: ${stats.pDef !== undefined ? stats.pDef.toLocaleString() : 'N/A'}\n`;
      textOutput += `  M.DEF: ${stats.mDef !== undefined ? stats.mDef.toLocaleString() : 'N/A'}\n`;
      textOutput += `  ATK SPD: ${stats.atkSpd !== undefined ? stats.atkSpd + '%' : 'N/A'}\n`;
      textOutput += `  CRIT Rate: ${stats.critRate !== undefined ? stats.critRate + '%' : 'N/A'}\n`;
      textOutput += `  CRIT DMG: ${stats.critDmgIncrease !== undefined ? stats.critDmgIncrease + '%' : 'N/A'}\n`;
      textOutput += `  Blood Power: ${stats.bloodPower !== undefined ? stats.bloodPower.toLocaleString() : 'N/A'}\n\n`;
    });
    
    const dataBlob = new Blob([textOutput], { type: 'text/plain' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = 'character-comparison.txt';
    link.click();
    
    URL.revokeObjectURL(url);
  }
</script>