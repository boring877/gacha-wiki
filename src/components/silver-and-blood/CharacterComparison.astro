---
import { Image } from 'astro:assets';
import { characters } from '../../data/silver-and-blood/characters.js';

interface Props {
  selectedCharacters?: string[];
}

const { selectedCharacters = [] } = Astro.props;
---

<div class="character-comparison-container">
  <!-- Character Selection -->
  <div class="character-selector">
    <h2>Select Characters to Compare</h2>

    <!-- Filters and Sort Controls -->
    <div class="filter-bar">
      <div class="filter-controls">
        <select class="filter-select" id="class-filter">
          <option value="">Class</option>
          <option value="Warrior">Warrior</option>
          <option value="Assassin">Assassin</option>
          <option value="Defender">Defender</option>
          <option value="Marksman">Marksman</option>
          <option value="Sorcerer">Sorcerer</option>
          <option value="Enchanter">Enchanter</option>
        </select>
        <select class="filter-select" id="rarity-filter">
          <option value="">Rarity</option>
          <option value="SSR">SSR</option>
          <option value="SR">SR</option>
          <option value="R">R</option>
        </select>
        <select class="filter-select" id="faction-filter">
          <option value="">Faction</option>
          <option value="Kingdom">Kingdom</option>
          <option value="Ancestors">Ancestors</option>
          <option value="Church">Church</option>
          <option value="Bloodborn">Bloodborn</option>
        </select>
        <select class="filter-select" id="moonphase-filter">
          <option value="">Moon Phase</option>
          <option value="New Moon">New Moon</option>
          <option value="Crescent Moon">Crescent Moon</option>
          <option value="Full Moon">Full Moon</option>
        </select>
      </div>

      <div class="controls-right">
        <div class="sort-controls">
          <button class="sort-btn" data-sort="hp">HP</button>
          <button class="sort-btn" data-sort="atk">ATK</button>
          <button class="sort-btn" data-sort="pDef">P.DEF</button>
          <button class="sort-btn" data-sort="mDef">M.DEF</button>
        </div>
        <button class="reset-btn" id="clear-filters">Reset</button>
      </div>
    </div>

    <div class="character-grid">
      {
        characters.map(character => (
          <button
            class="character-select-card"
            data-character-id={character.id}
            data-selected={selectedCharacters.includes(character.id)}
          >
            <Image
              src={character.image}
              alt={character.name}
              class="character-portrait"
              width={80}
              height={80}
              format="webp"
              quality={90}
              loading="lazy"
            />
            <div class="character-info">
              <h3>{character.name}</h3>
              <div class="character-badges">
                <span class={`rarity-badge ${character.rarity.toLowerCase()}`}>
                  {character.rarity}
                </span>
                <span class={`class-badge ${character.class.toLowerCase().replace(' ', '-')}`}>
                  {character.class}
                </span>
              </div>
            </div>
          </button>
        ))
      }
    </div>
  </div>

  <!-- Comparison Table -->
  <div class="comparison-table-container" id="comparison-table" style="display: none;">
    <h2>Character Comparison</h2>
    <div class="comparison-controls">
      <button id="clear-comparison" class="clear-btn">Clear All</button>
    </div>

    <!-- Desktop Premium View -->
    <div class="comparison-container comparison-table-wrapper">
      <div class="premium-comparison-container">
        <!-- Character Headers -->
        <div class="premium-character-headers">
          <div class="premium-character-column" data-character="1">
            <div class="premium-character-card">
              <div class="character-portrait-container">
                <img class="premium-portrait" data-portrait="1" />
                <div class="portrait-glow"></div>
              </div>
              <h3 class="character-name" data-name="1"></h3>
            </div>
          </div>
          <div class="premium-character-column" data-character="2">
            <div class="premium-character-card">
              <div class="character-portrait-container">
                <img class="premium-portrait" data-portrait="2" />
                <div class="portrait-glow"></div>
              </div>
              <h3 class="character-name" data-name="2"></h3>
            </div>
          </div>
          <div class="premium-character-column" data-character="3">
            <div class="premium-character-card">
              <div class="character-portrait-container">
                <img class="premium-portrait" data-portrait="3" />
                <div class="portrait-glow"></div>
              </div>
              <h3 class="character-name" data-name="3"></h3>
            </div>
          </div>
          <div class="premium-character-column" data-character="4">
            <div class="premium-character-card">
              <div class="character-portrait-container">
                <img class="premium-portrait" data-portrait="4" />
                <div class="portrait-glow"></div>
              </div>
              <h3 class="character-name" data-name="4"></h3>
            </div>
          </div>
        </div>

        <!-- Stats Comparison -->
        <div class="premium-stats-container">
          <!-- Basic Info Section -->
          <div class="premium-section">
            <div class="premium-section-header">
              <h4>Basic Information</h4>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Class</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium" data-stat="class-1"></div>
                <div class="stat-value-premium" data-stat="class-2"></div>
                <div class="stat-value-premium" data-stat="class-3"></div>
                <div class="stat-value-premium" data-stat="class-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Faction</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium" data-stat="faction-1"></div>
                <div class="stat-value-premium" data-stat="faction-2"></div>
                <div class="stat-value-premium" data-stat="faction-3"></div>
                <div class="stat-value-premium" data-stat="faction-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Equipment</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium" data-stat="equipment-1"></div>
                <div class="stat-value-premium" data-stat="equipment-2"></div>
                <div class="stat-value-premium" data-stat="equipment-3"></div>
                <div class="stat-value-premium" data-stat="equipment-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Moon Phase</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium" data-stat="moon-1"></div>
                <div class="stat-value-premium" data-stat="moon-2"></div>
                <div class="stat-value-premium" data-stat="moon-3"></div>
                <div class="stat-value-premium" data-stat="moon-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">Attack Type</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium" data-stat="attack-1"></div>
                <div class="stat-value-premium" data-stat="attack-2"></div>
                <div class="stat-value-premium" data-stat="attack-3"></div>
                <div class="stat-value-premium" data-stat="attack-4"></div>
              </div>
            </div>
          </div>

          <!-- Combat Stats Section -->
          <div class="premium-section">
            <div class="premium-section-header">
              <h4>Combat Stats</h4>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">HP</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium numeric" data-stat="hp-1"></div>
                <div class="stat-value-premium numeric" data-stat="hp-2"></div>
                <div class="stat-value-premium numeric" data-stat="hp-3"></div>
                <div class="stat-value-premium numeric" data-stat="hp-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">ATK</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium numeric" data-stat="atk-1"></div>
                <div class="stat-value-premium numeric" data-stat="atk-2"></div>
                <div class="stat-value-premium numeric" data-stat="atk-3"></div>
                <div class="stat-value-premium numeric" data-stat="atk-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">P.DEF</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium numeric" data-stat="pdef-1"></div>
                <div class="stat-value-premium numeric" data-stat="pdef-2"></div>
                <div class="stat-value-premium numeric" data-stat="pdef-3"></div>
                <div class="stat-value-premium numeric" data-stat="pdef-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">M.DEF</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium numeric" data-stat="mdef-1"></div>
                <div class="stat-value-premium numeric" data-stat="mdef-2"></div>
                <div class="stat-value-premium numeric" data-stat="mdef-3"></div>
                <div class="stat-value-premium numeric" data-stat="mdef-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">ATK SPD</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium numeric" data-stat="atkspd-1"></div>
                <div class="stat-value-premium numeric" data-stat="atkspd-2"></div>
                <div class="stat-value-premium numeric" data-stat="atkspd-3"></div>
                <div class="stat-value-premium numeric" data-stat="atkspd-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">CRIT Rate</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium numeric" data-stat="crit-1"></div>
                <div class="stat-value-premium numeric" data-stat="crit-2"></div>
                <div class="stat-value-premium numeric" data-stat="crit-3"></div>
                <div class="stat-value-premium numeric" data-stat="crit-4"></div>
              </div>
            </div>
            <div class="premium-stat-row">
              <div class="stat-label-premium">CRIT DMG</div>
              <div class="premium-stat-values">
                <div class="stat-value-premium numeric" data-stat="critdmg-1"></div>
                <div class="stat-value-premium numeric" data-stat="critdmg-2"></div>
                <div class="stat-value-premium numeric" data-stat="critdmg-3"></div>
                <div class="stat-value-premium numeric" data-stat="critdmg-4"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Set up data for external script -->
<script define:vars={{ characterData: characters }}>
  // Set up global data for the external comparison script
  window.silverBloodComparisonData = {
    characterData: {
      characters: characterData.map(char => ({
        id: char.id,
        name: char.name,
        title: char.title || '',
        rarity: char.rarity,
        class: char.class,
        faction: char.faction,
        equipmentType: char.equipmentType,
        moonPhase: char.moonPhase,
        attackType: char.attackType,
        image: char.image,
        stats: char.stats || {},
        skills: char.skills || [],
      })),
    },
  };
</script>

<!-- Silver and Blood Comparison script -->
<script>
  /**
   * Silver & Blood Character Comparison Tool
   * Secure, optimized character comparison functionality
   */

  class SilverBloodCharacterComparison {
    constructor() {
      this.selectedCharacters = [];
      this.maxCharacters = 4;
      this.characterDataProcessed = null;
      this.filteredCharacters = [];
      this.sortState = { column: null, asc: false };
      this.characterDataCache = new Map();
      this.characterModules = null;
      this.eventListeners = new Map();
      this.characterCardListeners = new WeakMap();

      this.init();
    }

    async init() {
      // Wait for DOM to be ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.initializeApp());
      } else {
        this.initializeApp();
      }
    }

    initializeApp() {
      // Get data from window global (set by Astro)
      if (window.silverBloodComparisonData) {
        this.characterDataProcessed = window.silverBloodComparisonData.characterData;

        // Sort characters alphabetically by name for default order
        this.characterDataProcessed.characters.sort((a, b) => a.name.localeCompare(b.name));
        this.filteredCharacters = [...this.characterDataProcessed.characters];
      } else {
        // Silver & Blood comparison data not found
        return;
      }

      this.initializeComparisonControls();
      this.initializeFilterControls();
      this.renderCharacterGrid();
    }

    // initializeCharacterSelection removed - click handlers now added directly in renderCharacterGrid for better performance

    initializeComparisonControls() {
      const clearBtn = document.getElementById('clear-comparison');
      if (clearBtn) {
        const clearHandler = () => this.clearComparison();
        clearBtn.addEventListener('click', clearHandler);
        this.eventListeners.set('clear-comparison', () => {
          clearBtn.removeEventListener('click', clearHandler);
        });
      }
    }

    initializeFilterControls() {
      // Clean up existing filter listeners
      this.cleanupFilterListeners();

      const rarityFilter = document.getElementById('rarity-filter');
      const classFilter = document.getElementById('class-filter');
      const factionFilter = document.getElementById('faction-filter');
      const moonphaseFilter = document.getElementById('moonphase-filter');
      const sortBtns = document.querySelectorAll('.sort-btn');
      const clearFiltersBtn = document.getElementById('clear-filters');

      // Filter listeners
      const filterHandler = () => this.applyFilters();

      if (rarityFilter) {
        rarityFilter.addEventListener('change', filterHandler);
        this.eventListeners.set('rarity-filter', () => {
          rarityFilter.removeEventListener('change', filterHandler);
        });
      }

      if (classFilter) {
        classFilter.addEventListener('change', filterHandler);
        this.eventListeners.set('class-filter', () => {
          classFilter.removeEventListener('change', filterHandler);
        });
      }

      if (factionFilter) {
        factionFilter.addEventListener('change', filterHandler);
        this.eventListeners.set('faction-filter', () => {
          factionFilter.removeEventListener('change', filterHandler);
        });
      }

      if (moonphaseFilter) {
        moonphaseFilter.addEventListener('change', filterHandler);
        this.eventListeners.set('moonphase-filter', () => {
          moonphaseFilter.removeEventListener('change', filterHandler);
        });
      }

      // Sort button listeners
      sortBtns.forEach(btn => {
        const sortHandler = () => {
          const col = btn.dataset.sort;
          // Input validation
          if (!col || typeof col !== 'string') {
            console.warn('Invalid sort column:', col);
            return;
          }

          // Toggle sort direction if same column, otherwise start with ascending
          this.sortState.asc = this.sortState.column === col ? !this.sortState.asc : true;
          this.sortState.column = col;

          // Update button states
          sortBtns.forEach(b => b.classList.remove('active'));
          btn.classList.add('active');

          this.applyFilters();
        };

        btn.addEventListener('click', sortHandler);
        this.eventListeners.set(`sort-${btn.dataset.sort}`, () => {
          btn.removeEventListener('click', sortHandler);
        });
      });

      if (clearFiltersBtn) {
        const clearFiltersHandler = () => this.clearFilters();
        clearFiltersBtn.addEventListener('click', clearFiltersHandler);
        this.eventListeners.set('clear-filters', () => {
          clearFiltersBtn.removeEventListener('click', clearFiltersHandler);
        });
      }
    }

    applyFilters() {
      const rarityFilter = document.getElementById('rarity-filter')?.value || '';
      const classFilter = document.getElementById('class-filter')?.value || '';
      const factionFilter = document.getElementById('faction-filter')?.value || '';
      const moonphaseFilter = document.getElementById('moonphase-filter')?.value || '';

      // Filter characters
      this.filteredCharacters = this.characterDataProcessed.characters.filter(character => {
        const matchesRarity = !rarityFilter || character.rarity === rarityFilter;
        const matchesClass = !classFilter || character.class === classFilter;
        const matchesFaction = !factionFilter || character.faction === factionFilter;
        const matchesMoonphase = !moonphaseFilter || character.moonPhase === moonphaseFilter;

        return matchesRarity && matchesClass && matchesFaction && matchesMoonphase;
      });

      // Sort characters if a sort is active
      if (this.sortState.column) {
        this.sortCharacters(this.sortState.column, this.sortState.asc);
      }

      // Re-render grid
      this.renderCharacterGrid();
    }

    sortCharacters(sortOption, ascending) {
      this.filteredCharacters.sort((a, b) => {
        const aStats = a.stats || {};
        const bStats = b.stats || {};

        let comparison = 0;
        switch (sortOption) {
          case 'hp':
            comparison = (bStats.hp || 0) - (aStats.hp || 0);
            break;
          case 'atk':
            comparison = (bStats.atk || 0) - (aStats.atk || 0);
            break;
          case 'pDef':
            comparison = (bStats.pDef || 0) - (aStats.pDef || 0);
            break;
          case 'mDef':
            comparison = (bStats.mDef || 0) - (aStats.mDef || 0);
            break;
          default:
            comparison = 0;
        }

        // Apply direction multiplier
        return ascending ? comparison : -comparison;
      });
    }

    clearFilters() {
      const filters = ['rarity-filter', 'class-filter', 'faction-filter', 'moonphase-filter'];
      filters.forEach(id => {
        const element = document.getElementById(id);
        if (element) element.value = '';
      });

      // Clear active sort button and reset sort state
      document.querySelectorAll('.sort-btn').forEach(btn => btn.classList.remove('active'));
      this.sortState = { column: null, asc: false };

      // Reset to alphabetical order (same as initial load)
      this.filteredCharacters = [...this.characterDataProcessed.characters].sort((a, b) =>
        a.name.localeCompare(b.name)
      );
      this.renderCharacterGrid();
    }

    renderCharacterGrid() {
      const characterGrid = document.querySelector('.character-grid');
      if (!characterGrid) return;

      // Clean up existing character card listeners
      this.cleanupCharacterCardListeners();

      // Use DocumentFragment for better performance
      const fragment = document.createDocumentFragment();
      const characterCards = this.filteredCharacters
        .map(character => {
          // Input validation
          if (!character || typeof character !== 'object') {
            console.warn('Invalid character data found:', character);
            return null;
          }

          const cardElement = document.createElement('button');
          cardElement.className = 'character-select-card';
          cardElement.dataset.characterId = character.id || '';
          cardElement.dataset.selected = this.selectedCharacters.includes(character.id);

          // Create elements safely without innerHTML to prevent XSS
          const img = document.createElement('img');
          img.src = character.image || '/images/placeholder.png';
          img.alt = character.name || 'Unknown Character';
          img.className = 'character-portrait';
          img.width = 80;
          img.height = 80;
          img.onerror = function () {
            this.src = '/images/placeholder.png';
          };

          const characterInfo = document.createElement('div');
          characterInfo.className = 'character-info';

          const h3 = document.createElement('h3');
          h3.textContent = character.name || 'Unknown';

          const badgesDiv = document.createElement('div');
          badgesDiv.className = 'character-badges';

          const rarityBadge = document.createElement('span');
          rarityBadge.className = `rarity-badge ${(character.rarity || '').toLowerCase()}`;
          rarityBadge.textContent = character.rarity || 'Unknown';

          const classBadge = document.createElement('span');
          classBadge.className = `class-badge ${(character.class || 'unknown').toLowerCase().replace(' ', '-')}`;
          classBadge.textContent = character.class || 'Unknown';

          const factionBadge = document.createElement('span');
          factionBadge.className = `faction-badge ${(character.faction || '').toLowerCase()}`;
          factionBadge.textContent = character.faction || 'Unknown';

          badgesDiv.appendChild(rarityBadge);
          badgesDiv.appendChild(classBadge);
          badgesDiv.appendChild(factionBadge);
          characterInfo.appendChild(h3);
          characterInfo.appendChild(badgesDiv);
          cardElement.appendChild(img);
          cardElement.appendChild(characterInfo);

          // Add click handler with proper tracking
          const cardClickHandler = () => {
            const characterId = cardElement.dataset.characterId;
            const isSelected = cardElement.dataset.selected === 'true';

            // Input validation
            if (!characterId || typeof characterId !== 'string') {
              console.warn('Invalid character ID found on card');
              return;
            }

            if (isSelected) {
              this.selectedCharacters = this.selectedCharacters.filter(id => id !== characterId);
              cardElement.dataset.selected = 'false';
            } else {
              if (this.selectedCharacters.length < this.maxCharacters) {
                this.selectedCharacters.push(characterId);
                cardElement.dataset.selected = 'true';
              } else {
                const oldestId = this.selectedCharacters.shift();
                this.selectedCharacters.push(characterId);

                const oldCard = document.querySelector(`[data-character-id="${oldestId}"]`);
                if (oldCard) {
                  oldCard.dataset.selected = 'false';
                }

                cardElement.dataset.selected = 'true';
              }
            }

            this.updateComparisonTable();

            if (this.selectedCharacters.length === this.maxCharacters) {
              this.navigateToComparison();
            }
          };

          cardElement.addEventListener('click', cardClickHandler);
          this.characterCardListeners.set(cardElement, cardClickHandler);

          return cardElement;
        })
        .filter(Boolean); // Remove any null cards

      // Clear grid safely and append new elements
      while (characterGrid.firstChild) {
        characterGrid.removeChild(characterGrid.firstChild);
      }

      characterCards.forEach(card => fragment.appendChild(card));
      characterGrid.appendChild(fragment);
    }

    updateComparisonTable() {
      const comparisonTable = document.getElementById('comparison-table');
      if (!comparisonTable) return;

      if (this.selectedCharacters.length === 0) {
        comparisonTable.style.display = 'none';
        return;
      }

      comparisonTable.style.display = 'block';

      // Clear existing data
      this.clearTableCells();

      // Populate table with selected characters
      this.selectedCharacters.forEach((characterId, index) => {
        const character = this.characterDataProcessed.characters.find(c => c.id === characterId);
        if (character) {
          this.populateCharacterColumn(character, index + 1);
        }
      });

      // Hide unused columns
      for (let i = this.selectedCharacters.length + 1; i <= this.maxCharacters; i++) {
        this.hideCharacterColumn(i);
      }
    }

    populateCharacterColumn(character, columnIndex) {
      // Show character column
      const column = document.querySelector(
        `.premium-character-column[data-character="${columnIndex}"]`
      );
      if (column) {
        column.classList.add('active');
        column.style.display = 'block';
      }

      // Populate character header
      const portrait = document.querySelector(`.premium-portrait[data-portrait="${columnIndex}"]`);
      if (portrait) {
        portrait.src = character.image;
        portrait.alt = character.name;
      }

      const nameEl = document.querySelector(`.character-name[data-name="${columnIndex}"]`);
      if (nameEl) {
        nameEl.textContent = character.name;
      }

      // Populate stats
      const stats = character.stats || {};

      const setStatValue = (statName, value) => {
        const el = document.querySelector(`[data-stat="${statName}-${columnIndex}"]`);
        if (el) {
          el.textContent = value;
          el.classList.add('active');
          el.style.display = 'block';
        }
      };

      // Basic info - create badges for these fields
      this.setStatValueWithBadge('class', character.class, 'class-badge', columnIndex);
      this.setStatValueWithBadge('faction', character.faction, 'faction-badge', columnIndex);
      this.setStatValueWithBadge(
        'equipment',
        character.equipmentType,
        'equipment-badge',
        columnIndex
      );
      this.setStatValueWithBadge('moon', character.moonPhase, 'moon-badge', columnIndex);
      this.setStatValueWithBadge('attack', character.attackType, 'attack-badge', columnIndex);

      // Combat stats
      setStatValue('hp', stats.hp !== undefined ? stats.hp.toLocaleString() : 'N/A');
      setStatValue('atk', stats.atk !== undefined ? stats.atk.toLocaleString() : 'N/A');
      setStatValue('pdef', stats.pDef !== undefined ? stats.pDef.toLocaleString() : 'N/A');
      setStatValue('mdef', stats.mDef !== undefined ? stats.mDef.toLocaleString() : 'N/A');
      setStatValue('atkspd', stats.atkSpd !== undefined ? stats.atkSpd + '%' : 'N/A');
      setStatValue('crit', stats.critRate !== undefined ? stats.critRate + '%' : 'N/A');
      setStatValue(
        'critdmg',
        stats.critDmgIncrease !== undefined ? stats.critDmgIncrease + '%' : 'N/A'
      );
    }

    setStatValueWithBadge(statName, value, badgeClass, columnIndex) {
      const el = document.querySelector(`[data-stat="${statName}-${columnIndex}"]`);
      if (el && value) {
        // Create badge element with SAB badge styling
        const badge = document.createElement('span');
        badge.className = `${badgeClass} ${value.toLowerCase().replace(/\s+/g, '-')}`;
        badge.textContent = value;

        // Clear existing content safely and add badge
        while (el.firstChild) {
          el.removeChild(el.firstChild);
        }
        el.appendChild(badge);
        el.classList.add('active');
        el.style.display = 'block';
      }
    }

    clearTableCells() {
      // Clear premium design elements
      for (let i = 1; i <= 4; i++) {
        const column = document.querySelector(`.premium-character-column[data-character="${i}"]`);
        if (column) {
          column.classList.remove('active');
          column.style.display = 'none';
        }

        // Clear all stat values for this column
        document.querySelectorAll(`[data-stat$="-${i}"]`).forEach(el => {
          el.textContent = '';
          el.classList.remove('active');
          el.style.display = 'none';
        });
      }
    }

    hideCharacterColumn(columnIndex) {
      const column = document.querySelector(
        `.premium-character-column[data-character="${columnIndex}"]`
      );
      if (column) {
        column.classList.remove('active');
        column.style.display = 'none';
      }

      // Hide all stat values for this column
      document.querySelectorAll(`[data-stat$="-${columnIndex}"]`).forEach(el => {
        el.classList.remove('active');
        el.style.display = 'none';
      });
    }

    navigateToComparison() {
      const comparisonSection = document.getElementById('comparison-table');
      if (comparisonSection) {
        // Immediate scroll with minimal delay for DOM update
        requestAnimationFrame(() => {
          comparisonSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
          });
        });
      }
    }

    clearComparison() {
      this.selectedCharacters = [];

      // Clear all selected states
      const characterCards = document.querySelectorAll('.character-select-card');
      characterCards.forEach(card => {
        card.dataset.selected = 'false';
      });

      // Hide comparison table
      const comparisonTable = document.getElementById('comparison-table');
      if (comparisonTable) {
        comparisonTable.style.display = 'none';
      }
    }

    // Cleanup functions to prevent memory leaks
    cleanupCharacterCardListeners() {
      const characterCards = document.querySelectorAll('.character-select-card');
      characterCards.forEach(card => {
        const handler = this.characterCardListeners.get(card);
        if (handler) {
          card.removeEventListener('click', handler);
          this.characterCardListeners.delete(card);
        }
      });
    }

    cleanupFilterListeners() {
      // Clean up all tracked event listeners
      this.eventListeners.forEach((cleanupFn, key) => {
        if (typeof cleanupFn === 'function') {
          cleanupFn();
        }
      });
      this.eventListeners.clear();
    }

    cleanup() {
      console.log('Silver & Blood Comparison: Cleaning up resources...');

      // Clear character card listeners
      this.cleanupCharacterCardListeners();

      // Clear filter listeners
      this.cleanupFilterListeners();

      // Clear caches
      this.characterDataCache.clear();
      this.selectedCharacters.length = 0;
      this.filteredCharacters.length = 0;

      // Reset state
      this.sortState = { column: null, asc: false };
      this.characterDataProcessed = null;
      this.characterModules = null;

      console.log('Silver & Blood Comparison: Cleanup completed');
    }
  }

  // Initialize the comparison tool
  window.silverBloodCharacterComparison = new SilverBloodCharacterComparison();

  // Add cleanup on page unload to prevent memory leaks
  const cleanupHandler = () => {
    if (
      window.silverBloodCharacterComparison &&
      typeof window.silverBloodCharacterComparison.cleanup === 'function'
    ) {
      window.silverBloodCharacterComparison.cleanup();
    }
  };

  window.addEventListener('beforeunload', cleanupHandler);
  window.addEventListener('pagehide', cleanupHandler);

  // Export cleanup function for manual cleanup
  window.SILVER_BLOOD_COMPARISON_CLEANUP = cleanupHandler;
</script>
