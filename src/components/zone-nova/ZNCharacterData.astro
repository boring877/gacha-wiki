---
// Zone Nova Centralized Data Component
// This component imports all character data files and provides them in a single module
// This is more efficient for SSG as it avoids importing individual files in every component

// Import other Zone Nova data
import { ZONE_NOVA_CHARACTERS } from '../../data/zone-nova/characters.js';
import {
  PVE_TIER_LIST,
  PVP_TIER_LIST,
  RIFT_TIER_LIST,
  GUILD_RAID_TIER_LIST,
  NEW_PLAYER_TIER_LIST,
} from '../../data/zone-nova/tier-lists.js';
import { rankings, overallAnalysis } from '../../data/zone-nova/character-rankings.js';

// Re-export ZONE_NOVA_CHARACTERS for easy access
export { ZONE_NOVA_CHARACTERS };

// Re-export tier lists
export { PVE_TIER_LIST, PVP_TIER_LIST, RIFT_TIER_LIST, GUILD_RAID_TIER_LIST, NEW_PLAYER_TIER_LIST };

// Re-export rankings and analysis
export { rankings, overallAnalysis };

// Create an efficient character lookup map (built once at compile time)
export const CHARACTER_LOOKUP_MAP = new Map(ZONE_NOVA_CHARACTERS.map(char => [char.slug, char]));

// Quick lookup function (much faster than array.find)
export function getCharacterBySlug(slug) {
  return CHARACTER_LOOKUP_MAP.get(slug);
}

// Lazy loading function for detailed character data (only when needed)
export async function getCharacterData(slug) {
  try {
    const characterModule = await import(`../../data/zone-nova/characters/${slug}.js`);
    return characterModule.default || characterModule[`${slug}Data`];
  } catch (error) {
    console.warn(`Character data not found for: ${slug}`);
    return null;
  }
}

// Create a mapping of all character data (kept for backward compatibility)
export const CHARACTER_DATA_MAP = {};
// This will be populated on-demand when characters are accessed

// Populate the map lazily when first accessed
export async function ensureCharacterDataMap() {
  if (Object.keys(CHARACTER_DATA_MAP).length === 0) {
    const slugs = ZONE_NOVA_CHARACTERS.map(char => char.slug);
    for (const slug of slugs) {
      const data = await getCharacterData(slug);
      if (data) {
        CHARACTER_DATA_MAP[slug] = data;
      }
    }
  }
  return CHARACTER_DATA_MAP;
}

// Define the character interface based on actual data structure
export interface ZoneNovaCharacter {
  id: number;
  name: string;
  slug: string;
  detailUrl: string;
  image: string;
  rarity: 'SSR' | 'SR' | 'R';
  element: 'Fire' | 'Wind' | 'Holy' | 'Chaos' | 'Ice';
  class: 'Guardian' | 'Warrior' | 'Rogue' | 'Mage' | 'Buffer' | 'Debuffer' | 'Healer';
  role: 'Tank' | 'DPS' | 'Buffer' | 'Debuffer' | 'Healer';
  stats: {
    hp: number;
    attack: number;
    defense: number;
    energyRecovery: number;
    critRate: number;
    critDmg: number;
  };
  faction: string;
  teamSkill?: {
    name: string;
    description: string;
    requirements: {
      faction: string;
      element: string;
    };
  };
}

// Security: Sanitize character data to prevent XSS
export function escapeHtml(unsafe: string): string {
  return unsafe
    .replace(/&/g, '&')
    .replace(/</g, '<')
    .replace(/>/g, '>')
    .replace(/"/g, '"')
    .replace(/'/g, '&#039;');
}

// Security: Validate image URLs
export function isValidImageUrl(url: string): boolean {
  return (
    /^https?:\/\/[^\s<>"']+\.(jpg|jpeg|png|gif|webp)$/i.test(url) ||
    /^\/[^\s<>"']+\.(jpg|jpeg|png|gif|webp)$/i.test(url)
  );
}

// Security: Sanitize and validate character data
// Keep original names for data lookups, only escape for display
export const sanitizedCharacters = ZONE_NOVA_CHARACTERS.map(char => ({
  ...char,
  originalName: char.name || '', // Keep original for tier lookups
  displayName: escapeHtml(char.name || ''), // Escaped version for display
  slug: char.slug?.replace(/[^a-zA-Z0-9-_]/g, '') || '',
  role: char.role || '', // These are from controlled sources, no need to escape
  class: char.class || '',
  rarity: char.rarity || '',
  element: char.element || '',
  faction: char.faction || '', // Don't escape faction to preserve spaces for filtering
  image: isValidImageUrl(char.image || '') ? char.image : '/images/placeholder.png',
}));

// Get unique values for filters
export const roles = [...new Set(ZONE_NOVA_CHARACTERS.map(c => c.role).filter(Boolean))].sort();
export const classes = [...new Set(ZONE_NOVA_CHARACTERS.map(c => c.class).filter(Boolean))].sort();
export const elements = [
  ...new Set(ZONE_NOVA_CHARACTERS.map(c => c.element).filter(Boolean)),
].sort();
export const factions = [
  ...new Set(ZONE_NOVA_CHARACTERS.map(c => c.faction).filter(Boolean)),
].sort();
export const rarities = ['SSR', 'SR', 'R'];

// Export all data in a single object for easy consumption
export const ZONE_NOVA_DATA = {
  characters: ZONE_NOVA_CHARACTERS,
  sanitizedCharacters,
  characterDataMap: CHARACTER_DATA_MAP,
  tierLists: {
    pve: PVE_TIER_LIST,
    pvp: PVP_TIER_LIST,
    rift: RIFT_TIER_LIST,
    guild: GUILD_RAID_TIER_LIST,
    newPlayer: NEW_PLAYER_TIER_LIST,
  },
  rankings,
  overallAnalysis,
  filterOptions: {
    roles,
    classes,
    elements,
    factions,
    rarities,
  },
};

// This component doesn't render anything, it just provides data
---
