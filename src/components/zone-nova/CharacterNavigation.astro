---
import { ZONE_NOVA_CHARACTERS } from '../../data/zone-nova/characters.js';
import MobileCharacterNavigation from './MobileCharacterNavigation.astro';

export interface Props {
  currentCharacterSlug: string;
}

const { currentCharacterSlug } = Astro.props;

// Note: Client-side navigation will handle filter/sort state from sessionStorage
// This server-side rendering uses default database order as fallback
const charactersByDatabaseOrder = [...ZONE_NOVA_CHARACTERS].sort((a, b) => a.id - b.id);

// Find current character index in database order
const currentIndex = charactersByDatabaseOrder.findIndex(
  char => char.slug === currentCharacterSlug
);

// Get previous and next characters (with wraparound)
const prevIndex = currentIndex > 0 ? currentIndex - 1 : charactersByDatabaseOrder.length - 1;
const nextIndex = currentIndex < charactersByDatabaseOrder.length - 1 ? currentIndex + 1 : 0;

const prevCharacter = charactersByDatabaseOrder[prevIndex];
const nextCharacter = charactersByDatabaseOrder[nextIndex];

// Only render if we have valid navigation targets
const hasNavigation = currentIndex !== -1 && prevCharacter && nextCharacter;

// Always render if we have characters, even if navigation logic fails
const forceRender = charactersByDatabaseOrder.length > 0;
---

<style>
  @import '../../styles/components/zone-nova-character-navigation.css';
</style>

{
  (hasNavigation || forceRender) && prevCharacter && nextCharacter && (
    <>
      {/* Desktop Navigation Panel */}
      <div
        class="nav-zone nav-zone-single"
        data-character-url={nextCharacter.detailUrl}
        data-character-name={nextCharacter.name}
        title="Character Navigation"
      >
        <div class="nav-controls">
          <button
            class="nav-btn nav-btn-prev"
            data-direction="prev"
            title={`Previous: ${prevCharacter.name}`}
          >
            ‹
          </button>
          <button
            class="nav-btn nav-btn-next"
            data-direction="next"
            title={`Next: ${nextCharacter.name}`}
          >
            ›
          </button>
        </div>
        <div class="nav-info">
          <div class="nav-current-character">
            <div class="nav-character-name">Current Character</div>
            <div class="nav-character-details">
              <span class="nav-position">0/0</span>
              <span class="nav-total-filtered">0 characters</span>
            </div>
          </div>
          <div class="nav-navigation-info">
            <div class="nav-next-character">
              <span class="nav-label">Next:</span>
              <span class="nav-next-name">{nextCharacter.name}</span>
            </div>
            <div class="nav-sort-info">
              <span class="nav-label">Sort:</span>
              <span class="nav-sort">Default</span>
            </div>
            <div class="nav-filter-info">
              <span class="nav-label">Filter:</span>
              <span class="nav-filter">None</span>
            </div>
          </div>
        </div>
      </div>

      {/* Mobile Navigation Component */}
      <MobileCharacterNavigation prevCharacter={prevCharacter} nextCharacter={nextCharacter} />
    </>
  )
}

<script>
  // Import character data and utilities
  import { ZONE_NOVA_CHARACTERS } from '../../data/zone-nova/characters.js';

  // High-performance Zone Nova character navigation
  document.addEventListener('DOMContentLoaded', () => {
    // Cache DOM elements for better performance
    const elements = {
      navPanel: document.querySelector('.nav-zone-single') as HTMLElement | null,
      prevButton: document.querySelector('.nav-btn-prev') as HTMLButtonElement | null,
      nextButton: document.querySelector('.nav-btn-next') as HTMLButtonElement | null,
      // Cache navigation info elements
      currentNameEl: null as HTMLElement | null,
      positionEl: null as HTMLElement | null,
      totalFilteredEl: null as HTMLElement | null,
      nextNameEl: null as HTMLElement | null,
      sortEl: null as HTMLElement | null,
      filterEl: null as HTMLElement | null,
    };

    // Initialize cached elements
    if (elements.navPanel) {
      elements.currentNameEl = elements.navPanel.querySelector(
        '.nav-character-name'
      ) as HTMLElement | null;
      elements.positionEl = elements.navPanel.querySelector('.nav-position') as HTMLElement | null;
      elements.totalFilteredEl = elements.navPanel.querySelector(
        '.nav-total-filtered'
      ) as HTMLElement | null;
      elements.nextNameEl = elements.navPanel.querySelector('.nav-next-name') as HTMLElement | null;
      elements.sortEl = elements.navPanel.querySelector('.nav-sort') as HTMLElement | null;
      elements.filterEl = elements.navPanel.querySelector('.nav-filter') as HTMLElement | null;
    }

    // Get current character slug from the page URL
    const currentCharacterSlug = window.location.pathname.split('/').pop() || '';

    // Type definitions for Zone Nova
    type ZNCharacter = (typeof ZONE_NOVA_CHARACTERS)[0];
    type ZNFilterState = Record<string, string | undefined>;
    type ZNSortState = { column: string; asc: boolean };

    // Performance optimization manager for Zone Nova
    const znPerfManager: {
      sessionCache: { filters: ZNFilterState; sort: ZNSortState } | null;
      sessionCacheTime: number;
      characterListCache: ZNCharacter[] | null;
      characterListCacheKey: string;
      CACHE_DURATION: number;
    } = {
      sessionCache: null,
      sessionCacheTime: 0,
      characterListCache: null,
      characterListCacheKey: '',
      CACHE_DURATION: 5000, // 5 second cache for better performance
    };

    // High-performance session storage access
    function getCachedSessionData() {
      const now = Date.now();
      if (
        znPerfManager.sessionCache &&
        now - znPerfManager.sessionCacheTime < znPerfManager.CACHE_DURATION
      ) {
        return znPerfManager.sessionCache;
      }

      try {
        const filterState = sessionStorage.getItem('zone-nova-character-filters');
        const sortState = sessionStorage.getItem('zone-nova-character-sort');

        znPerfManager.sessionCache = {
          filters: filterState ? JSON.parse(filterState) : {},
          sort: sortState ? JSON.parse(sortState) : { column: 'name', asc: true },
        };
        znPerfManager.sessionCacheTime = now;

        return znPerfManager.sessionCache;
      } catch (error: unknown) {
        znPerfManager.sessionCache = {
          filters: {},
          sort: { column: 'name', asc: true },
        };
        return znPerfManager.sessionCache;
      }
    }

    // Optimized Zone Nova character filtering
    function applyFilters(characters: ZNCharacter[], filters: ZNFilterState) {
      if (!filters || Object.keys(filters).length === 0) return characters;

      return characters.filter(character => {
        return (
          (!filters.element || character.element === filters.element) &&
          (!filters.rarity || character.rarity === filters.rarity) &&
          (!filters.role || character.role === filters.role) &&
          (!filters.charClass || character.class === filters.charClass) &&
          (!filters.faction || character.faction === filters.faction)
        );
      });
    }

    // Optimized Zone Nova character sorting
    function applySorting(characters: ZNCharacter[], sort: ZNSortState) {
      if (sort.column === 'name') {
        return characters.sort((a, b) => {
          const result = a.name.localeCompare(b.name);
          return sort.asc ? result : -result;
        });
      }

      if (sort.column === 'id') {
        return characters.sort((a, b) => {
          const result = a.id - b.id;
          return sort.asc ? result : -result;
        });
      }

      // For stat columns
      return characters.sort((a, b) => {
        const valA = a.stats?.[sort.column] ?? a[sort.column] ?? 0;
        const valB = b.stats?.[sort.column] ?? b[sort.column] ?? 0;

        const numA = Number(valA);
        const numB = Number(valB);

        if (!isNaN(numA) && !isNaN(numB)) {
          return sort.asc ? numA - numB : numB - numA;
        }

        const strA = String(valA).toLowerCase();
        const strB = String(valB).toLowerCase();
        return sort.asc ? strA.localeCompare(strB) : strB.localeCompare(strA);
      });
    }

    // High-performance Zone Nova character list with caching
    function getCurrentCharacterList() {
      const { filters, sort } = getCachedSessionData();
      const cacheKey = `${JSON.stringify(filters)}_${JSON.stringify(sort)}`;

      // Return cached result if available
      if (znPerfManager.characterListCacheKey === cacheKey && znPerfManager.characterListCache) {
        return znPerfManager.characterListCache;
      }

      // Process and cache characters
      const filtered = applyFilters(ZONE_NOVA_CHARACTERS, filters);
      const sorted = applySorting(filtered, sort);

      znPerfManager.characterListCache = sorted;
      znPerfManager.characterListCacheKey = cacheKey;

      return sorted;
    }

    // Zone Nova sort display names lookup
    const ZN_SORT_NAMES = {
      name: 'Name',
      id: 'Default',
      hp: 'HP',
      attack: 'Attack',
      defense: 'Defense',
      critRate: 'Crit Rate',
      critDmg: 'Crit Dmg',
      energyRecovery: 'Energy',
    } as const;

    function getSortDisplayName(sortColumn: string) {
      return ZN_SORT_NAMES[sortColumn] || sortColumn;
    }

    // Zone Nova numeric columns for sort direction
    const ZN_NUMERIC_COLUMNS = ['hp', 'attack', 'defense', 'critRate', 'critDmg', 'energyRecovery'];

    // Optimized Zone Nova display info generation
    function getDisplayInfo() {
      const { filters, sort } = getCachedSessionData();

      // Calculate sort info
      let sortInfo = 'Default';
      if (sort.column !== 'name' || !sort.asc) {
        const direction = ZN_NUMERIC_COLUMNS.includes(sort.column)
          ? sort.asc
            ? '↓'
            : '↑'
          : sort.asc
            ? '↑'
            : '↓';
        sortInfo = `${getSortDisplayName(sort.column)} ${direction}`;
      }

      // Calculate filter info
      const activeFilters = Object.values(filters).filter(Boolean);
      const filterInfo = activeFilters.length > 0 ? activeFilters.join(', ') : 'None';

      return { sortInfo, filterInfo };
    }

    // Optimized function to update navigation panel
    function updateNavigationPanel() {
      if (!elements.navPanel) return;

      const characters = getCurrentCharacterList();
      const currentIndex = characters.findIndex(char => char.slug === currentCharacterSlug);

      if (currentIndex === -1) {
        elements.navPanel.style.display = 'none';
        return;
      }

      elements.navPanel.style.display = '';

      // Calculate navigation indices with wraparound
      const totalChars = characters.length;
      const prevIndex = currentIndex > 0 ? currentIndex - 1 : totalChars - 1;
      const nextIndex = currentIndex < totalChars - 1 ? currentIndex + 1 : 0;

      const currentCharacter = characters[currentIndex];
      const prevCharacter = characters[prevIndex];
      const nextCharacter = characters[nextIndex];

      const { sortInfo, filterInfo } = getDisplayInfo();

      // Batch DOM updates for better performance
      const updates = [
        [elements.currentNameEl, currentCharacter.name],
        [elements.positionEl, `${currentIndex + 1}/${totalChars}`],
        [elements.totalFilteredEl, `${totalChars} character${totalChars !== 1 ? 's' : ''}`],
        [elements.nextNameEl, nextCharacter.name],
        [elements.sortEl, sortInfo],
        [elements.filterEl, filterInfo],
      ] as const;

      // Apply text updates efficiently
      for (const [element, text] of updates) {
        if (element && element.textContent !== text) {
          element.textContent = text;
        }
      }

      // Update navigation attributes efficiently
      if (elements.prevButton) {
        const currentUrl = elements.prevButton.getAttribute('data-character-url');
        if (currentUrl !== prevCharacter.detailUrl) {
          elements.prevButton.setAttribute('data-character-url', prevCharacter.detailUrl);
          elements.prevButton.setAttribute('title', `Previous: ${prevCharacter.name}`);
        }
      }

      if (elements.nextButton) {
        const currentUrl = elements.nextButton.getAttribute('data-character-url');
        if (currentUrl !== nextCharacter.detailUrl) {
          elements.nextButton.setAttribute('data-character-url', nextCharacter.detailUrl);
          elements.nextButton.setAttribute('title', `Next: ${nextCharacter.name}`);
        }
      }

      // Update Zone Nova mobile navigation via the mobile component
      if (typeof (window as any).updateZnMobileNavigation === 'function') {
        (window as any).updateZnMobileNavigation(prevCharacter, nextCharacter);
      }
    }

    // Initialize navigation on page load
    updateNavigationPanel();

    // Debounced update function for better performance
    let updateTimeout: ReturnType<typeof setTimeout> | null = null;
    function debouncedUpdate() {
      if (updateTimeout) {
        clearTimeout(updateTimeout);
      }
      updateTimeout = setTimeout(() => {
        // Clear caches when data changes
        znPerfManager.sessionCache = null;
        znPerfManager.characterListCache = null;
        znPerfManager.characterListCacheKey = '';
        updateNavigationPanel();
      }, 100); // 100ms debounce
    }

    // Update navigation when sessionStorage changes (for cross-tab synchronization)
    window.addEventListener('storage', e => {
      if (e.key === 'zone-nova-character-filters' || e.key === 'zone-nova-character-sort') {
        debouncedUpdate();
      }
    });

    // Also listen for custom events from the character database when sorting/filtering changes
    document.addEventListener('character-database-updated', () => {
      debouncedUpdate();
    });

    // Instant Zone Nova navigation with preloading and fade effect
    function handleNavigation(url: string | null) {
      if (!url || typeof url !== 'string') {
        return false;
      }

      try {
        // Add loading state immediately for instant feedback
        document.body.style.opacity = '0.8';
        document.body.style.transition = 'opacity 0.1s ease';

        // For faster perception, use location.replace to avoid back button issues
        window.location.replace(url);
        return true;
      } catch (error: unknown) {
        // Reset opacity on error
        document.body.style.opacity = '1';
        return false;
      }
    }

    // Prefetch function for instant loading
    function prefetchPage(url: string | null) {
      if (!url) return;

      const existing = document.querySelector(`link[href="${url}"]`);
      if (existing) return;

      const link = document.createElement('link');
      link.rel = 'prefetch';
      link.href = url;
      document.head.appendChild(link);
    }

    // Navigation button handlers with instant prefetching
    if (elements.prevButton) {
      // Prefetch on hover for instant loading
      elements.prevButton.addEventListener('mouseenter', () => {
        const url = elements.prevButton?.getAttribute('data-character-url');
        prefetchPage(url);
      });

      elements.prevButton.addEventListener('click', e => {
        e.preventDefault();
        const url = elements.prevButton?.getAttribute('data-character-url') || null;
        handleNavigation(url);
      });
    }

    if (elements.nextButton) {
      // Prefetch on hover for instant loading
      elements.nextButton.addEventListener('mouseenter', () => {
        const url = elements.nextButton?.getAttribute('data-character-url');
        prefetchPage(url);
      });

      elements.nextButton.addEventListener('click', e => {
        e.preventDefault();
        const url = elements.nextButton?.getAttribute('data-character-url') || null;
        handleNavigation(url);
      });
    }

    // Keyboard navigation support with validation
    document.addEventListener('keydown', e => {
      // Don't interfere with form inputs or when modifier keys are pressed
      const target = e.target as HTMLElement;
      if (
        target?.tagName === 'INPUT' ||
        target?.tagName === 'TEXTAREA' ||
        e.ctrlKey ||
        e.altKey ||
        e.metaKey
      ) {
        return;
      }

      try {
        if (e.key === 'ArrowLeft' && elements.prevButton) {
          e.preventDefault();
          // Prefetch immediately on keydown for instant loading
          const url = elements.prevButton?.getAttribute('data-character-url') || null;
          prefetchPage(url);
          handleNavigation(url);
        } else if (e.key === 'ArrowRight' && elements.nextButton) {
          e.preventDefault();
          // Prefetch immediately on keydown for instant loading
          const url = elements.nextButton?.getAttribute('data-character-url') || null;
          prefetchPage(url);
          handleNavigation(url);
        }
      } catch (error: unknown) {
        // console.error('Keyboard navigation error:', error);
      }
    });

    // Cleanup function to prevent memory leaks
    function cleanup() {
      // Clear all caches
      znPerfManager.sessionCache = null;
      znPerfManager.characterListCache = null;
      znPerfManager.characterListCacheKey = '';

      // Clear timeout
      if (updateTimeout) {
        clearTimeout(updateTimeout);
        updateTimeout = null;
      }
    }

    // Register cleanup on page unload
    window.addEventListener('beforeunload', cleanup);
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') {
        // Page is being hidden, clean up caches to free memory
        znPerfManager.characterListCache = null;
        znPerfManager.characterListCacheKey = '';
      }
    });
  });
</script>
