---
export interface Props {
  prevCharacter: {
    name: string;
    detailUrl: string;
  };
  nextCharacter: {
    name: string;
    detailUrl: string;
  };
}

const { prevCharacter, nextCharacter } = Astro.props;
---

<!-- Mobile Invisible Swipe Zones -->
<div
  class="mobile-swipe-left"
  data-direction="prev"
  data-character-url={prevCharacter.detailUrl}
  title={`Previous: ${prevCharacter.name}`}
>
</div>
<div
  class="mobile-swipe-right"
  data-direction="next"
  data-character-url={nextCharacter.detailUrl}
  title={`Next: ${nextCharacter.name}`}
>
</div>

<script>
  // High-performance mobile navigation functionality (Zone Nova)
  document.addEventListener('DOMContentLoaded', () => {
    const mobileSwipeLeft = document.querySelector('.mobile-swipe-left') as HTMLElement | null;
    const mobileSwipeRight = document.querySelector('.mobile-swipe-right') as HTMLElement | null;

    // Performance manager for Zone Nova mobile navigation
    const znMobilePerfManager = {
      touchStartTime: 0,
      touchMoved: false,
      lastNavigation: 0,
      navigationThrottle: 300,
    };

    // Instant Zone Nova navigation
    function handleNavigation(url: string | null) {
      if (!url || typeof url !== 'string') {
        return false;
      }

      const now = Date.now();
      if (now - znMobilePerfManager.lastNavigation < znMobilePerfManager.navigationThrottle) {
        return false;
      }
      znMobilePerfManager.lastNavigation = now;

      try {
        // Add visual feedback to navigation element only (safer approach)
        const targetButton = document.querySelector(`[data-character-url="${url}"]`) as HTMLElement;
        if (targetButton) {
          targetButton.style.opacity = '0.6';
          targetButton.style.transform = 'scale(0.95)';
          targetButton.style.transition = 'all 0.08s ease';
          targetButton.style.pointerEvents = 'none';
        }

        // Use replace for instant feel
        window.location.replace(url);
        return true;
      } catch (error: unknown) {
        // Reset element state on error
        const targetButton = document.querySelector(`[data-character-url="${url}"]`) as HTMLElement;
        if (targetButton) {
          targetButton.style.opacity = '1';
          targetButton.style.transform = 'scale(1)';
          targetButton.style.pointerEvents = '';
        }
        return false;
      }
    }

    // Optimized touch handling
    function handleMobileNavigation(element: HTMLElement | null, direction: string) {
      if (!element) return;

      element.addEventListener(
        'touchstart',
        e => {
          znMobilePerfManager.touchStartTime = Date.now();
          znMobilePerfManager.touchMoved = false;
          e.stopPropagation();
        },
        { passive: true }
      );

      element.addEventListener(
        'touchmove',
        e => {
          znMobilePerfManager.touchMoved = true;
        },
        { passive: true }
      );

      element.addEventListener('touchend', e => {
        const touchDuration = Date.now() - znMobilePerfManager.touchStartTime;

        if (!znMobilePerfManager.touchMoved && touchDuration < 400 && touchDuration > 50) {
          e.preventDefault();
          const url = element.getAttribute('data-character-url');
          handleNavigation(url);
        }
      });

      element.addEventListener('click', e => {
        e.preventDefault();
        const url = element.getAttribute('data-character-url');
        handleNavigation(url);
      });
    }

    // Initialize with error handling
    try {
      handleMobileNavigation(mobileSwipeLeft, 'prev');
      handleMobileNavigation(mobileSwipeRight, 'next');
    } catch (error: unknown) {
      console.warn('Failed to initialize Zone Nova mobile navigation:', error);
    }

    // Optimized update function
    function updateMobileNavigation(prevChar: any, nextChar: any) {
      if (mobileSwipeLeft) {
        mobileSwipeLeft.setAttribute('data-character-url', prevChar.detailUrl);
        mobileSwipeLeft.setAttribute('title', `Previous: ${prevChar.name}`);
      }
      if (mobileSwipeRight) {
        mobileSwipeRight.setAttribute('data-character-url', nextChar.detailUrl);
        mobileSwipeRight.setAttribute('title', `Next: ${nextChar.name}`);
      }
    }

    // Expose update function
    (window as any).updateZnMobileNavigation = updateMobileNavigation;

    // Cleanup
    function cleanup() {
      delete (window as any).updateZnMobileNavigation;
    }

    window.addEventListener('beforeunload', cleanup);
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') {
        znMobilePerfManager.lastNavigation = 0;
      }
    });
  });
</script>
