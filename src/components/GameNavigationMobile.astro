---
import { getGameData, isValidGameKey, type GameKey } from '../data/game-navigation';

interface Props {
  currentPath?: string;
  gameKey?: GameKey;
}

const { currentPath = '', gameKey } = Astro.props;

// Validate and sanitize gameKey
const validatedGameKey = isValidGameKey(gameKey) ? gameKey : undefined;
const game = getGameData(validatedGameKey);

const isActive = (href: string) => {
  if (href.endsWith('/zone-nova/') || href.endsWith('/silver-and-blood/')) {
    return currentPath === href;
  }
  return (
    currentPath === href ||
    (currentPath.startsWith(href) && currentPath !== href.replace(/\/$/, ''))
  );
};

if (!game) return;
---

<style>
  @import '../styles/components/game-navigation-mobile.css';
</style>

<nav class="game-nav-mobile" data-game={gameKey}>
  <div class="container">
    <div class="game-nav-header">
      <div class="game-info">
        <a
          href={gameKey === 'zone-nova' ? '/guides/zone-nova/' : '/guides/silver-and-blood/'}
          class="game-link"
        >
          <div class="game-image-container">
            <img src={game.image} alt={game.name} class="game-image" loading="lazy" />
            <div class="game-image-overlay"></div>
          </div>
          <h2 class="game-title">{game.name}</h2>
        </a>
      </div>

      <!-- Mobile Sections Button -->
      <div class="right-elements">
        <button
          class="sections-btn"
          id="navToggle"
          aria-label="Open Sections"
          aria-expanded="false"
        >
          <span class="sections-text">Sections</span>
        </button>
      </div>
    </div>
  </div>
</nav>

<!-- Mobile Navigation - Overlay System -->
<div class="mobile-overlay" id="navOverlay"></div>
<div class="mobile-links" id="mobileNavLinks" data-game={gameKey}>
  <div class="mobile-game-header">
    <div class="game-header-content">
      <img src={game.image} alt={game.name} class="mobile-game-image" loading="lazy" />
      <div class="mobile-game-title">{game.name}</div>
    </div>
    <button class="close-btn" id="navClose">âœ•</button>
  </div>

  <div class="mobile-sections-wrapper">
    <div class="mobile-sections-grid">
      {
        game.sections.map(section => (
          <div class="mobile-section">
            <div class="mobile-section-header">
              <span class="mobile-section-title">{section.title}</span>
            </div>
            {section.links.map(link => (
              <a
                href={link.href}
                class={isActive(link.href) ? 'mobile-link active' : 'mobile-link'}
              >
                {link.name}
              </a>
            ))}
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  // Mobile Navigation - Copy of working Header.astro pattern
  document.addEventListener('DOMContentLoaded', function () {
    const toggle = document.getElementById('navToggle');
    const mobileMenu = document.getElementById('mobileNavLinks');
    const closeBtn = document.getElementById('navClose');
    const overlay = document.getElementById('navOverlay');
    let isMenuOpen = false;

    function toggleMenu() {
      isMenuOpen = !isMenuOpen;

      if (toggle) {
        toggle.setAttribute('aria-expanded', isMenuOpen.toString());
      }

      if (mobileMenu) {
        if (isMenuOpen) {
          // Prevent scrolling and ensure menu is visible
          document.body.style.overflow = 'hidden';
          document.body.style.position = 'fixed';
          document.body.style.top = `-${window.scrollY}px`;
          document.body.style.width = '100%';

          mobileMenu.classList.add('active');
          overlay?.classList.add('active');

          // Ensure the menu drawer is visible by scrolling to top
          const drawer = mobileMenu.querySelector('.mobile-sections-wrapper');
          if (drawer) {
            mobileMenu.scrollTop = 0;
          }
        } else {
          // Restore scrolling and position
          const scrollY = document.body.style.top;
          document.body.style.overflow = '';
          document.body.style.position = '';
          document.body.style.top = '';
          document.body.style.width = '';

          if (scrollY) {
            window.scrollTo(0, parseInt(scrollY || '0') * -1);
          }

          mobileMenu.classList.remove('active');
          overlay?.classList.remove('active');
        }
      }
    }

    function closeMenu() {
      if (isMenuOpen) {
        toggleMenu();
      }
    }

    // Event listeners
    toggle?.addEventListener('click', toggleMenu);
    closeBtn?.addEventListener('click', closeMenu);
    // Close menu when clicking on overlay or links
    mobileMenu?.addEventListener('click', e => {
      const target = e.target as HTMLElement;
      if (
        target === mobileMenu ||
        target === overlay ||
        (target && target.classList?.contains('mobile-link'))
      ) {
        closeMenu();
      }
    });
    overlay?.addEventListener('click', closeMenu);

    // Close menu on escape key
    document.addEventListener('keydown', e => {
      if (e.key === 'Escape' && isMenuOpen) {
        closeMenu();
      }
    });

    // Close menu on window resize (desktop breakpoint)
    let resizeTimeout: ReturnType<typeof setTimeout> | undefined;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        if (window.innerWidth > 768 && isMenuOpen) {
          closeMenu();
        }
      }, 100);
    });
  });
</script>
