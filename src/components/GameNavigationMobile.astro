---
import { getGameData, isValidGameKey, type GameKey } from '../data/game-navigation';
import { Image } from 'astro:assets';

interface Props {
  currentPath?: string;
  gameKey?: GameKey;
}

const { currentPath = '', gameKey } = Astro.props;

// Validate and sanitize gameKey
const validatedGameKey = isValidGameKey(gameKey) ? gameKey : undefined;
const game = getGameData(validatedGameKey);

const isActive = (href: string) => {
  if (
    href.endsWith('/zone-nova/') ||
    href.endsWith('/silver-and-blood/') ||
    href.endsWith('/horizon-walker/')
  ) {
    return currentPath === href;
  }
  return (
    currentPath === href ||
    (currentPath.startsWith(href) && currentPath !== href.replace(/\/$/, ''))
  );
};

if (!game) return;
---

<style>
  @import '../styles/components/game-navigation-mobile.css';
</style>

<nav class="game-nav-mobile" data-game={validatedGameKey}>
  <div class="container">
    <div class="game-nav-header">
      <div class="game-nav-header-content">
        <a
          href={`/guides/${validatedGameKey}/`}
          class="game-image-link"
          title={`${game.name} Overview`}
        >
          <div class="game-image-container">
            <Image
              src={game.image}
              alt={game.name}
              class="game-image"
              loading="lazy"
              width={64}
              height={64}
              format="webp"
              quality={90}
            />
            <div class="game-image-overlay"></div>
          </div>
        </a>
        <button
          class="game-resources-btn"
          id="navToggle"
          aria-label={`Browse ${game.name} Resources`}
          aria-expanded="false"
        >
          <h2 class="game-title">{game.name} Resources</h2>
        </button>
      </div>
    </div>
  </div>
</nav>

<!-- Mobile Navigation - Overlay System -->
<div class="mobile-overlay" id="navOverlay"></div>
<div class="mobile-links" id="mobileNavLinks" data-game={validatedGameKey}>
  <div class="mobile-game-header">
    <div class="game-header-content">
      <Image
        src={game.image}
        alt={game.name}
        class="mobile-game-image"
        loading="lazy"
        width={48}
        height={48}
        format="webp"
        quality={90}
      />
      <div class="mobile-title-section">
        <div class="mobile-game-name">{game.name}</div>
        <div class="mobile-game-subtitle">Resources</div>
      </div>
    </div>
    <button class="close-btn" id="navClose">âœ•</button>
  </div>

  <div class="mobile-sections-wrapper">
    <div class="mobile-sections-grid">
      {
        game.sections.map(section => (
          <div class="mobile-section">
            <div class="mobile-section-header">
              <span class="mobile-section-title">{section.title}</span>
            </div>
            {section.links.map(link => (
              <a
                href={link.href}
                class={isActive(link.href) ? 'mobile-link active' : 'mobile-link'}
              >
                {link.name}
              </a>
            ))}
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  // Mobile Navigation - Touch-optimized with proper error handling
  function initializeMobileNavigation() {
    // Use native DOM APIs with proper error checking
    const toggle = document.getElementById('navToggle');
    const mobileMenu = document.getElementById('mobileNavLinks');
    const closeBtn = document.getElementById('navClose');
    const overlay = document.getElementById('navOverlay');

    // Early return if critical elements are missing
    if (!toggle || !mobileMenu) {
      console.error('Critical mobile navigation elements not found');
      return;
    }

    let isMenuOpen = false;

    function toggleMenu() {
      isMenuOpen = !isMenuOpen;

      // Update aria-expanded
      toggle?.setAttribute('aria-expanded', isMenuOpen.toString());

      if (isMenuOpen) {
        // Open menu with proper height calculation
        mobileMenu?.classList.add('active');
        if (overlay) {
          overlay.classList.add('active');
        }

        // Prevent body scroll when menu is open
        document.body.style.overflow = 'hidden';

        // Set proper height to prevent infinite scroll
        const viewportHeight = window.innerHeight;
        if (mobileMenu) {
          mobileMenu.style.maxHeight = `${viewportHeight}px`;
        }

        // Focus management for accessibility
        closeBtn?.focus();
      } else {
        // Close menu
        mobileMenu?.classList.remove('active');
        if (overlay) {
          overlay.classList.remove('active');
        }

        // Restore body scroll
        document.body.style.overflow = '';

        // Return focus to toggle button
        toggle?.focus();
      }
    }

    function closeMenu() {
      if (isMenuOpen) {
        toggleMenu();
      }
    }

    // Event listeners
    toggle.addEventListener('click', toggleMenu);

    if (closeBtn) {
      closeBtn.addEventListener('click', closeMenu);
    }

    // Handle clicks on overlay and links
    mobileMenu.addEventListener('click', function (event) {
      const target = event.target;
      if (
        target === mobileMenu ||
        target === overlay ||
        (target instanceof HTMLElement && target.classList.contains('mobile-link'))
      ) {
        closeMenu();
      }
    });

    if (overlay) {
      overlay.addEventListener('click', closeMenu);
    }

    // Keyboard navigation
    document.addEventListener('keydown', function (event) {
      if (event.key === 'Escape' && isMenuOpen) {
        closeMenu();
        event.preventDefault();
      }
    });

    // Handle window resize
    let resizeTimeout: ReturnType<typeof setTimeout> | undefined;
    window.addEventListener('resize', function () {
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
      }
      resizeTimeout = setTimeout(function () {
        if (window.innerWidth > 1024 && isMenuOpen) {
          closeMenu();
        }
        // Update height on resize if menu is open
        if (isMenuOpen && mobileMenu) {
          const viewportHeight = window.innerHeight;
          mobileMenu.style.maxHeight = `${viewportHeight}px`;
        }
      }, 100);
    });

    // Enhanced prefetching for mobile navigation
    const prefetchedLinks = new Set();

    function prefetchPage(url: string) {
      if (!url || prefetchedLinks.has(url)) return;

      const existing = document.querySelector(`link[href="${url}"]`);
      if (existing) return;

      const link = document.createElement('link');
      link.rel = 'prefetch';
      link.href = url;
      document.head.appendChild(link);
      prefetchedLinks.add(url);

      // Clean up prefetch links after 20 seconds
      setTimeout(function () {
        if (document.head.contains(link)) {
          document.head.removeChild(link);
          prefetchedLinks.delete(url);
        }
      }, 20000);
    }

    // Prefetch on touch start for better performance
    mobileMenu.addEventListener(
      'touchstart',
      function (event) {
        const target = event.target;
        if (target instanceof HTMLAnchorElement) {
          const href = target.href;
          prefetchPage(href);
        }
      },
      { passive: true }
    );
  }

  // Initialize once DOM is ready
  let isInitialized = false;

  function safeInitialize() {
    if (isInitialized) return;

    const toggle = document.getElementById('navToggle');
    if (toggle && !toggle.hasAttribute('data-initialized')) {
      toggle.setAttribute('data-initialized', 'true');
      isInitialized = true;
      initializeMobileNavigation();
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', safeInitialize);
  } else {
    safeInitialize();
  }
</script>
