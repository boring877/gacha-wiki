---
interface Props {
  currentPath?: string;
  gameKey?: 'silver-and-blood' | 'zone-nova';
}

const { currentPath = '', gameKey } = Astro.props;

const games = {
  'silver-and-blood': {
    name: 'Silver and Blood',
    image: '/images/games/silver-and-blood/main-images/silver-and-blood-main4.jpg',
    sections: [
      {
        title: 'Characters',
        icon: '👥',
        links: [
          { name: 'Database', href: '/guides/silver-and-blood/characters/' },
          { name: 'Rankings', href: '/guides/silver-and-blood/character-rankings/' },
          { name: 'Comparison', href: '/guides/silver-and-blood/character-comparison/' },
          { name: 'Tags', href: '/guides/silver-and-blood/character-tag-selection/' },
        ],
      },
      {
        title: 'Combat',
        icon: '⚔️',
        links: [
          { name: 'Damage Hub', href: '/guides/silver-and-blood/damage-mechanics/' },
          { name: 'Boss Database', href: '/guides/silver-and-blood/boss-database/' },
          { name: 'Clan Hunt', href: '/guides/silver-and-blood/clan-hunt/' },
        ],
      },
      {
        title: 'Events',
        icon: '🎊',
        links: [
          { name: 'Events', href: '/guides/silver-and-blood/events/' },
          { name: "Dutchman's Revenge", href: '/guides/silver-and-blood/dutchmans-revenge/' },
          { name: 'Ancestral Vault', href: '/guides/silver-and-blood/ancestral-vault/' },
        ],
      },
      {
        title: 'Resources',
        icon: '📚',
        links: [
          { name: 'Clock', href: '/clock/silver-and-blood/' },
          { name: 'Summon FAQ', href: '/guides/silver-and-blood/summon-faq/' },
        ],
      },
    ],
  },
  'zone-nova': {
    name: 'Zone Nova',
    image: '/images/games/zone-nova/zonenova.jpg',
    sections: [
      {
        title: 'Characters',
        icon: '👥',
        links: [
          { name: 'Database', href: '/guides/zone-nova/characters/' },
          { name: 'Tier List', href: '/guides/zone-nova/tier-list/' },
          { name: 'Rankings', href: '/guides/zone-nova/character-rankings/' },
          { name: 'Comparison', href: '/guides/zone-nova/character-comparison/' },
          { name: 'Tags', href: '/guides/zone-nova/character-tags/' },
        ],
      },
      {
        title: 'Combat',
        icon: '⚔️',
        links: [
          { name: 'Damage Hub', href: '/guides/zone-nova/damage-mechanics/' },
          { name: 'Rifts', href: '/guides/zone-nova/rifts/' },
          { name: 'Memories', href: '/guides/zone-nova/memories/' },
          { name: 'Team Synergy', href: '/guides/zone-nova/team-synergy/' },
        ],
      },
      {
        title: 'Progression',
        icon: '⭐',
        links: [
          { name: 'Runes', href: '/guides/zone-nova/runes/' },
          { name: 'Crafting', href: '/guides/zone-nova/crafting/' },
        ],
      },
      {
        title: 'Resources',
        icon: '📚',
        links: [
          { name: 'Clock', href: '/clock/zone-nova/' },
          { name: 'Redeem Codes', href: '/guides/zone-nova/redeem-codes/' },
          { name: 'Summon FAQ', href: '/guides/zone-nova/summon-faq/' },
        ],
      },
      {
        title: 'Community',
        icon: '🌐',
        links: [
          { name: 'Updates', href: '/guides/zone-nova/updates/' },
          { name: 'Surveys', href: '/guides/zone-nova/surveys/' },
          { name: 'Contributing', href: '/guides/zone-nova/contributing/' },
        ],
      },
    ],
  },
};

const game = gameKey && games[gameKey];
const isActive = (href: string) => {
  // Exact match for overview pages to prevent always highlighting
  if (href.endsWith('/zone-nova/') || href.endsWith('/silver-and-blood/')) {
    return currentPath === href;
  }
  // For other pages, use startsWith but ensure it's not just the base path
  return (
    currentPath === href ||
    (currentPath.startsWith(href) && currentPath !== href.replace(/\/$/, ''))
  );
};

if (!game) return;
---

<style>
  @import '../styles/components/game-navigation-header.css';
  @import '../styles/mobile/game-navigation-mobile.css';
</style>

<nav class="game-nav" data-game={gameKey}>
  <div class="container">
    <!-- Game Header with Navigation Sections -->
    <div class="game-header">
      <div class="game-info">
        <a
          href={gameKey === 'zone-nova' ? '/guides/zone-nova/' : '/guides/silver-and-blood/'}
          class="game-link"
        >
          <div class="game-image-container">
            <img src={game.image} alt={game.name} class="game-image" loading="lazy" />
            <div class="game-image-overlay"></div>
          </div>
          <h2 class="game-title">{game.name}</h2>
        </a>
      </div>

      <!-- Section Navigation -->
      <div class="section-nav">
        {
          game.sections.map(section => (
            <div class="section-item">
              <div class="section-trigger">
                <span class="section-icon">{section.icon}</span>
                <span class="section-name">{section.title}</span>
              </div>
              <div class="section-dropdown">
                {section.links.map(link => (
                  <a
                    href={link.href}
                    class={isActive(link.href) ? 'dropdown-link active' : 'dropdown-link'}
                    aria-current={isActive(link.href) ? 'page' : undefined}
                  >
                    {link.name}
                  </a>
                ))}
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <!-- Mobile Navigation Elements -->
    <div class="mobile-overlay" id="navOverlay"></div>
    <div class="mobile-links" id="mobileNavLinks">
      <button class="close-btn" id="navClose" aria-label="Close navigation">✕</button>
      <div class="mobile-game-header">
        <img src={game.image} alt={game.name} class="mobile-game-image" loading="lazy" />
        <div class="mobile-game-title">{game.name}</div>
      </div>
      {
        game.sections.map(section => (
          <div class="mobile-section">
            <div class="mobile-section-header">
              <span class="mobile-section-icon">{section.icon}</span>
              <span class="mobile-section-title">{section.title}</span>
            </div>
            {section.links.map(link => (
              <a
                href={link.href}
                class={isActive(link.href) ? 'mobile-link active' : 'mobile-link'}
                aria-current={isActive(link.href) ? 'page' : undefined}
              >
                {link.name}
              </a>
            ))}
          </div>
        ))
      }
    </div>

    <button class="toggle" id="navToggle" aria-label="Toggle navigation">
      <span></span>
    </button>
  </div>
</nav>

<script>
  // Mobile Navigation JavaScript
  const toggle = document.getElementById('navToggle');
  const links = document.getElementById('mobileNavLinks');
  const closeBtn = document.getElementById('navClose');
  const overlay = document.getElementById('navOverlay');

  if (toggle && links) {
    const close = () => {
      links.classList.remove('open');
      overlay?.classList.remove('open');
      toggle.classList.remove('open');
      toggle.setAttribute('aria-expanded', 'false');

      // Restore scrolling and position like main header
      const scrollY = document.body.style.top;
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';

      if (scrollY) {
        window.scrollTo(0, parseInt(scrollY || '0') * -1);
      }
    };

    toggle.addEventListener('click', () => {
      const isOpen = links.classList.contains('open');
      if (isOpen) {
        close();
      } else {
        // Prevent scrolling and fix position like main header
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.top = `-${window.scrollY}px`;
        document.body.style.width = '100%';

        links.classList.add('open');
        overlay?.classList.add('open');
        toggle.classList.add('open');
        toggle.setAttribute('aria-expanded', 'true');
      }
    });

    closeBtn?.addEventListener('click', close);
    overlay?.addEventListener('click', close);

    document.addEventListener('click', e => {
      if (!toggle.contains(e.target as Node) && !links.contains(e.target as Node)) {
        close();
      }
    });

    document.addEventListener('keydown', e => {
      if (e.key === 'Escape' && links.classList.contains('open')) {
        close();
      }
    });

    window.addEventListener('resize', () => {
      if (window.innerWidth > 768) close();
    });
  }
</script>
