---
import { SITE_TITLE } from '../consts';
import DesktopHeader from './DesktopHeader.astro';
import MobileHeader from './MobileHeader.astro';
---

<header class="header-container">
  <nav class="nav-container">
    <div class="header-content">
      <div class="logo-container">
        <a href="/" class="logo-title simple-title">{SITE_TITLE}</a>
      </div>
      <div class="center-nav">
        <DesktopHeader />
      </div>
      <div class="right-elements">
        <MobileHeader />
      </div>
    </div>
  </nav>
</header>

<style>
  /* Colors are available via layout's index.css import */

  .simple-title {
    color: var(--amber-glow);
    transition:
      color 0.2s ease,
      background-color 0.2s ease,
      transform 0.2s ease;
    will-change: transform, background-color;
  }

  /* Header optimizations for CLS prevention */
  .header-container {
    background: linear-gradient(135deg, var(--bg-dark) 0%, #2a2a2a 50%, var(--bg-dark) 100%);
    backdrop-filter: blur(12px);
    border-bottom: 1px solid rgba(255, 183, 77, 0.3);
    padding: 0;
    position: sticky;
    top: 0;
    z-index: var(--z-navigation);
    /* Fixed height to prevent layout shift and ensure consistent positioning */
    height: 72px;
    contain: layout style paint;
  }

  .nav-container {
    max-width: 72rem;
    margin: 0 auto;
    /* Prevent horizontal overflow */
    overflow-x: hidden;
    height: 100%;
    display: flex;
    align-items: center;
  }

  .header-content {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    align-items: center;
    padding: 0 1rem;
    /* Use full width and height */
    width: 100%;
    height: 100%;
  }

  /* Logo optimizations */
  .logo-container {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    /* Prevent shrinking */
    flex-shrink: 0;
    justify-self: start;
  }

  /* Center navigation */
  .center-nav {
    justify-self: center;
    display: flex;
    align-items: center;
  }

  /* Right side elements */
  .right-elements {
    justify-self: end;
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .logo-title {
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 0.75rem;
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--amber-glow);
    transition: all 0.3s ease;
    will-change: transform;
    /* Touch optimization */
    touch-action: manipulation;
    /* Ensure proper vertical centering within fixed header height */
    display: flex;
    align-items: center;
    height: fit-content;
  }

  /* Touch Device & Mobile Responsive Design */
  @media (max-width: 1024px), (hover: none) and (pointer: coarse) {
    /* Remove sticky positioning on touch devices for smoother scrolling */
    .header-container {
      position: relative;
      height: 72px;
    }

    /* Optimize header padding */
    .header-content {
      padding: 0 1rem !important;
    }

    /* Adjust logo size */
    .logo-title {
      font-size: 1.25rem !important;
    }

    /* Adjust right elements for mobile */
    .right-elements {
      gap: 0.5rem;
    }

    /* Disable animations on mobile for better performance */
    .simple-title,
    .logo-title {
      transition: none;
      will-change: auto;
    }
  }

  /* Mobile landscape specific adjustments */
  @media (max-height: 768px) and (orientation: landscape) and (hover: none) {
    .header-container {
      height: 60px;
    }

    .logo-title {
      font-size: 1.4rem !important; /* Larger title in landscape for better hierarchy */
    }
  }

  @media (max-width: 480px) {
    /* Maintain fixed header height on small mobile */
    .header-container {
      height: 72px;
    }

    .header-content {
      padding: 0 0.75rem !important;
    }

    .logo-title {
      font-size: 1.1rem !important;
      padding: 0.5rem 0.75rem !important;
    }
  }

  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .simple-title,
    .logo-title {
      transition: none !important;
      animation: none !important;
    }
  }
</style>

<script>
  import { addManagedEventListener, createManagedTimeout } from '../utils/memory-cleanup.js';

  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', function () {
    const hamburger = document.getElementById('hamburger');
    const mobileMenu = document.getElementById('mobileMenu');
    const closeMenuBtn = document.getElementById('closeMenu');
    let isMenuOpen = false;

    const COMPONENT_ID = 'header-mobile-menu';

    function toggleMenu() {
      isMenuOpen = !isMenuOpen;

      if (hamburger) {
        hamburger.setAttribute('aria-expanded', isMenuOpen.toString());
      }

      if (mobileMenu) {
        if (isMenuOpen) {
          // Simple menu opening without scroll manager
          mobileMenu.classList.add('active');
          document.body.style.overflow = 'hidden';

          // Ensure the menu drawer is visible by scrolling to top
          const drawer = mobileMenu.querySelector('.mobile-menu-drawer');
          if (drawer) {
            drawer.scrollTop = 0;
          }
        } else {
          // Simple menu closing without scroll manager
          mobileMenu.classList.remove('active');
          document.body.style.overflow = '';
        }
      }
    }

    function closeMenu() {
      if (isMenuOpen) {
        toggleMenu();
      }
    }

    // Event listeners
    hamburger?.addEventListener('click', toggleMenu);
    closeMenuBtn?.addEventListener('click', closeMenu);
    // Close menu when clicking on overlay or links
    mobileMenu?.addEventListener('click', e => {
      const target = e.target as HTMLElement;
      if (
        target === mobileMenu ||
        target.classList?.contains('mobile-menu-overlay') ||
        (target &&
          (target.classList?.contains('mobile-nav-link') ||
            target.classList?.contains('mobile-social-link')))
      ) {
        closeMenu();
      }
    });

    // Close menu on escape key
    addManagedEventListener(document, 'keydown', e => {
      if (e.key === 'Escape' && isMenuOpen) {
        closeMenu();
      }
    });

    // Close menu on window resize (desktop breakpoint)
    let resizeTimeout: ReturnType<typeof setTimeout> | undefined;
    addManagedEventListener(window, 'resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = createManagedTimeout(() => {
        if (window.innerWidth > 768 && isMenuOpen) {
          closeMenu();
        }
      }, 100);
    });

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (isMenuOpen) {
        document.body.style.overflow = '';
      }
    });
  });
</script>
