---
import path from 'path-browserify';

export interface Props {
  src: string;
  alt: string;
  loading?: 'eager' | 'lazy';
  decoding?: 'async' | 'auto' | 'sync';
  class?: string;
}

const { src, alt, loading = 'lazy', decoding = 'async', class: className } = Astro.props;

const optimizedDir = '/images/optimized';
const originalDir = '/images';

// Remove the original /images prefix and get the relative path
const imageRelativePath = src.startsWith(originalDir) ? src.substring(originalDir.length) : src;

const { dir, name } = path.parse(imageRelativePath);

// Define the sources for WebP and AVIF formats
const sources = [
  { type: 'image/avif', ext: 'avif' },
  { type: 'image/webp', ext: 'webp' },
];

const fallbackSrc = `${optimizedDir}${dir}/${name}-large.jpg`;
---
<picture>
  <!-- Modern formats -->
  {sources.map(({ type, ext }) => (
    <source
      type={type}
      srcset={`
        ${optimizedDir}${dir}/${name}-small.${ext} 400w,
        ${optimizedDir}${dir}/${name}-medium.${ext} 800w,
        ${optimizedDir}${dir}/${name}-large.${ext} 1200w
      `}
      sizes="(max-width: 600px) 400px, (max-width: 1024px) 800px, 1200px"
    />
  ))}
  
  <!-- Fallback JPEG -->
  <source
    type="image/jpeg"
    srcset={`
      ${optimizedDir}${dir}/${name}-small.jpg 400w,
      ${optimizedDir}${dir}/${name}-medium.jpg 800w,
      ${optimizedDir}${dir}/${name}-large.jpg 1200w
    `}
    sizes="(max-width: 600px) 400px, (max-width: 1024px) 800px, 1200px"
  />

  <!-- Final fallback for older browsers -->
  <img
    src={fallbackSrc}
    alt={alt}
    loading={loading}
    decoding={decoding}
    class={className}
    width="1200"
    height="675"
  />
</picture> 