---
import CharacterRankingsLayout from '../../../layouts/silver-and-blood/CharacterRankingsLayout.astro';
import { characters } from '../../../data/silver-and-blood/characters.js';
import Breadcrumb from '../../../components/silver-and-blood/Breadcrumb.astro';

// Calculate rankings for key stats
function calculateRankings() {
  const stats = ['hp', 'atk', 'pDef', 'mDef', 'bloodPower'];
  const rankings = {};
  
  stats.forEach(statKey => {
    // Sort characters by stat value (highest first)
    const sorted = [...characters].sort((a, b) => b.stats[statKey] - a.stats[statKey]);
    
    rankings[statKey] = {};
    let currentRank = 1;
    
    sorted.forEach((char, index) => {
      // Handle ties - characters with same value get same rank
      if (index > 0 && char.stats[statKey] === sorted[index - 1].stats[statKey]) {
        rankings[statKey][char.id] = rankings[statKey][sorted[index - 1].id];
      } else {
        rankings[statKey][char.id] = currentRank;
      }
      currentRank = index + 2; // Next unique rank
    });
  });
  
  return rankings;
}

// Calculate overall ranking analysis (excluding blood power)
function calculateOverallAnalysis() {
  const coreStats = ['hp', 'atk', 'pDef', 'mDef']; // Removed bloodPower
  const rankings = calculateRankings();
  const analysis = {};
  
  // First pass: calculate total rank scores
  characters.forEach(char => {
    let totalRankScore = 0;
    let top3Count = 0;
    let top10Count = 0;
    const statBreakdown = {};
    
    coreStats.forEach(statKey => {
      const rank = rankings[statKey][char.id];
      statBreakdown[statKey] = rank;
      
      // Lower rank = better (rank 1 is best)
      totalRankScore += rank;
      
      if (rank <= 3) top3Count++;
      if (rank <= 10) top10Count++;
    });
    
    analysis[char.id] = {
      character: char,
      totalRankScore,
      top3Count,
      top10Count,
      statBreakdown
    };
  });
  
  // Second pass: rank characters by their total rank score (lower = better)
  const sortedCharacters = Object.values(analysis).sort((a, b) => a.totalRankScore - b.totalRankScore);
  
  // Assign overall ranks
  sortedCharacters.forEach((entry, index) => {
    analysis[entry.character.id].overallRank = index + 1;
  });
  
  return analysis;
}

const rankings = calculateRankings();
const overallAnalysis = calculateOverallAnalysis();
const totalCharacters = characters.length;

// Helper function to get rank display
function getRankDisplay(rank) {
  if (rank <= 3) return `#${rank}`;
  if (rank <= 10) return `#${rank}`;
  return `#${rank}`;
}

// Helper function to get rank class for styling
function getRankClass(rank) {
  if (rank <= 3) return 'rank-top3';
  if (rank <= 10) return 'rank-top10';
  return 'rank-other';
}

// Stat display names
const statNames = {
  hp: 'HP',
  atk: 'ATK', 
  pDef: 'P.DEF',
  mDef: 'M.DEF',
  bloodPower: 'Blood Power'
};
---

<CharacterRankingsLayout
  title="Character Rankings - Silver and Blood"
  description="View character stat rankings for HP, ATK, P.DEF, M.DEF, and Blood Power in Silver and Blood"
  gameTitle="Character Rankings"
>
  <!-- Breadcrumb Navigation -->
  <Breadcrumb items={[
    { name: 'Home', href: '/' },
    { name: 'Silver and Blood', href: '/guides/silver-and-blood/' },
    { name: 'Characters', href: '/guides/silver-and-blood/characters/' },
    { name: 'Character Rankings' }
  ]} />

  <section class="content-section">
    <div class="rankings-intro">
      <h2 class="section-title">Character Stat Rankings</h2>
      <p class="intro-text">
        See how each character ranks in key combat stats among all {totalCharacters} characters
      </p>
      <p class="level-note">
        All stats shown at Level 200 (current max level)
      </p>
    </div>

    <!-- Character Selector -->
    <div class="character-selector">
      <h3 class="selector-title">Select Character</h3>
      
      <!-- Filters and Sort Controls -->
      <div class="filter-bar">
        <div class="filter-controls">
          <select class="filter-select" id="class-filter">
            <option value="">Class</option>
            <option value="Warrior">Warrior</option>
            <option value="Assassin">Assassin</option>
            <option value="Defender">Defender</option>
            <option value="Marksman">Marksman</option>
            <option value="Sorcerer">Sorcerer</option>
            <option value="Enchanter">Enchanter</option>
          </select>
          <select class="filter-select" id="rarity-filter">
            <option value="">Rarity</option>
            <option value="SSR">SSR</option>
            <option value="SR">SR</option>
            <option value="R">R</option>
          </select>
          <select class="filter-select" id="faction-filter">
            <option value="">Faction</option>
            <option value="Kingdom">Kingdom</option>
            <option value="Ancestors">Ancestors</option>
            <option value="Church">Church</option>
            <option value="Bloodborn">Bloodborn</option>
          </select>
          <select class="filter-select" id="moonphase-filter">
            <option value="">Moon Phase</option>
            <option value="New Moon">New Moon</option>
            <option value="Crescent Moon">Crescent Moon</option>
            <option value="Full Moon">Full Moon</option>
          </select>
        </div>
        <div class="sort-controls">
          <button class="sort-btn" data-sort="hp">HP</button>
          <button class="sort-btn" data-sort="atk">ATK</button>
          <button class="sort-btn" data-sort="pDef">P.DEF</button>
          <button class="sort-btn" data-sort="mDef">M.DEF</button>
          <button class="sort-btn" data-sort="bloodPower">Blood Power</button>
          <button class="reset-btn" id="clear-filters">Reset</button>
        </div>
      </div>
      
      <!-- Character Grid -->
      <div class="character-grid" id="character-grid">
        {characters.sort((a, b) => a.name.localeCompare(b.name)).map(char => (
          <button class="character-select-card" data-character-id={char.id}>
            <img 
              src={char.image} 
              alt={char.name}
              class="character-portrait"
              width="80"
              height="80"
              loading="lazy"
            />
            <div class="character-info">
              <h3>{char.name}</h3>
              <div class="character-badges">
                <span class={`rarity-badge ${char.rarity.toLowerCase()}`}>{char.rarity}</span>
                <span class={`class-badge ${char.class.toLowerCase().replace(' ', '-')}`}>{char.class}</span>
              </div>
            </div>
          </button>
        ))}
      </div>
    </div>

    <!-- Rankings Display -->
    <div id="rankings-display" class="rankings-display">
      <div id="character-info" class="character-info">
        <img id="character-image" class="character-image" />
        <h3 id="character-name" class="character-name"></h3>
        <p id="character-class" class="character-details"></p>
      </div>

      <div class="rankings-container">
        <h3 class="rankings-title">Stat Rankings</h3>
        
        <div id="rankings-grid" class="rankings-grid">
          {Object.keys(statNames).map(statKey => (
            <div class="ranking-card">
              <h4 class="ranking-card-title">{statNames[statKey]}</h4>
              <div class={`rank-display rank-${statKey}`}></div>
              <div class={`rank-total rank-${statKey}-total`}></div>
              <div class={`stat-value stat-${statKey}`}></div>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Character Performance Analysis -->
      <div id="character-analysis" class="character-analysis" style="display: none;">
        <h4 class="character-analysis-title">Character Performance Breakdown</h4>
        <div class="performance-summary">
          <div class="summary-stats">
            <div class="summary-stat">
              <span class="summary-label">Overall Rank:</span>
              <span class="summary-value" id="overall-rank"></span>
              <span class="summary-note">out of {totalCharacters}</span>
            </div>
            <div class="summary-stat">
              <span class="summary-label">Top 3 Stats:</span>
              <div class="summary-stat-details">
                <span class="summary-count" id="top3-count"></span>
                <div class="stat-badges" id="top3-stats"></div>
              </div>
            </div>
            <div class="summary-stat">
              <span class="summary-label">Top 10 Stats:</span>
              <div class="summary-stat-details">
                <span class="summary-count" id="top10-count"></span>
                <div class="stat-badges" id="top10-stats"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Back to Database Link -->
    <div class="back-button-container">
      <a href="/guides/silver-and-blood/characters/" class="back-button">
        ‚Üê Back to Character Database
      </a>
    </div>
  </section>

  <script is:inline define:vars={{ characters, rankings, overallAnalysis, statNames, totalCharacters }}>
    document.addEventListener('DOMContentLoaded', () => {
      const characterCards = document.querySelectorAll('.character-select-card');
      const classFilter = document.getElementById('class-filter');
      const rarityFilter = document.getElementById('rarity-filter');
      const factionFilter = document.getElementById('faction-filter');
      const moonphaseFilter = document.getElementById('moonphase-filter');
      const resetBtn = document.getElementById('clear-filters');
      const sortButtons = document.querySelectorAll('.sort-btn');
      const rankingsDisplay = document.getElementById('rankings-display');
      const characterImage = document.getElementById('character-image');
      const characterName = document.getElementById('character-name');
      const characterClass = document.getElementById('character-class');

      // Filter functionality
      function filterCharacters() {
        const classValue = classFilter.value.toLowerCase();
        const rarityValue = rarityFilter.value.toLowerCase();
        const factionValue = factionFilter.value.toLowerCase();
        const moonphaseValue = moonphaseFilter.value.toLowerCase();

        characterCards.forEach(card => {
          const character = characters.find(c => c.id === card.dataset.characterId);
          
          const matchesClass = !classValue || character.class.toLowerCase().includes(classValue);
          const matchesRarity = !rarityValue || character.rarity.toLowerCase().includes(rarityValue);
          const matchesFaction = !factionValue || character.faction.toLowerCase().includes(factionValue);
          const matchesMoonphase = !moonphaseValue || character.moonPhase.toLowerCase().includes(moonphaseValue);
          
          card.style.display = (matchesClass && matchesRarity && matchesFaction && matchesMoonphase) ? 'flex' : 'none';
        });
      }

      // Sort functionality
      let sortState = { column: null, asc: false };
      
      function sortCharacters(column) {
        const cardContainer = document.getElementById('character-grid');
        const cards = Array.from(characterCards);
        const multiplier = sortState.asc ? 1 : -1;
        
        cards.sort((a, b) => {
          const aChar = characters.find(c => c.id === a.dataset.characterId);
          const bChar = characters.find(c => c.id === b.dataset.characterId);
          
          let aValue, bValue;
          if (column === 'hp' || column === 'atk' || column === 'pDef' || column === 'mDef' || column === 'bloodPower') {
            aValue = aChar.stats[column];
            bValue = bChar.stats[column];
          }
          
          return (aValue - bValue) * multiplier;
        });
        
        cards.forEach(card => cardContainer.appendChild(card));
      }

      // Event listeners for filters
      if (classFilter) classFilter.addEventListener('change', filterCharacters);
      if (rarityFilter) rarityFilter.addEventListener('change', filterCharacters);
      if (factionFilter) factionFilter.addEventListener('change', filterCharacters);
      if (moonphaseFilter) moonphaseFilter.addEventListener('change', filterCharacters);

      // Event listeners for sort buttons
      sortButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          const col = btn.dataset.sort;
          sortState.asc = sortState.column === col ? !sortState.asc : true;
          sortState.column = col;
          
          sortButtons.forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
          
          sortCharacters(col);
        });
      });

      // Reset functionality
      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          if (classFilter) classFilter.value = '';
          if (rarityFilter) rarityFilter.value = '';
          if (factionFilter) factionFilter.value = '';
          if (moonphaseFilter) moonphaseFilter.value = '';
          
          characterCards.forEach(card => card.style.display = 'flex');
          sortButtons.forEach(b => b.classList.remove('active'));
          sortState = { column: null, asc: false };
        });
      }

      characterCards.forEach(card => {
        card.addEventListener('click', (e) => {
          const characterId = card.dataset.characterId;
          
          // Remove active class from all cards
          characterCards.forEach(c => c.classList.remove('selected'));
          
          // Add active class to clicked card
          card.classList.add('selected');
          
          if (!characterId) {
            rankingsDisplay.classList.remove('active');
            return;
          }

        const character = characters.find(c => c.id === characterId);
        if (!character) return;

        // Update character info
        characterImage.src = character.image;
        characterImage.alt = character.name;
        characterName.textContent = character.name;
        characterClass.textContent = `${character.rarity} ${character.class} ‚Ä¢ ${character.faction}`;

        // Update rankings
        Object.keys(statNames).forEach(statKey => {
          const rank = rankings[statKey][characterId];
          const statValue = character.stats[statKey];
          
          const rankDisplay = document.querySelector(`.rank-${statKey}`);
          const rankTotal = document.querySelector(`.rank-${statKey}-total`);
          const statValueDisplay = document.querySelector(`.stat-${statKey}`);
          
          if (rankDisplay && rankTotal && statValueDisplay) {
            rankDisplay.textContent = `#${rank}`;
            rankTotal.textContent = `out of ${totalCharacters}`;
            
            // Format stat value
            if (statKey === 'bloodPower' || statKey === 'hp' || statKey === 'atk' || statKey === 'pDef' || statKey === 'mDef') {
              statValueDisplay.textContent = statValue.toLocaleString();
            } else {
              statValueDisplay.textContent = `${statValue}%`;
            }
            
            // Apply rank styling
            rankDisplay.className = rankDisplay.className.replace(/rank-(top3|top10|other)/g, '');
            if (rank <= 3) {
              rankDisplay.classList.add('rank-top3');
              rankDisplay.style.color = '#ffd700'; // Gold
            } else if (rank <= 10) {
              rankDisplay.classList.add('rank-top10'); 
              rankDisplay.style.color = '#c0c0c0'; // Silver
            } else {
              rankDisplay.classList.add('rank-other');
              rankDisplay.style.color = '#cd7f32'; // Bronze
            }
          }
        });

        rankingsDisplay.classList.add('active');
        
        // Update character analysis
        updateCharacterAnalysis(characterId);
        
        // Smooth scroll to rankings display
        setTimeout(() => {
          rankingsDisplay.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 100);
        });
      });
    });
    
    function updateCharacterAnalysis(characterId) {
      const analysis = overallAnalysis[characterId];
      if (!analysis) return;
      
      const overallRankEl = document.getElementById('overall-rank');
      const top3CountEl = document.getElementById('top3-count');
      const top3StatsEl = document.getElementById('top3-stats');
      const top10CountEl = document.getElementById('top10-count');
      const top10StatsEl = document.getElementById('top10-stats');
      const characterAnalysisEl = document.getElementById('character-analysis');
      
      // Get stat names for display
      const coreStats = ['hp', 'atk', 'pDef', 'mDef'];
      const top3Stats = [];
      const top10Stats = [];
      
      coreStats.forEach(statKey => {
        const rank = rankings[statKey][characterId];
        if (rank <= 3) {
          top3Stats.push(statNames[statKey]);
        }
        if (rank <= 10) {
          top10Stats.push(statNames[statKey]);
        }
      });
      
      // Update overall rank
      overallRankEl.textContent = `#${analysis.overallRank}`;
      
      // Update top 3 stats
      top3CountEl.textContent = `${top3Stats.length}/4`;
      if (top3Stats.length > 0) {
        top3StatsEl.innerHTML = top3Stats.map(stat => 
          `<span class="stat-badge top3-badge">${stat}</span>`
        ).join('');
      } else {
        top3StatsEl.innerHTML = '<span class="no-stats">None</span>';
      }
      
      // Update top 10 stats
      top10CountEl.textContent = `${top10Stats.length}/4`;
      if (top10Stats.length > 0) {
        top10StatsEl.innerHTML = top10Stats.map(stat => 
          `<span class="stat-badge top10-badge">${stat}</span>`
        ).join('');
      } else {
        top10StatsEl.innerHTML = '<span class="no-stats">None</span>';
      }
      
      characterAnalysisEl.style.display = 'block';
    }
  </script>
</CharacterRankingsLayout>