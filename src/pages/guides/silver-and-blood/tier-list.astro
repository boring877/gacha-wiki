---
import TierListLayout from '../../../layouts/silver-and-blood/TierListLayout.astro';
import { characters } from '../../../data/silver-and-blood/characters.js';
import { ALL_TIER_LISTS, TIER_DEFINITIONS } from '../../../data/silver-and-blood/tier-lists.js';
import StaticTierListView from '../../../components/silver-and-blood/tier-list/StaticTierListView.astro';
import StaticCharacterPool from '../../../components/silver-and-blood/tier-list/StaticCharacterPool.astro';
import StaticMakerTierList from '../../../components/silver-and-blood/tier-list/StaticMakerTierList.astro';

// Create a map of character data for quick lookup
const characterMap = {};
characters.forEach(char => {
  characterMap[char.name] = char;
});

// Helper function to get tier class name
function getTierClassName(tier: string): string {
  return tier.toLowerCase().replace('+', '-plus').replace(/\s+/g, '-');
}
---

<TierListLayout
  title="Silver and Blood Tier List 2025 - Complete Character Rankings SSS-S Tiers | GachaWiki"
  description="Comprehensive Silver and Blood tier list featuring PvE, PvP Arena, Clan Hunt, Boss Raids, and F2P character rankings. Updated 2025 meta with Timeless Aiona, Van Helsing, Acappella, and all vampire characters rated SSS to Situational tiers. Interactive tier list maker with drag-and-drop functionality."
  gameTitle="Silver and Blood Tier List"
>
  <div class="tier-list-container">
    <!-- Mode Toggle -->
    <div class="mode-toggle">
      <button class="mode-btn active" id="view-mode-btn"> View Tier Lists </button>
      <button class="mode-btn" id="maker-mode-btn"> Create Your Own </button>
    </div>

    <!-- View Mode Content -->
    <div id="view-mode-content">
      <!-- Tier List Type Selector -->
      <div class="tier-list-selector">
        <button class="tier-type-btn active" data-list-type="pve"> Overall PvE </button>
        <button class="tier-type-btn" data-list-type="pvp"> PvP Arena </button>
        <button class="tier-type-btn" data-list-type="clan-hunt"> Clan Hunt </button>
        <button class="tier-type-btn" data-list-type="boss-raids"> Boss Raids </button>
        <button class="tier-type-btn" data-list-type="new-player"> New Player / F2P </button>
      </div>
    </div>

    <!-- Maker Mode Content -->
    <div id="maker-mode-content" style="display: none;">
      <div class="maker-controls">
        <button class="control-btn" id="reset-tier-list">Reset</button>
      </div>
    </div>

    <!-- Tier List Info -->
    <div class="tier-list-info" id="tier-list-info">
      <h2 class="tier-list-title" id="list-title">Overall PvE Tier List</h2>
      <p class="tier-list-description" id="list-description">
        Character rankings for general PvE content including story, events, and exploration.
      </p>
      <p class="tier-list-updated" id="list-updated">Last updated: 2025-09-19</p>
    </div>

    <!-- Maker Mode Layout -->
    <div class="maker-layout" id="maker-layout" style="display: none;">
      <!-- Desktop: Side Pool -->
      <div class="side-pool" id="side-pool">
        <h3>Character Pool</h3>
        <StaticCharacterPool showInMaker={true} />
      </div>

      <!-- Tier List -->
      <div class="maker-tier-list">
        <StaticMakerTierList characterMap={characterMap} />
      </div>
    </div>

    <!-- Regular Tier List Display (Static) -->
    <div class="tier-list-display" id="tier-list-display">
      <StaticTierListView tierListData={ALL_TIER_LISTS.pve} characterMap={characterMap} />
    </div>

    <!-- Tier Legend -->
    <div class="tier-legend" id="tier-legend">
      {
        Object.entries(TIER_DEFINITIONS).map(([tier, definition]) => (
          <div class="legend-item">
            <div class={`legend-tier tier-${getTierClassName(tier)}`}>{definition.label}</div>
            <div class="legend-description">
              <span class="legend-label">{definition.label} Tier</span>
              <span class="legend-text">{definition.description}</span>
            </div>
          </div>
        ))
      }
    </div>

    <!-- Quick Links -->
    <div
      style="display: flex; gap: 1rem; justify-content: center; margin: 2rem 0; flex-wrap: wrap;"
    >
      <a
        href="/guides/silver-and-blood/characters/"
        style="display: inline-block; padding: 0.75rem 1.5rem; background: linear-gradient(135deg, var(--sab-calm-red), var(--sab-dark-red)); color: white; text-decoration: none; border-radius: 10px; font-weight: 600; transition: all 0.3s ease;"
      >
        Character Database
      </a>
      <a
        href="/guides/silver-and-blood/team-synergy"
        style="display: inline-block; padding: 0.75rem 1.5rem; background: linear-gradient(135deg, #64b5f6, #42a5f5); color: white; text-decoration: none; border-radius: 10px; font-weight: 600; transition: all 0.3s ease;"
      >
        Team Synergy
      </a>
      <a
        href="/guides/silver-and-blood/character-rankings"
        style="display: inline-block; padding: 0.75rem 1.5rem; background: linear-gradient(135deg, #66bb6a, #4caf50); color: white; text-decoration: none; border-radius: 10px; font-weight: 600; transition: all 0.3s ease;"
      >
        Character Rankings
      </a>
    </div>
  </div>

  <script define:vars={{ ALL_TIER_LISTS }}>
    document.addEventListener('DOMContentLoaded', () => {
      // Cache DOM elements
      const listTitle = document.getElementById('list-title');
      const listDescription = document.getElementById('list-description');
      const listUpdated = document.getElementById('list-updated');
      const typeButtons = document.querySelectorAll('.tier-type-btn');
      const viewModeBtn = document.getElementById('view-mode-btn');
      const makerModeBtn = document.getElementById('maker-mode-btn');
      const viewModeContent = document.getElementById('view-mode-content');
      const makerModeContent = document.getElementById('maker-mode-content');
      const tierListInfo = document.getElementById('tier-list-info');
      const tierLegend = document.getElementById('tier-legend');
      const tierListDisplay = document.getElementById('tier-list-display');
      const makerLayout = document.getElementById('maker-layout');

      // Current active tier list
      let currentListType = 'pve';
      let currentMode = 'view';

      // Function to update tier list info
      function updateTierListInfo(listType) {
        const tierList = ALL_TIER_LISTS[listType];
        if (!tierList) return;

        // Update info
        if (listTitle) listTitle.textContent = tierList.name;
        if (listDescription) listDescription.textContent = tierList.description;
        if (listUpdated) listUpdated.textContent = `Last updated: ${tierList.lastUpdated}`;
      }

      // Add event listeners to type buttons
      typeButtons.forEach(button => {
        button.addEventListener('click', () => {
          const listType = button.dataset.listType;
          if (!listType || listType === currentListType) return;

          // Update active button
          typeButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');

          // Update current list type
          currentListType = listType;

          // Update tier list info
          updateTierListInfo(listType);
        });
      });

      // Mode switching
      viewModeBtn.addEventListener('click', () => {
        currentMode = 'view';
        viewModeBtn.classList.add('active');
        makerModeBtn.classList.remove('active');
        viewModeContent.style.display = 'block';
        makerModeContent.style.display = 'none';
        tierListInfo.style.display = 'block';
        if (tierListDisplay) tierListDisplay.style.display = 'block';
        if (tierLegend) tierLegend.style.display = 'grid';
        if (makerLayout) makerLayout.style.display = 'none';
        updateTierListInfo(currentListType);
      });

      // Initial population
      updateTierListInfo('pve');
    });
  </script>
</TierListLayout>
