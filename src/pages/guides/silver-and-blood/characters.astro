---
import CharactersLayout from '../../../layouts/silver-and-blood/CharactersLayout.astro';
import { Image } from 'astro:assets';
import {
  characters as SILVER_AND_BLOOD_CHARACTERS,
  gameInfo,
} from '../../../data/silver-and-blood/characters.js';
---

<CharactersLayout
  title="Silver and Blood Character Database - GachaWiki"
  description="Sortable and filterable character database for Silver and Blood"
  gameTitle="Character Database"
>
  <section class="page-flex">
    <div class="main-content-container">
      <div class="content-wrapper">
        <div class="character-database-header">
          <p class="character-database-title">Character Database</p>
          <p class="character-database-subtitle">
            All stats shown at Level 200 (current max level)
          </p>
          <div class="character-nav-buttons">
            <a
              href="/guides/silver-and-blood/character-comparison/"
              class="character-nav-button comparison"
            >
              Compare Character Stats
            </a>
            <a
              href="/guides/silver-and-blood/character-rankings/"
              class="character-nav-button rankings"
            >
              Character Rankings
            </a>
            <a
              href="/guides/silver-and-blood/character-tag-selection/"
              class="character-nav-button tags"
            >
              Character Tag Selection
            </a>
          </div>
        </div>
        <div class="filter-bar">
          <div class="filter-controls">
            <select class="filter-select" id="class-filter">
              <option value="">Class</option>
              {gameInfo.classes.map(cls => <option value={cls.name}>{cls.name}</option>)}
            </select>
            <select class="filter-select" id="rarity-filter">
              <option value="">Rarity</option>
              {gameInfo.rarities.map(rarity => <option value={rarity}>{rarity}</option>)}
            </select>
            <select class="filter-select" id="faction-filter">
              <option value="">Faction</option>
              {
                gameInfo.factions.map(faction => (
                  <option value={faction.name}>{faction.name}</option>
                ))
              }
            </select>
            <select class="filter-select" id="moonphase-filter">
              <option value="">Moon Phase</option>
              {gameInfo.moonPhases.map(moon => <option value={moon.name}>{moon.name}</option>)}
            </select>
          </div>
          <div class="sort-controls">
            <button class="sort-btn" data-sort="hp">HP</button>
            <button class="sort-btn" data-sort="atk">ATK</button>
            <button class="sort-btn" data-sort="pDef">P.DEF</button>
            <button class="sort-btn" data-sort="mDef">M.DEF</button>
            <button class="sort-btn" data-sort="bloodPower">Blood Power</button>
            <button class="reset-btn" id="reset-table">Reset</button>
          </div>
        </div>

        <div class="character-table-container">
          <table class="character-table">
            <thead>
              <tr>
                <th>#</th>
                <th>Image</th>
                <th>Name</th>
                <th>Rarity</th>
                <th>Class</th>
                <th>Faction</th>
                <th>HP</th>
                <th>ATK</th>
                <th>P.DEF</th>
                <th>M.DEF</th>
                <th>Moon Phase</th>
                <th>Blood Power</th>
              </tr>
            </thead>
            <tbody id="character-table-body">
              {
                SILVER_AND_BLOOD_CHARACTERS.sort((a, b) => a.name.localeCompare(b.name)).map(
                  (char, idx) => (
                    <tr
                      data-character-id={char.id}
                      data-url={`/guides/silver-and-blood/characters/${char.id}`}
                      style="cursor:pointer;"
                    >
                      <td>{idx + 1}</td>
                      <td>
                        <Image
                          src={char.image}
                          alt={char.name}
                          class="character-img"
                          width={60}
                          height={60}
                          format="webp"
                          quality={85}
                          loading="lazy"
                        />
                      </td>
                      <td>{char.name}</td>
                      <td>
                        <span
                          class={`rarity-badge ${char.rarity.toLowerCase()}`}
                          data-sort-key="rarity"
                        >
                          {char.rarity}
                        </span>
                      </td>
                      <td>
                        <span
                          class={`class-badge ${char.class.toLowerCase()}`}
                          data-sort-key="class"
                        >
                          {char.class}
                        </span>
                      </td>
                      <td>
                        <span
                          class={`faction-badge ${char.faction.toLowerCase()}`}
                          data-sort-key="faction"
                        >
                          {char.faction}
                        </span>
                      </td>
                      <td data-sort-key="hp">{char.stats.hp.toLocaleString()}</td>
                      <td data-sort-key="atk">{char.stats.atk.toLocaleString()}</td>
                      <td data-sort-key="pDef">{char.stats.pDef.toLocaleString()}</td>
                      <td data-sort-key="mDef">{char.stats.mDef.toLocaleString()}</td>
                      <td>
                        <span
                          class={`moon-badge ${char.moonPhase.toLowerCase().replace(' ', '-')}`}
                          data-sort-key="moonPhase"
                        >
                          {char.moonPhase}
                        </span>
                      </td>
                      <td data-sort-key="bloodPower">{char.stats.bloodPower.toLocaleString()}</td>
                    </tr>
                  )
                )
              }
            </tbody>
          </table>
        </div>

        <div class="mobile-card-view" id="mobile-cards-container">
          {
            SILVER_AND_BLOOD_CHARACTERS.sort((a, b) => a.name.localeCompare(b.name)).map(char => (
              <div
                class="mobile-character-card"
                data-character-id={char.id}
                data-url={`/guides/silver-and-blood/characters/${char.id}`}
                style="cursor:pointer;"
              >
                <div class="mobile-card-header">
                  <Image
                    src={char.image}
                    alt={char.name}
                    class="character-img"
                    width={80}
                    height={80}
                    format="webp"
                    quality={85}
                  />
                  <div class="mobile-card-title-group">
                    <h3>{char.name}</h3>
                    <div class="mobile-card-badges">
                      <span class={`rarity-badge ${char.rarity.toLowerCase()}`}>{char.rarity}</span>
                      <span class={`class-badge ${char.class.toLowerCase()}`}>{char.class}</span>
                      <span class={`faction-badge ${char.faction.toLowerCase()}`}>
                        {char.faction}
                      </span>
                    </div>
                  </div>
                </div>
                <div class="mobile-card-stats">
                  <div>
                    <span class="stat-label">HP:</span> {char.stats.hp.toLocaleString()}
                  </div>
                  <div>
                    <span class="stat-label">ATK:</span> {char.stats.atk.toLocaleString()}
                  </div>
                  <div>
                    <span class="stat-label">P.DEF:</span> {char.stats.pDef.toLocaleString()}
                  </div>
                  <div>
                    <span class="stat-label">M.DEF:</span> {char.stats.mDef.toLocaleString()}
                  </div>
                  <div>
                    <span class="stat-label">Moon Phase:</span>{' '}
                    <span class={`moon-badge ${char.moonPhase.toLowerCase().replace(' ', '-')}`}>
                      {char.moonPhase}
                    </span>
                  </div>
                  <div>
                    <span class="stat-label">Blood Power:</span>{' '}
                    {char.stats.bloodPower.toLocaleString()}
                  </div>
                </div>
                <div class="mobile-card-stats mobile-card-stats-secondary">
                  {/* Removed extra secondary stats to match compact desktop table */}
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </section>

  <!-- Hide navigation buttons on touch devices to save space -->
  <style>
    @media (hover: none) and (pointer: coarse) {
      .character-nav-buttons {
        display: none !important;
      }
    }
  </style>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const clickableElements = document.querySelectorAll('[data-url]');
      clickableElements.forEach(element => {
        element.addEventListener('click', () => {
          window.location.href = element.dataset.url;
        });
      });

      const classFilter = document.getElementById('class-filter');
      const rarityFilter = document.getElementById('rarity-filter');
      const factionFilter = document.getElementById('faction-filter');
      const moonphaseFilter = document.getElementById('moonphase-filter');
      const resetBtn = document.getElementById('reset-table');

      function filterTable() {
        const classValue = classFilter.value;
        const rarityValue = rarityFilter.value;
        const factionValue = factionFilter.value;
        const moonphaseValue = moonphaseFilter.value;

        // Save filter state to sessionStorage (save original case)
        const filterState = {
          class: classValue || null,
          rarity: rarityValue || null,
          faction: factionValue || null,
          moonPhase: moonphaseValue || null,
        };

        // Only save non-empty filters
        const activeFilters = {};
        Object.keys(filterState).forEach(key => {
          if (filterState[key]) {
            activeFilters[key] = filterState[key];
          }
        });

        try {
          sessionStorage.setItem('sab-character-filters', JSON.stringify(activeFilters));
        } catch (error) {
          // Could not save filter state to sessionStorage
        }

        const rows = document.querySelectorAll('#character-table-body tr');
        const mobileCards = document.querySelectorAll('.mobile-character-card');

        rows.forEach(row => {
          const classCell = row.querySelector('.class-badge');
          const rarityCell = row.querySelector('.rarity-badge');
          const factionCell = row.querySelector('.faction-badge');
          const moonphaseCell = row.querySelector('.moon-badge');

          const matchesClass =
            !classValue || classCell.textContent.toLowerCase().includes(classValue.toLowerCase());
          const matchesRarity =
            !rarityValue ||
            rarityCell.textContent.toLowerCase().trim() === rarityValue.toLowerCase();
          const matchesFaction =
            !factionValue ||
            factionCell.textContent.toLowerCase().includes(factionValue.toLowerCase());
          const matchesMoonphase =
            !moonphaseValue ||
            moonphaseCell.textContent.toLowerCase().includes(moonphaseValue.toLowerCase());

          row.style.display =
            matchesClass && matchesRarity && matchesFaction && matchesMoonphase ? '' : 'none';
        });

        // Update row numbers for visible rows only
        let visibleRowIndex = 1;
        rows.forEach(row => {
          if (row.style.display !== 'none') {
            const numberCell = row.querySelector('td:first-child');
            if (numberCell) {
              numberCell.textContent = visibleRowIndex;
              visibleRowIndex++;
            }
          }
        });

        mobileCards.forEach(card => {
          const classBadge = card.querySelector('.class-badge');
          const rarityBadge = card.querySelector('.rarity-badge');
          const factionBadge = card.querySelector('.faction-badge');
          const moonphaseBadge = card.querySelector('.moon-badge');

          const matchesClass =
            !classValue || classBadge.textContent.toLowerCase().includes(classValue.toLowerCase());
          const matchesRarity =
            !rarityValue ||
            rarityBadge.textContent.toLowerCase().trim() === rarityValue.toLowerCase();
          const matchesFaction =
            !factionValue ||
            factionBadge.textContent.toLowerCase().includes(factionValue.toLowerCase());
          const matchesMoonphase =
            !moonphaseValue ||
            moonphaseBadge.textContent.toLowerCase().includes(moonphaseValue.toLowerCase());

          card.style.display =
            matchesClass && matchesRarity && matchesFaction && matchesMoonphase ? '' : 'none';
        });
      }

      if (classFilter) classFilter.addEventListener('change', filterTable);
      if (rarityFilter) rarityFilter.addEventListener('change', filterTable);
      if (factionFilter) factionFilter.addEventListener('change', filterTable);
      if (moonphaseFilter) moonphaseFilter.addEventListener('change', filterTable);

      // Store the original order immediately (already sorted alphabetically)
      const tbody = document.getElementById('character-table-body');
      let originalOrder = [];
      if (tbody) {
        originalOrder = [...tbody.querySelectorAll('tr')];
      }

      // Save default sort state to sessionStorage (alphabetical by name)
      try {
        sessionStorage.setItem(
          'sab-character-sort',
          JSON.stringify({
            column: 'name',
            asc: true,
          })
        );
      } catch (error) {
        // Could not save default sort state to sessionStorage
      }

      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          if (classFilter) classFilter.value = '';
          if (rarityFilter) rarityFilter.value = '';
          if (factionFilter) factionFilter.value = '';
          if (moonphaseFilter) moonphaseFilter.value = '';

          // Show all rows/cards
          const rows = document.querySelectorAll('#character-table-body tr');
          const mobileCards = document.querySelectorAll('.mobile-character-card');

          rows.forEach(row => (row.style.display = ''));
          mobileCards.forEach(card => (card.style.display = ''));

          // Restore original order
          const tbody = document.getElementById('character-table-body');
          if (tbody && originalOrder.length > 0) {
            originalOrder.forEach(row => tbody.appendChild(row));
          }

          // Clear all active sort buttons (no default sorting)
          document.querySelectorAll('.sort-btn').forEach(b => b.classList.remove('active'));

          // Clear sessionStorage
          try {
            sessionStorage.removeItem('sab-character-filters');
            sessionStorage.removeItem('sab-character-sort');
          } catch (error) {
            // Could not clear sessionStorage
          }
        });
      }

      const sortButtons = document.querySelectorAll('.sort-btn');
      function sortTable(column) {
        const tbody = document.getElementById('character-table-body');
        const rows = [...tbody.querySelectorAll('tr')];
        const multiplier = sortState.asc ? 1 : -1;
        rows.sort((a, b) => {
          const av = parseFloat(
            a.querySelector(`[data-sort-key="${column}"]`).textContent.replace(/[, %]/g, '')
          );
          const bv = parseFloat(
            b.querySelector(`[data-sort-key="${column}"]`).textContent.replace(/[, %]/g, '')
          );
          return (av - bv) * multiplier;
        });
        rows.forEach(r => tbody.appendChild(r));

        // Update row numbers after sorting
        rows.forEach((row, index) => {
          const numberCell = row.querySelector('td:first-child');
          if (numberCell) {
            numberCell.textContent = index + 1;
          }
        });

        // Save sort state to sessionStorage
        try {
          sessionStorage.setItem(
            'sab-character-sort',
            JSON.stringify({
              column: column,
              asc: sortState.asc,
            })
          );
        } catch (error) {
          // Could not save sort state to sessionStorage
        }
      }
      const sortState = { column: null, asc: false };
      sortButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          const col = btn.dataset.sort;
          // For numerical columns, default to descending (highest first)
          // For text columns, default to ascending
          const numericColumns = ['hp', 'atk', 'pDef', 'mDef', 'bloodPower'];
          const defaultAsc = !numericColumns.includes(col);
          sortState.asc = sortState.column === col ? !sortState.asc : defaultAsc;
          sortState.column = col;
          document.querySelectorAll('.sort-btn').forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
          sortTable(col);
        });
      });
    });
  </script>
</CharactersLayout>
