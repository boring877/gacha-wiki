---
import { Image } from 'astro:assets';
import CharacterLayout from '../../../layouts/horizon-walker/CharacterLayout.astro';
import {
  HORIZON_WALKER_CHARACTERS,
  gameInfo,
  getTagCategory,
} from '../../../data/horizon-walker/characters.js';
import {
  getStrengthValue,
  getIntelligenceValue,
  getVitalityValue,
  getAgilityValue,
  getTechnicValue,
} from '../../../utils/horizon-walker/character-table-utils.js';

// Dynamic image imports for performance optimization
const images = import.meta.glob<{ default: ImageMetadata }>(
  '../../../assets/images/games/horizon-walker/characters/*.{jpg,jpeg,png}'
);

// Extract filter options from enhanced data structure
const { rarities } = gameInfo;

// Calculate enhanced stats for display
const totalCharacters = HORIZON_WALKER_CHARACTERS.length;
const exCount = HORIZON_WALKER_CHARACTERS.filter(char => char.rarity === 'EX').length;
const ssCount = HORIZON_WALKER_CHARACTERS.filter(char => char.rarity === 'SS').length;
const sCount = HORIZON_WALKER_CHARACTERS.filter(char => char.rarity === 'S').length;
const aCount = HORIZON_WALKER_CHARACTERS.filter(char => char.rarity === 'A').length;
const bCount = HORIZON_WALKER_CHARACTERS.filter(char => char.rarity === 'B').length;

// Resolve images at build time for better performance
const resolvedImages = {};
for (const path in images) {
  const imageName = path.split('/').pop()?.replace('.jpg', '');
  if (imageName) {
    resolvedImages[imageName] = await images[path]();
  }
}

// Character name to filename mapping
const getImageKey = characterName => {
  let filename = characterName
    .replace(/ /g, '_') // Replace spaces with underscores
    .replace(/-/g, '_') // Replace hyphens with underscores
    .replace(/\./g, '_'); // Replace periods with underscores

  // Handle special character naming cases
  if (characterName === 'TX - Manticore') filename = 'TX_Manticore';
  if (characterName === 'Re_De_Da') filename = 'Re_De_Da';
  if (characterName === 'Headless Knight') filename = 'Headless_Knight';

  // Handle Korean character name mappings
  if (characterName === 'Kim Ga-young') filename = 'kim_Ga_young';
  if (characterName === 'Yeon Chae-Young') filename = 'Yeon_Chae-Young';
  if (characterName === 'Min Eun-sol') filename = 'Min_Eun_sol';
  if (characterName === 'So Joo-hee') filename = 'So_Joo_hee';

  return filename;
};

// Helper function to get optimized character image
const getOptimizedImage = characterName => {
  const imageKey = getImageKey(characterName);
  return resolvedImages[imageKey]?.default || '/images/games/horizon-walker/gameimg/gameicon.jpg';
};

// SEO metadata
const title = 'Horizon Walker Characters Database - All Heroes & Waifus List 2025 | GachaWiki';
const description = `Explore all ${totalCharacters} Horizon Walker characters including ${exCount} EX, ${ssCount} SS, ${sCount} S, ${aCount} A, ${bCount} B rarity heroes. Complete database with stats, costs, classes, elements, and factions. Advanced filtering and mobile-optimized interface.`;
---

<CharacterLayout title={title} description={description} gameTitle="Character Database">
  <section class="hw-char-db-page-flex">
    <div class="hw-char-db-main-content">
      <div class="hw-char-db-content-wrapper">
        <!-- Header with stats info -->
        <div class="hw-character-database-header">
          <h1 class="hw-character-database-title">Character Database</h1>
          <p class="hw-character-database-subtitle">
            All stats shown at max level (Level {gameInfo.maxLevel})
          </p>
          <div class="hw-char-db-stats-summary">
            <span class="hw-badge" data-rarity="EX">{exCount} EX</span>
            <span class="hw-badge" data-rarity="SS">{ssCount} SS</span>
            <span class="hw-badge" data-rarity="S">{sCount} S</span>
            <span class="hw-badge" data-rarity="A">{aCount} A</span>
            <span class="hw-badge" data-rarity="B">{bCount} B</span>
          </div>
        </div>

        <!-- Filter Bar -->
        <div class="filter-bar">
          <div class="filter-controls">
            <select class="filter-select" id="rarity-filter">
              <option value="">Rarity</option>
              {rarities.map(rarity => <option value={rarity}>{rarity}</option>)}
            </select>
          </div>
          <div class="sort-controls">
            <button class="sort-btn" data-sort="rarity">Rarity</button>
            <button class="sort-btn" data-sort="cost">Cost</button>
            <button class="sort-btn" data-sort="strength">STR</button>
            <button class="sort-btn" data-sort="intelligence">INT</button>
            <button class="sort-btn" data-sort="vitality">VIT</button>
            <button class="sort-btn" data-sort="agility">AGI</button>
            <button class="sort-btn" data-sort="technic">TEC</button>
            <button class="reset-btn" id="reset-table">Reset</button>
          </div>
        </div>

        <!-- Desktop table container with touch optimizations -->
        <div class="character-table-container">
          <table class="character-table" id="character-table">
            <thead>
              <tr>
                <th>#</th>
                <th>Image</th>
                <th>Name</th>
                <th>Rarity</th>
                <th>Cost</th>
                <th>STR</th>
                <th>INT</th>
                <th>VIT</th>
                <th>AGI</th>
                <th>TEC</th>
              </tr>
            </thead>
            <tbody id="character-table-body">
              {
                HORIZON_WALKER_CHARACTERS.map((character, idx) => (
                  <tr
                    data-character-id={character.id}
                    data-url={character.detailUrl}
                    data-name={character.name}
                    data-rarity={character.rarity}
                    data-class={character.class}
                    data-element={character.element}
                    data-faction={character.faction}
                    data-tags={character.tags ? character.tags.join(', ') : ''}
                    class="clickable-row"
                  >
                    <td>{idx + 1}</td>
                    <td>
                      <div class="desktop-character-image">
                        <Image
                          src={getOptimizedImage(character.name)}
                          alt={character.name}
                          class="character-img"
                          width={80}
                          height={80}
                          format="webp"
                          quality={85}
                          loading={idx < 10 ? 'eager' : 'lazy'}
                          fetchpriority={idx < 5 ? 'high' : 'auto'}
                          decoding="async"
                        />
                      </div>
                    </td>
                    <td>
                      <strong
                        class="character-name"
                        data-long={character.name.length > 12 ? 'true' : 'false'}
                      >
                        {character.name}
                      </strong>
                    </td>
                    <td>
                      <span class="hw-badge" data-rarity={character.rarity} data-sort-key="rarity">
                        {character.rarity}
                      </span>
                    </td>
                    <td data-sort-key="cost">
                      <strong class="cost-value">{character.cost}</strong>
                    </td>
                    <td data-sort-key="strength">
                      <strong class="stat-value">{getStrengthValue(character.stats)}</strong>
                    </td>
                    <td data-sort-key="intelligence">
                      <strong class="stat-value">{getIntelligenceValue(character.stats)}</strong>
                    </td>
                    <td data-sort-key="vitality">
                      <strong class="stat-value">{getVitalityValue(character.stats)}</strong>
                    </td>
                    <td data-sort-key="agility">
                      <strong class="stat-value">{getAgilityValue(character.stats)}</strong>
                    </td>
                    <td data-sort-key="technic">
                      <strong class="stat-value">{getTechnicValue(character.stats)}</strong>
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>

        <!-- Mobile card view container with touch optimization -->
        <div class="mobile-card-view" id="mobile-cards-container">
          {
            HORIZON_WALKER_CHARACTERS.map((char, idx) => (
              <div
                class="mobile-character-card"
                data-character-id={char.id}
                data-slug={char.slug}
                data-url={char.detailUrl}
                data-name={char.name}
                data-rarity={char.rarity}
                data-class={char.class}
                data-element={char.element}
                data-faction={char.faction}
                data-tags={char.tags ? char.tags.join(', ') : ''}
                style="cursor:pointer; touch-action: manipulation;"
              >
                {/* Clean header section - image, name, rarity all together */}
                <div class="mobile-card-header">
                  <div class="mobile-card-image">
                    <div class="mobile-character-image">
                      <Image
                        src={getOptimizedImage(char.name)}
                        alt={char.name}
                        class="character-img"
                        width={64}
                        height={64}
                        format="webp"
                        quality={85}
                        loading={idx < 6 ? 'eager' : 'lazy'}
                        fetchpriority={idx < 3 ? 'high' : 'auto'}
                        decoding="async"
                      />
                    </div>
                  </div>
                  <div class="mobile-card-info">
                    <h3 class="character-name" data-long={char.name.length > 12 ? 'true' : 'false'}>
                      {char.name}
                    </h3>
                    <div class="header-badges">
                      <span class="hw-badge" data-rarity={char.rarity}>
                        {char.rarity}
                      </span>
                      <span class="cost-badge" data-type="Cost">
                        Cost: {char.cost}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Clean stats grid - 5 basic stats */}
                <div class="mobile-card-stats-grid">
                  <div class="stat-item">
                    <span class="stat-label">STR</span>
                    <strong class="stat-value" data-stat="strength">
                      {getStrengthValue(char.stats)}
                    </strong>
                  </div>
                  <div class="stat-item">
                    <span class="stat-label">INT</span>
                    <strong class="stat-value" data-stat="intelligence">
                      {getIntelligenceValue(char.stats)}
                    </strong>
                  </div>
                  <div class="stat-item">
                    <span class="stat-label">VIT</span>
                    <strong class="stat-value" data-stat="vitality">
                      {getVitalityValue(char.stats)}
                    </strong>
                  </div>
                  <div class="stat-item">
                    <span class="stat-label">AGI</span>
                    <strong class="stat-value" data-stat="agility">
                      {getAgilityValue(char.stats)}
                    </strong>
                  </div>
                  <div class="stat-item">
                    <span class="stat-label">TEC</span>
                    <strong class="stat-value" data-stat="technic">
                      {getTechnicValue(char.stats)}
                    </strong>
                  </div>
                </div>

                {/* Gameplay Tags with categorization */}
                {char.tags && char.tags.length > 0 && (
                  <div class="mobile-card-tags character-tags-container">
                    <strong class="tags-label character-tags-label">Gameplay Tags</strong>
                    <div class="tags-container character-tags-wrapper">
                      {char.tags.map(tag => (
                        <span class={`character-tag ${getTagCategory(tag)}`}>{tag}</span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </section>

  <!-- Load the character database script with sorting and filtering functionality -->
  <script src="/scripts/horizon-walker/character-database.js" defer></script>
</CharacterLayout>
