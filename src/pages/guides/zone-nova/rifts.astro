---
import ZoneNovaLayout from '../../../layouts/ZoneNovaLayout.astro';
import FormattedDate from '../../../components/FormattedDate.astro';

// Scalable rift data structure - easily add new rifts here
const riftData = {
	"rift-tide-3": {
		id: "rift-tide-3",
		name: "Rift Tide III",
		status: "Active",
		endDate: "2025-06-23T23:59:59",
		eventPeriod: "May 7 - June 23, 2025",
		description: "Block-focused rift with energy recovery and damage stacking mechanics. Team up using [Rift Laws] to defeat waves of enemies surging through dimensional tears.",
		effectCount: 3
	},
	"rift-tide-4": {
		id: "rift-tide-4",
		name: "Rift Tide IV",
		status: "Active",
		endDate: "2025-07-08T03:59:59",
		eventPeriod: "June 10 - July 8, 2025",
		description: "Pursuit and Thunder Mark mechanics with enhanced blocking effects",
		effectCount: 4
	}
};

// Get active rifts (can be filtered by status)
const activeRifts = Object.values(riftData).filter(rift => rift.status === "Active");
const allRifts = Object.values(riftData);
---

<ZoneNovaLayout 
	title="Zone Nova Space-Time Rifts - GachaWiki" 
	description="Space-Time Rift law effects and current active rifts in Zone Nova"
	gameTitle="Space-Time Rifts"
	
	
>
	<Fragment slot="head">
		<style>
			/* Back Button */
			.back-button {
				display: inline-flex;
				align-items: center;
				gap: 0.75rem;
				background: linear-gradient(135deg, var(--bg-primary), var(--bg-secondary));
				color: var(--text-primary);
				text-decoration: none;
				padding: 1rem 2rem;
				border-radius: 16px;
				border: 2px solid transparent;
				background-clip: padding-box;
				font-family: 'Space Grotesk', sans-serif;
				font-weight: 600;
				font-size: 1rem;
				margin-bottom: 3rem;
				transition: all 0.4s ease;
				position: relative;
				overflow: hidden;
				box-shadow: 0 8px 25px rgba(255, 183, 77, 0.15);
			}

			.back-button::before {
				content: '';
				position: absolute;
				top: 0;
				left: -100%;
				width: 100%;
				height: 100%;
				background: linear-gradient(90deg, transparent, rgba(255, 183, 77, 0.1), transparent);
				transition: left 0.6s ease;
			}

			.back-button:hover::before {
				left: 100%;
			}

			.back-button:hover {
				transform: translateY(-2px);
				border-color: var(--amber-glow);
				box-shadow: 0 12px 35px rgba(255, 183, 77, 0.25);
				background: linear-gradient(135deg, var(--amber-glow), var(--teal-crystal));
				color: white;
			}

			.back-arrow {
				font-size: 1.2rem;
				transition: transform 0.3s ease;
			}

			.back-button:hover .back-arrow {
				transform: translateX(-3px);
			}

			/* Content Sections */
			.content-section {
				background: linear-gradient(135deg, rgba(255, 255, 255, 0.98), rgba(248, 250, 252, 0.95));
				padding: 3rem;
				border-radius: 24px;
				margin-bottom: 3rem;
				border: 1px solid rgba(255, 183, 77, 0.1);
				box-shadow: 
					0 20px 40px rgba(0, 0, 0, 0.08),
					0 8px 16px rgba(255, 183, 77, 0.06),
					inset 0 1px 0 rgba(255, 255, 255, 0.8);
				position: relative;
				transition: all 0.4s ease;
				backdrop-filter: blur(10px);
			}

			.content-section::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				height: 4px;
				background: linear-gradient(90deg, var(--amber-glow), var(--teal-crystal), var(--rose-quartz));
				border-radius: 24px 24px 0 0;
			}

			.content-section:hover {
				transform: translateY(-4px);
				box-shadow: 
					0 25px 50px rgba(0, 0, 0, 0.12),
					0 12px 24px rgba(255, 183, 77, 0.08),
					inset 0 1px 0 rgba(255, 255, 255, 0.9);
			}

			/* Section Titles */
			.section-title {
				font-family: 'Space Grotesk', sans-serif;
				font-size: 2.25rem;
				font-weight: 700;
				background: linear-gradient(135deg, var(--amber-glow), var(--teal-crystal));
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
				margin: 0 0 2rem 0;
				text-align: center;
				position: relative;
				animation: titleGlow 3s ease-in-out infinite alternate;
			}

			.section-title::after {
				content: '';
				position: absolute;
				bottom: -0.5rem;
				left: 50%;
				transform: translateX(-50%);
				width: 60px;
				height: 3px;
				background: linear-gradient(90deg, var(--amber-glow), var(--teal-crystal));
				border-radius: 2px;
			}

			/* Rift Events Grid */
			.rift-events-grid {
				display: flex;
				flex-direction: column;
				gap: 1rem;
				margin-bottom: 3rem;
			}

			.rift-event-card {
				background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(248, 250, 252, 0.9));
				padding: 1.5rem;
				border-radius: 12px;
				border: 2px solid transparent;
				background-clip: padding-box;
				transition: all 0.3s ease;
				position: relative;
				overflow: hidden;
				box-shadow: 0 4px 12px rgba(0, 172, 193, 0.08);
				text-decoration: none;
				color: inherit;
				display: flex;
				align-items: center;
				gap: 1.5rem;
			}

			.rift-event-card::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				height: 3px;
				background: linear-gradient(90deg, var(--teal-crystal), var(--amber-glow));
				border-radius: 12px 12px 0 0;
			}

			.rift-event-card:hover {
				transform: translateY(-2px);
				box-shadow: 0 8px 20px rgba(0, 172, 193, 0.15);
				border-color: var(--teal-crystal);
			}

			.rift-content {
				flex: 1;
				display: flex;
				flex-direction: column;
				gap: 0.5rem;
			}

			.rift-header {
				display: flex;
				justify-content: space-between;
				align-items: flex-start;
				margin-bottom: 0.5rem;
				gap: 1rem;
			}

			.rift-header h3 {
				font-family: 'Space Grotesk', sans-serif;
				font-size: 1.3rem;
				font-weight: 700;
				color: var(--text-primary);
				margin: 0;
				flex: 1;
			}

			.rift-timer {
				background: linear-gradient(135deg, rgba(255, 183, 77, 0.1), rgba(255, 183, 77, 0.05));
				color: var(--amber-glow);
				padding: 0.4rem 0.8rem;
				border-radius: 8px;
				font-size: 0.85rem;
				font-weight: 600;
				border: 1px solid rgba(255, 183, 77, 0.2);
				white-space: nowrap;
				animation: pulse 2s infinite;
			}

			.rift-description {
				color: var(--text-secondary);
				line-height: 1.5;
				margin-bottom: 0.75rem;
				font-size: 0.95rem;
				display: -webkit-box;
				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}

			.rift-details {
				display: flex;
				gap: 1.5rem;
				align-items: center;
				flex-wrap: wrap;
			}

			.rift-detail-item {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				padding: 0.3rem 0;
			}

			.rift-detail-label {
				font-weight: 600;
				color: var(--text-primary);
				font-size: 0.85rem;
			}

			.rift-detail-value {
				color: var(--text-secondary);
				font-size: 0.85rem;
			}

			.rift-meta-right {
				display: flex;
				flex-direction: column;
				align-items: flex-end;
				gap: 0.5rem;
				min-width: 100px;
			}

			.view-details-btn {
				background: linear-gradient(135deg, var(--amber-glow), var(--teal-crystal));
				color: white;
				border: none;
				padding: 0.5rem 1rem;
				border-radius: 8px;
				font-weight: 600;
				font-size: 0.85rem;
				transition: all 0.3s ease;
				cursor: pointer;
				white-space: nowrap;
			}

			.view-details-btn:hover {
				transform: translateY(-1px);
				box-shadow: 0 4px 12px rgba(255, 183, 77, 0.3);
			}

			/* Status Badges */
			.status-badge {
				display: inline-block;
				padding: 0.25rem 0.75rem;
				border-radius: 12px;
				font-size: 0.85rem;
				font-weight: 600;
			}

			.status-active {
				background: linear-gradient(135deg, rgba(34, 197, 94, 0.15), rgba(34, 197, 94, 0.1));
				color: #22c55e;
				border: 1px solid rgba(34, 197, 94, 0.2);
			}

			.status-coming-soon {
				background: linear-gradient(135deg, rgba(255, 183, 77, 0.15), rgba(255, 183, 77, 0.1));
				color: var(--amber-glow);
				border: 1px solid rgba(255, 183, 77, 0.2);
			}

			.status-ended {
				background: linear-gradient(135deg, rgba(156, 163, 175, 0.15), rgba(156, 163, 175, 0.1));
				color: #9ca3af;
				border: 1px solid rgba(156, 163, 175, 0.2);
			}

			/* Intro Text */
			.intro-text {
				text-align: center;
				color: var(--text-secondary);
				font-size: 1.1rem;
				line-height: 1.7;
				margin-bottom: 3rem;
				max-width: 600px;
				margin-left: auto;
				margin-right: auto;
			}

			/* Animations */
			@keyframes titleGlow {
				0% {
					text-shadow: 
						0 0 10px rgba(255, 183, 77, 0.3),
						0 0 20px rgba(255, 183, 77, 0.2);
				}
				100% {
					text-shadow: 
						0 0 20px rgba(255, 183, 77, 0.6),
						0 0 30px rgba(255, 183, 77, 0.4);
				}
			}

			@keyframes pulse {
				0%, 100% {
					opacity: 1;
				}
				50% {
					opacity: 0.7;
				}
			}

			/* Mobile Responsiveness */
			@media (max-width: 768px) {
				.content-section {
					padding: 2rem;
					margin-bottom: 2rem;
				}
				
				.section-title {
					font-size: 1.75rem;
				}
				
				.rift-events-grid {
					gap: 0.75rem;
				}

				.rift-event-card {
					padding: 1.25rem;
					flex-direction: column;
					align-items: flex-start;
					gap: 1rem;
				}

				.rift-header {
					flex-direction: column;
					align-items: flex-start;
					gap: 0.5rem;
					margin-bottom: 0.75rem;
				}

				.rift-timer {
					align-self: flex-start;
				}

				.rift-details {
					gap: 1rem;
				}

				.rift-meta-right {
					align-self: stretch;
					align-items: stretch;
				}

				.view-details-btn {
					width: 100%;
				}

				.back-button {
					padding: 0.875rem 1.5rem;
					margin-bottom: 2rem;
				}
			}

			@media (max-width: 480px) {
				.content-section {
					padding: 1.5rem;
				}

				.section-title {
					font-size: 1.5rem;
				}

				.rift-event-card {
					padding: 1rem;
				}

				.rift-details {
					flex-direction: column;
					align-items: flex-start;
					gap: 0.5rem;
				}
			}
		</style>
	</Fragment>



	<!-- Overview Section -->
	<section class="content-section">
		<h1 class="section-title">Space-Time Rifts</h1>

		<div class="rift-events-grid">
			{allRifts.map(rift => (
				<a href={`/guides/zone-nova/rifts/${rift.id}/`} class="rift-event-card">
					<div class="rift-content">
						<div class="rift-header">
							<h3>{rift.name}</h3>
							<div class="rift-timer" id={`${rift.id}-timer`}>Loading...</div>
						</div>
						
						<p class="rift-description">{rift.description}</p>
						
						<div class="rift-details">
							<div class="rift-detail-item">
								<span class="rift-detail-label">Status:</span>
								<span class={`status-badge status-${rift.status.toLowerCase().replace(' ', '-')}`}>{rift.status}</span>
							</div>
							
							{rift.eventPeriod && (
								<div class="rift-detail-item">
									<span class="rift-detail-label">Period:</span>
									<span class="rift-detail-value">{rift.eventPeriod}</span>
								</div>
							)}
							
							<div class="rift-detail-item">
								<span class="rift-detail-label">Effects:</span>
								<span class="rift-detail-value">{rift.effectCount} effects</span>
							</div>
						</div>
					</div>
					
					<div class="rift-meta-right">
						<button class="view-details-btn">
							View Details →
						</button>
					</div>
				</a>
			))}
		</div>
	</section>

	<script define:vars={{ riftData }}>
		document.addEventListener('DOMContentLoaded', function() {
			// Convert rift data end dates to timestamps
			const riftTimestamps = {};
			for (const [key, rift] of Object.entries(riftData)) {
				riftTimestamps[key] = new Date(rift.endDate).getTime();
			}

			function updateRiftTimers() {
				const now = new Date().getTime();
				
				// Update all rift timers dynamically
				for (const [key, timestamp] of Object.entries(riftTimestamps)) {
					const timerElement = document.getElementById(`${key}-timer`);
					if (timerElement) {
						const timeLeft = timestamp - now;
						if (timeLeft > 0) {
							const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
							const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
							const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
							
							// Show different formats based on time remaining
							if (days > 0) {
								timerElement.textContent = `${days}d ${hours}h remaining`;
							} else if (hours > 0) {
								timerElement.textContent = `${hours}h ${minutes}m remaining`;
							} else {
								timerElement.textContent = `${minutes}m remaining`;
							}
						} else {
							timerElement.textContent = 'Event Ended';
							timerElement.style.background = 'linear-gradient(135deg, rgba(156, 163, 175, 0.1), rgba(156, 163, 175, 0.05))';
							timerElement.style.color = '#9ca3af';
							timerElement.style.border = '1px solid rgba(156, 163, 175, 0.2)';
						}
					}
				}
			}

			// Update timers immediately and then every minute
			updateRiftTimers();
			setInterval(updateRiftTimers, 60000);
		});
	</script>
</ZoneNovaLayout> 
