---
// Import your layout
import ZoneNovaLayout from '../../../layouts/zone-nova/LandingLayout.astro';
import { Image } from 'astro:assets';
import ZNMemoryImage from '../../../components/zone-nova/ZNMemoryImage.astro';
import '../../../styles/games/zone-nova/zn-badge-colour.css';
import '../../../styles/games/zone-nova/zn-character.css';
import '../../../styles/games/zone-nova/zn-memories-database.css';

// Import memory data and utilities
import {
  ZONE_NOVA_MEMORIES,
  MEMORY_METADATA,
  getMemoriesByCharacter,
  getMemoryClass,
} from '../../../data/zone-nova/memories.js';

// Helper function to extract image filename
const getImageFilename = (imagePath: string): string => {
  if (!imagePath) return '';
  return imagePath.split('/').pop() || '';
};
---

<ZoneNovaLayout
  title="Zone Nova Memory Database - GachaWiki"
  description="Sortable and filterable memory database for Zone Nova"
  gameTitle="Memory Database"
>
  <section class="page-flex">
    <div class="main-content-container">
      <div class="content-wrapper">
        {/* <!-- Filter Bar --> */}
        <div class="filter-container">
          <div class="filter-header">
            <h2 class="filter-title">Filter Memory Cards</h2>
            <button class="reset-btn" id="reset-table">Reset All</button>
          </div>

          <div class="filter-controls">
            <div class="filter-row">
              <div class="filter-group">
                <label class="filter-label">Rarity</label>
                <div class="button-group rarity-group">
                  <button class="filter-btn all active" data-rarity="">All</button>
                  <button class="filter-btn ssr" data-rarity="SSR">SSR</button>
                  <button class="filter-btn sr" data-rarity="SR">SR</button>
                  <button class="filter-btn r" data-rarity="R">R</button>
                </div>
              </div>

              <div class="filter-group">
                <label class="filter-label">Class</label>
                <div class="button-group class-group">
                  <button class="filter-btn all active" data-class="">All</button>
                  {
                    MEMORY_METADATA.classes.map(className => (
                      <button class="filter-btn" data-class={className}>
                        {className}
                      </button>
                    ))
                  }
                </div>
              </div>
            </div>

            <div class="filter-row">
              <div class="filter-group">
                <label class="filter-label">Sort By</label>
                <div class="button-group sort-group">
                  <button class="sort-btn" data-sort="hp">HP</button>
                  <button class="sort-btn" data-sort="attack">ATK</button>
                  <button class="sort-btn" data-sort="defense">DEF</button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* <!-- Desktop table view --> */}
        <div class="memory-table-container">
          <table class="memory-table">
            <thead>
              <tr>
                <th>#</th>
                <th>Image</th>
                <th>Name</th>
                <th>Rarity</th>
                <th>Class Icon</th>
                <th>Class</th>
                <th>HP</th>
                <th>Attack</th>
                <th>Defense</th>
              </tr>
            </thead>
            <tbody id="memory-table-body">
              {
                ZONE_NOVA_MEMORIES.map((memory, idx) => (
                  <tr
                    data-memory-id={memory.id}
                    data-slug={memory.slug}
                    data-url={memory.detailUrl}
                    data-class={getMemoryClass(memory) || ''}
                    style="cursor:pointer;"
                  >
                    <td>{idx + 1}</td>
                    <td>
                      <ZNMemoryImage
                        imageName={getImageFilename(memory.image)}
                        alt={memory.name}
                        class="memory-img"
                        loading="lazy"
                        width={60}
                        height={60}
                      />
                    </td>
                    <td>{memory.name}</td>
                    <td>
                      <span
                        class={`rarity-badge ${memory.rarity.toLowerCase()}`}
                        data-sort-key="rarity"
                      >
                        {memory.rarity}
                      </span>
                    </td>
                    <td style="text-align: center; vertical-align: middle;">
                      {(() => {
                        const memoryClass = getMemoryClass(memory);
                        return memoryClass ? (
                          <Image
                            src={`/images/games/zone-nova/classes/1${memoryClass}.jpg`}
                            alt={memoryClass}
                            class="class-icon-standalone"
                            width={32}
                            height={32}
                            format="webp"
                            quality={85}
                            loading="lazy"
                            title={memoryClass}
                          />
                        ) : (
                          <span style="color: var(--text-secondary); font-size: 0.8rem;">-</span>
                        );
                      })()}
                    </td>
                    <td>
                      <span
                        class={`class-badge ${(getMemoryClass(memory) || 'universal').toLowerCase()}`}
                      >
                        {getMemoryClass(memory) || 'Universal'}
                      </span>
                    </td>
                    <td data-sort-key="hp">{memory.stats.hp.toLocaleString()}</td>
                    <td data-sort-key="attack">{memory.stats.attack.toLocaleString()}</td>
                    <td data-sort-key="defense">{memory.stats.defense.toLocaleString()}</td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>

        {/* <!-- Mobile card view container --> */}
        <div class="mobile-card-view" id="mobile-cards-container">
          {
            ZONE_NOVA_MEMORIES.map(memory => (
              <div
                class="mobile-memory-card"
                data-memory-id={memory.id}
                data-slug={memory.slug}
                data-url={memory.detailUrl}
                data-class={getMemoryClass(memory) || ''}
                style="cursor:pointer;"
              >
                <div class="mobile-card-header">
                  <ZNMemoryImage
                    imageName={getImageFilename(memory.image)}
                    alt={memory.name}
                    class="memory-img"
                    width={80}
                    height={80}
                  />
                  <div class="mobile-card-title-group">
                    <h3>{memory.name}</h3>
                    <div class="mobile-card-badges">
                      <span class={`rarity-badge ${memory.rarity.toLowerCase()}`}>
                        {memory.rarity}
                      </span>
                      {(() => {
                        const memoryClass = getMemoryClass(memory);
                        return memoryClass ? (
                          <span class={`class-badge ${memoryClass.toLowerCase()}`}>
                            {memoryClass}
                          </span>
                        ) : null;
                      })()}
                    </div>
                  </div>
                </div>
                <div class="mobile-card-stats">
                  <div>
                    <span class="stat-label">HP:</span> {memory.stats.hp.toLocaleString()}
                  </div>
                  <div>
                    <span class="stat-label">ATK:</span> {memory.stats.attack.toLocaleString()}
                  </div>
                  <div>
                    <span class="stat-label">DEF:</span> {memory.stats.defense.toLocaleString()}
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </section>

  <script>
    // Memory database functionality
    document.addEventListener('DOMContentLoaded', function () {
      const memoryTableBody = document.getElementById('memory-table-body');
      const mobileCardsContainer = document.getElementById('mobile-cards-container');
      const rarityFilterButtons = document.querySelectorAll(
        '.rarity-group .filter-btn[data-rarity]'
      );
      const classFilterButtons = document.querySelectorAll('.class-group .filter-btn[data-class]');
      const resetButton = document.getElementById('reset-table');
      const sortButtons = document.querySelectorAll('.sort-btn');

      let currentSortKey = '';
      let isAscending = false;
      let allMemories: any[] = [];

      // Initialize memories data
      function initializeMemories() {
        const tableRows = document.querySelectorAll('#memory-table-body tr');
        const mobileCards = document.querySelectorAll('.mobile-memory-card');

        allMemories = Array.from(tableRows).map((row, index) => {
          const mobileCard = mobileCards[index];
          const tableRow = row as HTMLTableRowElement;
          return {
            element: row,
            mobileElement: mobileCard,
            data: {
              rarity: row.querySelector('[data-sort-key="rarity"]')?.textContent?.trim() || '',
              class: (row as HTMLElement).dataset.class || '',
              name: tableRow.cells[2]?.textContent?.toLowerCase() || '',
              hp: parseInt(
                row.querySelector('[data-sort-key="hp"]')?.textContent?.replace(/,/g, '') || '0'
              ),
              attack: parseInt(
                row.querySelector('[data-sort-key="attack"]')?.textContent?.replace(/,/g, '') || '0'
              ),
              defense: parseInt(
                row.querySelector('[data-sort-key="defense"]')?.textContent?.replace(/,/g, '') ||
                  '0'
              ),
            },
          };
        });
      }

      // Update row numbers for visible rows only
      function updateRowNumbers() {
        let visibleCount = 0;
        const visibleRows = Array.from(memoryTableBody?.children || []).filter(
          row => (row as HTMLElement).style.display !== 'none'
        );

        visibleRows.forEach(row => {
          visibleCount++;
          (row as HTMLTableRowElement).cells[0].textContent = String(visibleCount);
        });
      }

      // Filter memories
      function filterMemories() {
        const activeRarityButton = document.querySelector(
          '.rarity-group .filter-btn.active'
        ) as HTMLElement;
        const activeClassButton = document.querySelector(
          '.class-group .filter-btn.active'
        ) as HTMLElement;
        const rarityValue = activeRarityButton?.dataset.rarity || '';
        const classValue = activeClassButton?.dataset.class || '';

        allMemories.forEach(memory => {
          const matchesRarity =
            !rarityValue || memory.data.rarity.toUpperCase() === rarityValue.toUpperCase();
          const matchesClass = !classValue || memory.data.class === classValue;

          const isVisible = matchesRarity && matchesClass;
          memory.element.style.display = isVisible ? '' : 'none';
          memory.mobileElement.style.display = isVisible ? '' : 'none';
        });

        // Update row numbers after filtering
        updateRowNumbers();
      }

      // Sort memories
      function sortMemories(sortKey) {
        if (currentSortKey === sortKey) {
          isAscending = !isAscending;
        } else {
          currentSortKey = sortKey;
          isAscending = false;
        }

        // Update active button
        sortButtons.forEach(btn => btn.classList.remove('active'));
        document.querySelector(`[data-sort="${sortKey}"]`)?.classList.add('active');

        // Sort the memories
        const sortedMemories = [...allMemories].sort((a, b) => {
          const aVal = a.data[sortKey];
          const bVal = b.data[sortKey];

          if (typeof aVal === 'string') {
            return isAscending ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
          } else {
            return isAscending ? aVal - bVal : bVal - aVal;
          }
        });

        // Reorder DOM elements
        sortedMemories.forEach(memory => {
          memoryTableBody?.appendChild(memory.element);
          mobileCardsContainer?.appendChild(memory.mobileElement);
        });

        // Update row numbers after sorting
        updateRowNumbers();
      }

      // Sort memories by name (default)
      function sortMemoriesByName() {
        // Sort alphabetically by name (A-Z)
        const sortedMemories = [...allMemories].sort((a, b) => {
          return a.data.name.localeCompare(b.data.name);
        });

        // Reorder DOM elements
        sortedMemories.forEach(memory => {
          memoryTableBody?.appendChild(memory.element);
          mobileCardsContainer?.appendChild(memory.mobileElement);
        });

        // Update row numbers after sorting
        updateRowNumbers();
      }

      // Reset filters and sorting
      function resetTable() {
        // Reset rarity filter to "All"
        rarityFilterButtons.forEach(btn => btn.classList.remove('active'));
        document
          .querySelector('.rarity-group .filter-btn[data-rarity=""]')
          ?.classList.add('active');

        // Reset class filter to "All"
        classFilterButtons.forEach(btn => btn.classList.remove('active'));
        document.querySelector('.class-group .filter-btn[data-class=""]')?.classList.add('active');

        // Clear sorting - show alphabetical order
        currentSortKey = '';
        isAscending = false;
        sortButtons.forEach(btn => btn.classList.remove('active'));

        // Show all memories in alphabetical order
        allMemories.forEach(memory => {
          memory.element.style.display = '';
          memory.mobileElement.style.display = '';
        });

        // Sort alphabetically by name and append to DOM
        sortMemoriesByName();
      }

      // Add click handlers for navigation
      function addNavigationHandlers() {
        document.querySelectorAll('[data-url]').forEach(element => {
          element.addEventListener('click', function () {
            const url = this.getAttribute('data-url');
            if (url) {
              window.location.href = url;
            }
          });
        });
      }

      // Check if all required elements exist
      if (!memoryTableBody || !mobileCardsContainer || !resetButton) {
        console.error('Required elements not found');
        return;
      }

      // Initialize everything
      initializeMemories();

      // Event listeners for rarity filter buttons
      rarityFilterButtons.forEach(button => {
        button.addEventListener('click', function () {
          // Remove active class from all rarity buttons
          rarityFilterButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');
          // Filter memories
          filterMemories();
        });
      });

      // Add event listeners to class filter buttons
      classFilterButtons.forEach(button => {
        button.addEventListener('click', function () {
          // Remove active class from all class buttons
          classFilterButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');
          // Filter memories
          filterMemories();
        });
      });

      resetButton.addEventListener('click', resetTable);

      sortButtons.forEach(button => {
        button.addEventListener('click', function () {
          sortMemories(this.getAttribute('data-sort'));
        });
      });

      addNavigationHandlers();

      // Sort by name alphabetically by default
      sortMemoriesByName();
    });
  </script>
</ZoneNovaLayout>
