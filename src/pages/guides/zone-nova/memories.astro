---
// Import your layout
import ZoneNovaLayout from '../../../layouts/zone-nova/LandingLayout.astro';
import { Image } from 'astro:assets';

// Import memory data and utilities
import {
  ZONE_NOVA_MEMORIES,
  MEMORY_METADATA,
  getMemoriesByCharacter,
  getMemoryClass,
} from '../../../data/zone-nova/memories.js';
---

<ZoneNovaLayout
  title="Zone Nova Memory Database - GachaWiki"
  description="Sortable and filterable memory database for Zone Nova"
  gameTitle="Memory Database"
>
  <Fragment slot="head">
    {/* Import styles and add mobile card improvements */}
    {/* Removed memory image preload to reduce memory usage */}
    <style>
      /* Layout and filter bar */
      .page-flex {
        display: flex;
        gap: 2.5rem;
      }
      .main-content-container {
        width: 100%;
        display: flex;
        justify-content: center;
        padding: 0 2rem;
      }
      .content-wrapper {
        max-width: 1200px;
        width: 100%;
        margin: 0 auto;
      }
      .filter-bar {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        margin: 2rem auto 1.5rem auto;
        padding: 0 1rem;
        max-width: 1200px;
      }
      .filter-controls {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(255, 183, 77, 0.2);
      }
      .filter-row {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex-wrap: wrap;
        justify-content: flex-start;
      }
      .sort-controls {
        display: flex;
        gap: 0.8rem;
        align-items: center;
        flex-wrap: wrap;
        justify-content: center;
        padding: 1.2rem 1.5rem;
        background: rgba(0, 0, 0, 0.15);
        border-radius: 12px;
        border: 1px solid rgba(255, 183, 77, 0.15);
        margin-bottom: 1rem;
      }

      /* Rarity Filter Buttons */
      .rarity-filter-group {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        flex-wrap: wrap;
      }
      .rarity-filter-label {
        font-size: 1rem;
        color: #ffffff;
        font-weight: 700;
        margin-right: 0.75rem;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
        display: inline-block;
      }
      .rarity-filter-btn {
        padding: 0.4rem 0.7rem;
        border: 2px solid transparent;
        border-radius: 8px;
        font-size: 0.8rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        position: relative;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
      }
      .rarity-filter-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }
      .rarity-filter-btn.active {
        border-color: #ffe066 !important;
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
      }

      /* All Rarity Button */
      .rarity-filter-btn.all {
        background: linear-gradient(135deg, #66bb6a, #4caf50);
        color: #000;
        text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);
      }
      .rarity-filter-btn.all:hover {
        background: linear-gradient(135deg, #81c784, #66bb6a);
      }
      .rarity-filter-btn.all.active {
        color: #000 !important;
        text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);
      }

      /* SSR Rarity Button */
      .rarity-filter-btn.ssr {
        background: linear-gradient(135deg, #ffcc02, #e6ac00);
        color: #000;
        text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);
      }
      .rarity-filter-btn.ssr:hover {
        background: linear-gradient(135deg, #e6ac00, #cc9900);
      }
      .rarity-filter-btn.ssr.active {
        color: #000 !important;
        text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);
      }
      .rarity-filter-btn.ssr.active {
        background: linear-gradient(135deg, #cc9900, #b88600) !important;
      }

      /* SR Rarity Button */
      .rarity-filter-btn.sr {
        background: linear-gradient(135deg, #ab47bc, #8e24aa);
        color: #fff;
      }
      .rarity-filter-btn.sr:hover {
        background: linear-gradient(135deg, #8e24aa, #7b1fa2);
      }
      .rarity-filter-btn.sr.active {
        color: #fff !important;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
      }

      /* R Rarity Button */
      .rarity-filter-btn.r {
        background: linear-gradient(135deg, #8d6e63, #6d4c41);
        color: #fff;
      }
      .rarity-filter-btn.r:hover {
        background: linear-gradient(135deg, #6d4c41, #5d4037);
      }
      .rarity-filter-btn.r.active {
        color: #fff !important;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
      }

      /* Class Filter Buttons */
      .class-filter-group {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        flex-wrap: wrap;
      }
      .class-filter-label {
        font-size: 1rem;
        color: #ffffff;
        font-weight: 700;
        margin-right: 0.75rem;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
        display: inline-block;
      }
      .class-filter-btn {
        padding: 0.4rem 0.7rem;
        border: 2px solid transparent;
        border-radius: 8px;
        font-size: 0.8rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        position: relative;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        background: linear-gradient(135deg, #78909c, #607d8b);
        color: #fff;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
      }
      .class-filter-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        background: linear-gradient(135deg, #90a4ae, #78909c);
      }
      .class-filter-btn.active {
        border-color: #ffe066 !important;
        background: linear-gradient(135deg, #ffb74d, #ff9800) !important;
        color: #000 !important;
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(255, 152, 0, 0.3);
        text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);
      }
      .class-filter-btn.all {
        background: linear-gradient(135deg, #66bb6a, #4caf50);
      }
      .class-filter-btn.all.active {
        background: linear-gradient(135deg, #81c784, #66bb6a) !important;
        color: #000 !important;
        border-color: #ffe066 !important;
      }
      .rarity-filter-btn.r.active {
        background: linear-gradient(135deg, #424242, #212121) !important;
      }

      /* All Rarity Button */
      .rarity-filter-btn.all {
        background: linear-gradient(135deg, var(--rose-quartz), #e91e63);
        color: #fff;
      }
      .rarity-filter-btn.all:hover {
        background: linear-gradient(135deg, #d81b60, var(--rose-quartz));
      }
      .rarity-filter-btn.all.active {
        background: linear-gradient(135deg, #c2185b, #ad1457) !important;
      }

      /* Sort buttons */
      .sort-btn {
        padding: 0.8rem 1rem;
        background: var(--bg-primary);
        color: var(--text-secondary);
        border-radius: 12px;
        border: 2px solid var(--mocha-mousse);
        font-size: 0.9rem;
        cursor: pointer;
        min-height: 44px;
        min-width: 64px;
        touch-action: manipulation;
        -webkit-tap-highlight-color: transparent;
        transition: all 0.2s ease;
      }
      .sort-btn:hover {
        background: var(--bg-secondary);
        color: var(--text-primary);
        border-color: var(--amber-glow);
      }
      .sort-btn:focus {
        outline: 2px solid var(--amber-glow);
        outline-offset: 2px;
      }
      .sort-btn.active {
        background: var(--amber-glow);
        color: white;
        border-color: var(--amber-glow);
      }

      /* Reset button unique styling */
      .reset-btn {
        padding: 0.8rem 1.2rem;
        background: linear-gradient(135deg, var(--rose-quartz), #e91e63);
        color: white;
        border-radius: 12px;
        border: 2px solid var(--rose-quartz);
        font-size: 0.9rem;
        font-weight: 600;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(233, 30, 99, 0.3);
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        min-height: 44px;
        min-width: 80px;
        touch-action: manipulation;
        -webkit-tap-highlight-color: transparent;
      }
      .reset-btn:hover {
        background: linear-gradient(135deg, #d81b60, var(--rose-quartz));
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(233, 30, 99, 0.4);
        border-color: #d81b60;
      }
      .reset-btn:active {
        transform: translateY(0);
        box-shadow: 0 2px 6px rgba(233, 30, 99, 0.3);
      }
      /* Table styles */
      .memory-table-container {
        overflow-x: auto;
        margin: 1.5rem auto;
        padding: 0 1rem;
      }
      table.memory-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        background: var(--bg-primary);
        border-radius: 12px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
        font-family: 'Space Grotesk', sans-serif;
      }
      table.memory-table th,
      table.memory-table td {
        padding: 1rem 0.5rem;
        text-align: center;
        border-bottom: 1px solid var(--neutral-200);
      }
      table.memory-table th {
        background: var(--amber-glow);
        color: #222;
        font-weight: 700;
        font-size: 0.9rem;
        position: sticky;
        top: 0;
        z-index: 2;
      }
      .memory-img {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        object-fit: cover;
        border: 2px solid var(--amber-glow);
      }
      .rarity-badge,
      .element-badge,
      .type-badge {
        padding: 0.2rem 0.6rem;
        border-radius: 10px;
        font-size: 0.85rem;
        font-weight: 600;
      }
      /* Rarity badges use centralized Zone Nova badge system from zn-badge-colour.css */

      .element-badge.fire {
        background: var(--zn-badge-fire);
        color: var(--zn-badge-white);
      }
      .element-badge.ice {
        background: var(--zn-badge-ice);
        color: var(--zn-badge-white);
      }
      .element-badge.wind {
        background: var(--zn-badge-wind);
        color: var(--zn-badge-black);
      }
      .element-badge.holy {
        background: var(--zn-badge-holy);
        color: var(--zn-badge-black);
      }
      .element-badge.chaos {
        background: var(--zn-badge-chaos);
        color: var(--zn-badge-white);
      }

      .type-badge.buffer {
        background: var(--zn-badge-blue);
        color: var(--zn-badge-black);
      }
      .type-badge.offensive {
        background: var(--zn-badge-orange);
        color: var(--zn-badge-black);
      }
      .type-badge.defensive {
        background: var(--zn-badge-gray);
        color: var(--zn-badge-black);
      }
      .type-badge.special {
        background: var(--zn-badge-purple);
        color: var(--zn-badge-white);
      }
      .effects-cell {
        max-width: 300px;
        text-align: left;
        font-size: 0.8rem;
      }
      .effect-item {
        margin: 0.25rem 0;
        padding: 0.25rem;
        background: rgba(255, 183, 77, 0.1);
        border-radius: 4px;
      }
      /* Mobile card styles */
      .mobile-memory-card {
        background: var(--bg-primary, #232323);
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        padding: 1.5rem 1.2rem;
        margin-bottom: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        border: 2px solid var(--amber-glow, #ffe066);
        cursor: pointer;
        transition: all 0.2s ease;
        touch-action: manipulation;
        -webkit-tap-highlight-color: transparent;
      }
      .mobile-card-header {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      .mobile-memory-card img {
        width: 90px;
        height: 90px;
        border-radius: 16px;
        border: 3px solid var(--amber-glow, #ffe066);
        background: #fff;
        margin-bottom: 0;
        touch-action: manipulation;
      }
      .mobile-card-title-group {
        display: flex;
        flex-direction: column;
        gap: 0.2rem;
      }
      .mobile-memory-card h3 {
        margin: 0 0 0.2rem 0;
        font-size: 1.35rem;
        color: var(--amber-glow, #ffe066);
        font-weight: 700;
        letter-spacing: 0.5px;
        line-height: 1.2;
      }
      .mobile-card-badges {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.2rem;
        flex-wrap: wrap;
        align-items: center;
      }
      .mobile-memory-card .rarity-badge,
      .mobile-memory-card .element-badge,
      .mobile-memory-card .type-badge {
        font-size: 0.95em;
        padding: 0.18em 0.7em;
        border-radius: 8px;
        font-weight: 600;
        display: inline-block;
        margin: 0;
      }
      .mobile-card-stats {
        display: flex;
        gap: 1.5rem;
        margin-top: 0.7rem;
        font-size: 1.1em;
        color: var(--text-secondary, #e0e0e0);
        font-weight: 500;
        flex-wrap: wrap;
        justify-content: space-between;
      }
      .mobile-card-stats .stat-label {
        color: var(--amber-glow, #ffe066);
        font-weight: 700;
        margin-right: 0.2em;
      }
      .mobile-card-effects {
        margin-top: 0.75rem;
      }
      .mobile-card-effects h4 {
        margin: 0 0 0.5rem 0;
        font-size: 0.9rem;
        color: var(--amber-glow);
        font-weight: 600;
      }
      .mobile-effect-item {
        background: rgba(255, 183, 77, 0.1);
        padding: 0.5rem;
        border-radius: 6px;
        margin: 0.25rem 0;
        font-size: 0.85rem;
        color: var(--text-secondary);
      }

      /* Desktop: show table, hide mobile cards */
      .memory-table-container {
        display: block;
      }
      .mobile-card-view {
        display: none;
      }

      /* Mobile: show cards, hide table */
      @media (max-width: 768px) {
        .memory-table-container {
          display: none !important;
        }
        .mobile-card-view {
          display: block !important;
        }
        .filter-bar {
          gap: 1.2rem;
          padding: 0 0.5rem;
        }
        .filter-controls {
          gap: 1rem;
          padding: 1.2rem;
        }
        .filter-row {
          justify-content: center;
          flex-direction: column;
          align-items: center;
          gap: 1rem;
        }
        .sort-controls {
          padding: 1rem;
          gap: 1rem;
          flex-direction: column;
          margin-bottom: 1.5rem;
        }
        .sort-controls span {
          margin-bottom: 0.5rem;
          font-size: 1rem;
        }
        .rarity-filter-group,
        .class-filter-group {
          justify-content: center;
          gap: 0.8rem;
          width: 100%;
          flex-wrap: wrap;
        }
        .rarity-filter-label,
        .class-filter-label {
          width: 100%;
          text-align: center;
          margin-right: 0;
          margin-bottom: 0.5rem;
          font-size: 1rem;
          color: #ffffff !important;
          text-shadow: 0 1px 2px rgba(0, 0, 0, 0.7) !important;
        }
        .rarity-filter-btn,
        .class-filter-btn {
          padding: 0.8rem 1.2rem;
          font-size: 0.9rem;
          min-height: 44px;
          min-width: 64px;
          border-radius: 12px;
          touch-action: manipulation;
          -webkit-tap-highlight-color: transparent;
          letter-spacing: 0.5px;
        }
      }
    </style>
  </Fragment>

  <section class="page-flex">
    <div class="main-content-container">
      <div class="content-wrapper">
        {/* <!-- Filter Bar --> */}
        <div class="filter-bar">
          <div class="filter-controls">
            <div class="filter-row">
              <div class="rarity-filter-group">
                <span class="rarity-filter-label">Rarity:</span>
                <button class="rarity-filter-btn all active" data-rarity="">All</button>
                <button class="rarity-filter-btn ssr" data-rarity="SSR">SSR</button>
                <button class="rarity-filter-btn sr" data-rarity="SR">SR</button>
                <button class="rarity-filter-btn r" data-rarity="R">R</button>
              </div>
            </div>
            <div class="filter-row">
              <div class="class-filter-group">
                <span class="class-filter-label">Class:</span>
                <button class="class-filter-btn all active" data-class="">All</button>
                {
                  MEMORY_METADATA.classes.map(className => (
                    <button class="class-filter-btn" data-class={className}>
                      {className}
                    </button>
                  ))
                }
              </div>
            </div>
          </div>
          <div class="sort-controls">
            <span style="color: #fff; font-weight: 600; margin-right: 0.5rem;">Sort by:</span>
            <button class="sort-btn" data-sort="hp">HP</button>
            <button class="sort-btn" data-sort="attack">ATK</button>
            <button class="sort-btn" data-sort="defense">DEF</button>
            <button class="reset-btn" id="reset-table">Reset All</button>
          </div>
        </div>

        {/* <!-- Desktop table view --> */}
        <div class="memory-table-container">
          <table class="memory-table">
            <thead>
              <tr>
                <th>#</th>
                <th>Image</th>
                <th>Name</th>
                <th>Rarity</th>
                <th>HP</th>
                <th>Attack</th>
                <th>Defense</th>
              </tr>
            </thead>
            <tbody id="memory-table-body">
              {
                ZONE_NOVA_MEMORIES.map((memory, idx) => (
                  <tr
                    data-memory-id={memory.id}
                    data-slug={memory.slug}
                    data-url={memory.detailUrl}
                    data-class={getMemoryClass(memory) || ''}
                    style="cursor:pointer;"
                  >
                    <td>{idx + 1}</td>
                    <td>
                      <Image
                        src={memory.image}
                        alt={memory.name}
                        class="memory-img"
                        loading="lazy"
                        width={60}
                        height={60}
                      />
                    </td>
                    <td>{memory.name}</td>
                    <td>
                      <span
                        class={`rarity-badge ${memory.rarity.toLowerCase()}`}
                        data-sort-key="rarity"
                      >
                        {memory.rarity}
                      </span>
                    </td>
                    <td data-sort-key="hp">{memory.stats.hp.toLocaleString()}</td>
                    <td data-sort-key="attack">{memory.stats.attack.toLocaleString()}</td>
                    <td data-sort-key="defense">{memory.stats.defense.toLocaleString()}</td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>

        {/* <!-- Mobile card view container --> */}
        <div class="mobile-card-view" id="mobile-cards-container">
          {
            ZONE_NOVA_MEMORIES.map(memory => (
              <div
                class="mobile-memory-card"
                data-memory-id={memory.id}
                data-slug={memory.slug}
                data-url={memory.detailUrl}
                data-class={getMemoryClass(memory) || ''}
                style="cursor:pointer;"
              >
                <div class="mobile-card-header">
                  <Image
                    src={memory.image}
                    alt={memory.name}
                    class="memory-img"
                    width={80}
                    height={80}
                  />
                  <div class="mobile-card-title-group">
                    <h3>{memory.name}</h3>
                    <div class="mobile-card-badges">
                      <span class={`rarity-badge ${memory.rarity.toLowerCase()}`}>
                        {memory.rarity}
                      </span>
                    </div>
                  </div>
                </div>
                <div class="mobile-card-stats">
                  <div>
                    <span class="stat-label">HP:</span> {memory.stats.hp.toLocaleString()}
                  </div>
                  <div>
                    <span class="stat-label">ATK:</span> {memory.stats.attack.toLocaleString()}
                  </div>
                  <div>
                    <span class="stat-label">DEF:</span> {memory.stats.defense.toLocaleString()}
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </section>

  <script>
    // Memory database functionality
    document.addEventListener('DOMContentLoaded', function () {
      const memoryTableBody = document.getElementById('memory-table-body');
      const mobileCardsContainer = document.getElementById('mobile-cards-container');
      const rarityFilterButtons = document.querySelectorAll('.rarity-filter-btn');
      const classFilterButtons = document.querySelectorAll('.class-filter-btn');
      const resetButton = document.getElementById('reset-table');
      const sortButtons = document.querySelectorAll('.sort-btn');

      let currentSortKey = '';
      let isAscending = false;
      let allMemories: any[] = [];

      // Initialize memories data
      function initializeMemories() {
        const tableRows = document.querySelectorAll('#memory-table-body tr');
        const mobileCards = document.querySelectorAll('.mobile-memory-card');

        allMemories = Array.from(tableRows).map((row, index) => {
          const mobileCard = mobileCards[index];
          const tableRow = row as HTMLTableRowElement;
          return {
            element: row,
            mobileElement: mobileCard,
            data: {
              rarity: row.querySelector('[data-sort-key="rarity"]')?.textContent?.trim() || '',
              class: (row as HTMLElement).dataset.class || '',
              name: tableRow.cells[2]?.textContent?.toLowerCase() || '',
              hp: parseInt(
                row.querySelector('[data-sort-key="hp"]')?.textContent?.replace(/,/g, '') || '0'
              ),
              attack: parseInt(
                row.querySelector('[data-sort-key="attack"]')?.textContent?.replace(/,/g, '') || '0'
              ),
              defense: parseInt(
                row.querySelector('[data-sort-key="defense"]')?.textContent?.replace(/,/g, '') ||
                  '0'
              ),
            },
          };
        });
      }

      // Update row numbers for visible rows only
      function updateRowNumbers() {
        let visibleCount = 0;
        const visibleRows = Array.from(memoryTableBody?.children || []).filter(
          row => (row as HTMLElement).style.display !== 'none'
        );

        visibleRows.forEach(row => {
          visibleCount++;
          (row as HTMLTableRowElement).cells[0].textContent = String(visibleCount);
        });
      }

      // Filter memories
      function filterMemories() {
        const activeRarityButton = document.querySelector(
          '.rarity-filter-btn.active'
        ) as HTMLElement;
        const activeClassButton = document.querySelector('.class-filter-btn.active') as HTMLElement;
        const rarityValue = activeRarityButton?.dataset.rarity || '';
        const classValue = activeClassButton?.dataset.class || '';

        allMemories.forEach(memory => {
          const matchesRarity =
            !rarityValue || memory.data.rarity.toUpperCase() === rarityValue.toUpperCase();
          const matchesClass = !classValue || memory.data.class === classValue;

          const isVisible = matchesRarity && matchesClass;
          memory.element.style.display = isVisible ? '' : 'none';
          memory.mobileElement.style.display = isVisible ? '' : 'none';
        });

        // Update row numbers after filtering
        updateRowNumbers();
      }

      // Sort memories
      function sortMemories(sortKey) {
        if (currentSortKey === sortKey) {
          isAscending = !isAscending;
        } else {
          currentSortKey = sortKey;
          isAscending = false;
        }

        // Update active button
        sortButtons.forEach(btn => btn.classList.remove('active'));
        document.querySelector(`[data-sort="${sortKey}"]`)?.classList.add('active');

        // Sort the memories
        const sortedMemories = [...allMemories].sort((a, b) => {
          const aVal = a.data[sortKey];
          const bVal = b.data[sortKey];

          if (typeof aVal === 'string') {
            return isAscending ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
          } else {
            return isAscending ? aVal - bVal : bVal - aVal;
          }
        });

        // Reorder DOM elements
        sortedMemories.forEach(memory => {
          memoryTableBody?.appendChild(memory.element);
          mobileCardsContainer?.appendChild(memory.mobileElement);
        });

        // Update row numbers after sorting
        updateRowNumbers();
      }

      // Sort memories by name (default)
      function sortMemoriesByName() {
        // Sort alphabetically by name (A-Z)
        const sortedMemories = [...allMemories].sort((a, b) => {
          return a.data.name.localeCompare(b.data.name);
        });

        // Reorder DOM elements
        sortedMemories.forEach(memory => {
          memoryTableBody?.appendChild(memory.element);
          mobileCardsContainer?.appendChild(memory.mobileElement);
        });

        // Update row numbers after sorting
        updateRowNumbers();
      }

      // Reset filters and sorting
      function resetTable() {
        // Reset rarity filter to "All"
        rarityFilterButtons.forEach(btn => btn.classList.remove('active'));
        document.querySelector('.rarity-filter-btn.all')?.classList.add('active');

        // Reset class filter to "All"
        classFilterButtons.forEach(btn => btn.classList.remove('active'));
        document.querySelector('.class-filter-btn.all')?.classList.add('active');

        // Clear sorting - show alphabetical order
        currentSortKey = '';
        isAscending = false;
        sortButtons.forEach(btn => btn.classList.remove('active'));

        // Show all memories in alphabetical order
        allMemories.forEach(memory => {
          memory.element.style.display = '';
          memory.mobileElement.style.display = '';
        });

        // Sort alphabetically by name and append to DOM
        sortMemoriesByName();
      }

      // Add click handlers for navigation
      function addNavigationHandlers() {
        document.querySelectorAll('[data-url]').forEach(element => {
          element.addEventListener('click', function () {
            const url = this.getAttribute('data-url');
            if (url) {
              window.location.href = url;
            }
          });
        });
      }

      // Check if all required elements exist
      if (!memoryTableBody || !mobileCardsContainer || !resetButton) {
        console.error('Required elements not found');
        return;
      }

      // Initialize everything
      initializeMemories();

      // Event listeners for rarity filter buttons
      rarityFilterButtons.forEach(button => {
        button.addEventListener('click', function () {
          // Remove active class from all rarity buttons
          rarityFilterButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');
          // Filter memories
          filterMemories();
        });
      });

      // Add event listeners to class filter buttons
      classFilterButtons.forEach(button => {
        button.addEventListener('click', function () {
          // Remove active class from all class buttons
          classFilterButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');
          // Filter memories
          filterMemories();
        });
      });

      resetButton.addEventListener('click', resetTable);

      sortButtons.forEach(button => {
        button.addEventListener('click', function () {
          sortMemories(this.getAttribute('data-sort'));
        });
      });

      addNavigationHandlers();

      // Sort by name alphabetically by default
      sortMemoriesByName();
    });
  </script>
</ZoneNovaLayout>
