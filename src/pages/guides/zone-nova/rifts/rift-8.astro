---
import ZoneNovaLayout from '../../../../layouts/zone-nova/Layout.astro';
import FormattedDate from '../../../../components/FormattedDate.astro';
import { rift8Data } from '../../../../data/zone-nova/rifts/rift-8.js';
import { getDynamicRiftStatus } from '../../../../data/zone-nova/rifts.js';

// Use the imported rift data with dynamic status
const riftData = {
  ...rift8Data,
  status: getDynamicRiftStatus(rift8Data),
};
---

<ZoneNovaLayout
  title="Rift VIII - Zone Nova Space-Time Rifts - GachaWiki"
  description="Detailed law effects and mechanics for Rift VIII in Zone Nova"
  gameTitle="Rift VIII"
>
  <!-- Rift Overview -->
  <section class="content-section">
    <div class="rift-overview">
      <div class="rift-header">
        <h1 class="rift-title">{riftData.name}</h1>
        <div class="rift-timer" id="rift-timer">Loading...</div>
      </div>

      <p class="rift-description">{riftData.fullDescription}</p>

      <div class="rift-meta">
        <div class="meta-item">
          <span class="meta-label">Status:</span>
          <span class={`status-badge status-${riftData.status.toLowerCase()}`}
            >{riftData.status.toUpperCase()}</span
          >
        </div>

        {
          riftData.eventPeriod && (
            <div class="meta-item">
              <span class="meta-label">Event Period:</span>
              <span class="meta-value">{riftData.eventPeriod}</span>
            </div>
          )
        }

        <div class="meta-item">
          <span class="meta-label">Effects:</span>
          <span class="meta-value">{riftData.lawEffects.length} effects</span>
        </div>

        <div class="meta-item">
          <span class="meta-label">Focus:</span>
          <span class="meta-value">{riftData.focus}</span>
        </div>
      </div>
    </div>
  </section>

  <!-- Effects Section -->
  <section class="content-section">
    <h2 class="section-title">Effects</h2>

    {
      riftData.lawEffects.map((effect, index) => (
        <div class="law-effect-card">
          <div class="effect-number">{index + 1}</div>
          <div class="effect-content">
            <p
              set:html={effect
                .replace(/\[(.*?)\]/g, '<strong>[$1]</strong>')
                .replace(/(\d+%)/g, '<strong>$1</strong>')}
            />
          </div>
        </div>
      ))
    }
  </section>

  <!-- Strategy Section -->
  <section class="content-section">
    <h2 class="section-title">Strategic Recommendations</h2>

    <div class="strategy-grid">
      <div class="strategy-card">
        <h3>Guardian Compositions</h3>
        <p>
          Build teams around Guardian characters like <strong>Thor</strong>, <strong
            >Guinevere</strong
          >, and <strong>Penny</strong>. Their ultimate skills provide stacking energy recovery
          bonuses that enable sustained combat and frequent ultimate rotations.
        </p>
      </div>

      <div class="strategy-card">
        <h3>Shield Synergy</h3>
        <p>
          Characters with shield abilities gain significant damage bonuses. Consider pairing shield
          providers with high-damage dealers to maximize the <strong>30% damage increase</strong> from
          Shield Combat Enhancement.
        </p>
      </div>

      <div class="strategy-card">
        <h3>DoT Stacking</h3>
        <p>
          Focus on characters with continuous damage effects like <strong>Horus</strong>, <strong
            >Cleopatra</strong
          >, and <strong>Hera</strong>. Stack 10+ DoT effects on enemies to trigger the <strong
            >50% increased damage</strong
          > threshold for massive damage amplification.
        </p>
      </div>
    </div>
  </section>

  <script define:vars={{ riftData }}>
    document.addEventListener('DOMContentLoaded', function () {
      const endTime = new Date(riftData.endDate).getTime();

      function updateTimer() {
        const now = new Date().getTime();
        const timeLeft = endTime - now;
        const timerElement = document.getElementById('rift-timer');

        if (timeLeft > 0) {
          const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
          const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));

          if (days > 0) {
            timerElement.textContent = `${days}d ${hours}h remaining`;
          } else if (hours > 0) {
            timerElement.textContent = `${hours}h ${minutes}m remaining`;
          } else {
            timerElement.textContent = `${minutes}m remaining`;
          }
        } else {
          timerElement.textContent = 'Event Ended';
          timerElement.classList.add('timer-ended');
        }
      }

      updateTimer();
      setInterval(updateTimer, 60000);
    });
  </script>
</ZoneNovaLayout>
