---
import { Image } from 'astro:assets';
import CharacterRankingsLayout from '../../../layouts/zone-nova/CharacterRankingsLayout.astro';
import { ZONE_NOVA_CHARACTERS } from '../../../data/zone-nova/characters.js';
import {
  rankings,
  overallAnalysis,
  totalCharacters,
  statNames,
  filteredGroups,
  sortedArrays,
  viewIds,
} from '../../../data/zone-nova/character-rankings.js';
import CharacterRankingCard from '../../../components/zone-nova/CharacterRankingCard.astro';
---

<CharacterRankingsLayout
  title="Character Rankings - Zone Nova"
  description="View character stat rankings for HP, ATK, and DEF in Zone Nova"
  gameTitle="Character Rankings"
>
  <section class="content-section">
    <div class="rankings-intro">
      <h2 class="section-title">Character Stat Rankings</h2>
      <p class="intro-text">
        See how each character ranks in key combat stats among all {totalCharacters} characters
      </p>
      <p class="level-note">All stats shown at Level 80 (current max level)</p>
    </div>

    <!-- Character Selector -->
    <div class="character-selector">
      <h3 class="selector-title">Select Character</h3>

      <!-- Filters and Sort Controls -->
      <div class="filter-bar">
        <div class="filter-controls">
          <select class="filter-select" id="role-filter">
            <option value="">Role</option>
            <option value="Tank">Tank</option>
            <option value="DPS">DPS</option>
            <option value="Buffer">Buffer</option>
            <option value="Debuffer">Debuffer</option>
            <option value="Healer">Healer</option>
          </select>
          <select class="filter-select" id="class-filter">
            <option value="">Class</option>
            <option value="Guardian">Guardian</option>
            <option value="Warrior">Warrior</option>
            <option value="Rogue">Rogue</option>
            <option value="Mage">Mage</option>
            <option value="Buffer">Buffer</option>
            <option value="Debuffer">Debuffer</option>
            <option value="Healer">Healer</option>
          </select>
          <select class="filter-select" id="rarity-filter">
            <option value="">Rarity</option>
            <option value="SSR">SSR</option>
            <option value="SR">SR</option>
            <option value="R">R</option>
          </select>
          <select class="filter-select" id="element-filter">
            <option value="">Element</option>
            <option value="Fire">Fire</option>
            <option value="Ice">Ice</option>
            <option value="Wind">Wind</option>
            <option value="Holy">Holy</option>
            <option value="Chaos">Chaos</option>
          </select>
        </div>
        <div class="sort-controls">
          <button class="sort-btn" data-sort="hp">HP</button>
          <button class="sort-btn" data-sort="attack">ATK</button>
          <button class="sort-btn" data-sort="defense">DEF</button>
          <button class="sort-btn" data-sort="critRate">CRIT</button>
          <button class="reset-btn" id="clear-filters">Reset</button>
        </div>
      </div>

      <!-- Pre-rendered Character Views for Instant Filtering -->
      <div class="character-views-container">
        <!-- View: All Characters (Default) -->
        <div id="view-all" class="character-view">
          <div class="character-grid" id="character-grid">
            {
              ZONE_NOVA_CHARACTERS.sort(
                (a: any, b: any) =>
                  overallAnalysis[a.id].overallRank - overallAnalysis[b.id].overallRank
              ).map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <!-- View: By Role -->
        <div id="view-tank" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byRole.tank.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-dps" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byRole.dps.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-buffer" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byRole.buffer.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-debuffer" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byRole.debuffer.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-healer" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byRole.healer.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <!-- View: By Rarity -->
        <div id="view-ssr" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byRarity.ssr.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-sr" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byRarity.sr.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-r" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byRarity.r.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <!-- View: By Element -->
        <div id="view-fire" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byElement.fire.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-ice" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byElement.ice.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-wind" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byElement.wind.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-holy" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byElement.holy.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <div id="view-chaos" class="character-view hidden">
          <div class="character-grid">
            {
              filteredGroups.byElement.chaos.map((char: any) => (
                <CharacterRankingCard
                  character={char}
                  rank={overallAnalysis[char.id].overallRank}
                />
              ))
            }
          </div>
        </div>

        <!-- View: Sorted by HP (Descending) -->
        <div id="sort-hp-desc" class="character-view hidden">
          <div class="character-grid">
            {
              sortedArrays.hp.desc.map((char: any, index: number) => (
                <CharacterRankingCard character={char} rank={index + 1} />
              ))
            }
          </div>
        </div>

        <!-- View: Sorted by HP (Ascending) -->
        <div id="sort-hp-asc" class="character-view hidden">
          <div class="character-grid">
            {
              sortedArrays.hp.asc.map((char: any, index: number) => (
                <CharacterRankingCard character={char} rank={index + 1} />
              ))
            }
          </div>
        </div>

        <!-- View: Sorted by Attack (Descending) -->
        <div id="sort-attack-desc" class="character-view hidden">
          <div class="character-grid">
            {
              sortedArrays.attack.desc.map((char: any, index: number) => (
                <CharacterRankingCard character={char} rank={index + 1} />
              ))
            }
          </div>
        </div>

        <!-- View: Sorted by Attack (Ascending) -->
        <div id="sort-attack-asc" class="character-view hidden">
          <div class="character-grid">
            {
              sortedArrays.attack.asc.map((char: any, index: number) => (
                <CharacterRankingCard character={char} rank={index + 1} />
              ))
            }
          </div>
        </div>

        <!-- View: Sorted by Defense (Descending) -->
        <div id="sort-defense-desc" class="character-view hidden">
          <div class="character-grid">
            {
              sortedArrays.defense.desc.map((char: any, index: number) => (
                <CharacterRankingCard character={char} rank={index + 1} />
              ))
            }
          </div>
        </div>

        <!-- View: Sorted by Defense (Ascending) -->
        <div id="sort-defense-asc" class="character-view hidden">
          <div class="character-grid">
            {
              sortedArrays.defense.asc.map((char: any, index: number) => (
                <CharacterRankingCard character={char} rank={index + 1} />
              ))
            }
          </div>
        </div>

        <!-- View: Sorted by Crit Rate (Descending) -->
        <div id="sort-critRate-desc" class="character-view hidden">
          <div class="character-grid">
            {
              sortedArrays.critRate.desc.map((char: any, index: number) => (
                <CharacterRankingCard character={char} rank={index + 1} />
              ))
            }
          </div>
        </div>

        <!-- View: Sorted by Crit Rate (Ascending) -->
        <div id="sort-critRate-asc" class="character-view hidden">
          <div class="character-grid">
            {
              sortedArrays.critRate.asc.map((char: any, index: number) => (
                <CharacterRankingCard character={char} rank={index + 1} />
              ))
            }
          </div>
        </div>
      </div>
    </div>

    <!-- Rankings Display -->
    <div id="rankings-display" class="rankings-display">
      <div id="character-info" class="character-info">
        <img id="character-image" class="character-image" />
        <h3 id="character-name" class="character-name"></h3>
        <p id="character-class" class="character-details"></p>
      </div>

      <div class="rankings-container">
        <h3 class="rankings-title">Stat Rankings</h3>

        <div id="rankings-grid" class="rankings-grid">
          {
            Object.keys(statNames)
              .filter(statKey => statKey !== 'critRate')
              .map(statKey => (
                <div class="ranking-card">
                  <h4 class="ranking-card-title">{statNames[statKey]}</h4>
                  <div class={`rank-display rank-${statKey}`} />
                  <div class={`rank-total rank-${statKey}-total`} />
                  <div class={`stat-value stat-${statKey}`} />
                </div>
              ))
          }
          <!-- Crit Rate card - conditionally shown -->
          <div class="ranking-card crit-rate-card hidden" id="crit-rate-card">
            <h4 class="ranking-card-title">CRIT RATE</h4>
            <div class="crit-message">Has Crit Rate</div>
            <div class="stat-value stat-critRate"></div>
          </div>
        </div>
      </div>

      <!-- Character Performance Analysis -->
      <div id="character-analysis" class="character-analysis hidden">
        <h4 class="character-analysis-title">Character Performance Breakdown</h4>
        <div class="performance-summary">
          <div class="summary-stats">
            <div class="summary-stat">
              <span class="summary-label">Overall Rank:</span>
              <span class="summary-value" id="overall-rank"></span>
              <span class="summary-note">based on 3 core stats</span>
            </div>
            <div class="summary-stat">
              <span class="summary-label">Top 3 Stats:</span>
              <div class="summary-stat-details">
                <span class="summary-count" id="top3-count"></span>
                <div class="stat-badges" id="top3-stats"></div>
              </div>
            </div>
            <div class="summary-stat">
              <span class="summary-label">Top 10 Stats:</span>
              <div class="summary-stat-details">
                <span class="summary-count" id="top10-count"></span>
                <div class="stat-badges" id="top10-stats"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script
    is:inline
    define:vars={{
      characters: ZONE_NOVA_CHARACTERS,
      rankings,
      overallAnalysis,
      statNames,
      totalCharacters,
    }}
  >
    // Pass data to global scope for the external script
    window.zoneNovaRankingsData = {
      characters,
      rankings,
      overallAnalysis,
      statNames,
      totalCharacters,
    };
  </script>
  <script src="/scripts/character-rankings/zone-nova-rankings.js" is:inline></script>
</CharacterRankingsLayout>
