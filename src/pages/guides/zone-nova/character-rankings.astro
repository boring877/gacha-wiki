---
import CharacterRankingsLayout from '../../../layouts/zone-nova/CharacterRankingsLayout.astro';
import { ZONE_NOVA_CHARACTERS } from '../../../data/zone-nova/characters.js';

// Helper function to parse stat values
function parseStatValue(value: any): number {
  return typeof value === 'string' ? parseFloat(value.replace(/[,%]/g, '')) || 0 : value || 0;
}

// Calculate rankings for key stats
function calculateRankings() {
  const stats = ['hp', 'attack', 'defense', 'critRate'];
  const rankings = {};

  stats.forEach(statKey => {
    const sorted = [...ZONE_NOVA_CHARACTERS]
      .filter(char => char.stats[statKey] !== undefined)
      .sort((a, b) => parseStatValue(b.stats[statKey]) - parseStatValue(a.stats[statKey]));

    rankings[statKey] = {};
    let currentRank = 1;

    sorted.forEach((char, index) => {
      const currentVal = parseStatValue(char.stats[statKey]);
      const prevVal = index > 0 ? parseStatValue(sorted[index - 1].stats[statKey]) : null;

      rankings[statKey][char.id] =
        index > 0 && currentVal === prevVal ? rankings[statKey][sorted[index - 1].id] : currentRank;

      currentRank = index + 2;
    });
  });

  return rankings;
}

// Calculate overall ranking analysis (3 core stats)
function calculateOverallAnalysis() {
  const coreStats = ['hp', 'attack', 'defense'];
  const rankings = calculateRankings();
  const analysis = {};

  ZONE_NOVA_CHARACTERS.forEach(char => {
    let totalRankScore = 0;
    let top3Count = 0;
    let top10Count = 0;
    const statBreakdown = {};

    coreStats.forEach(statKey => {
      const rank = rankings[statKey][char.id];
      statBreakdown[statKey] = rank;
      totalRankScore += rank;

      if (rank <= 3) top3Count++;
      if (rank <= 10) top10Count++;
    });

    analysis[char.id] = {
      character: char,
      totalRankScore,
      top3Count,
      top10Count,
      statBreakdown,
    };
  });

  const sortedCharacters = Object.values(analysis).sort(
    (a: any, b: any) => a.totalRankScore - b.totalRankScore
  );

  sortedCharacters.forEach((entry: any, index) => {
    analysis[entry.character.id].overallRank = index + 1;
  });

  return analysis;
}

const rankings = calculateRankings();
const overallAnalysis = calculateOverallAnalysis();
const totalCharacters = ZONE_NOVA_CHARACTERS.length;

// Stat display names
const statNames = {
  hp: 'HP',
  attack: 'ATK',
  defense: 'DEF',
  critRate: 'CRIT',
};
---

<CharacterRankingsLayout
  title="Character Rankings - Zone Nova"
  description="View character stat rankings for HP, ATK, and DEF in Zone Nova"
  gameTitle="Character Rankings"
>
  <section class="content-section">
    <div class="rankings-intro">
      <h2 class="section-title">Character Stat Rankings</h2>
      <p class="intro-text">
        See how each character ranks in key combat stats among all {totalCharacters} characters
      </p>
      <p class="level-note">All stats shown at Level 80 (current max level)</p>
    </div>

    <!-- Character Selector -->
    <div class="character-selector">
      <h3 class="selector-title">Select Character</h3>

      <!-- Filters and Sort Controls -->
      <div class="filter-bar">
        <div class="filter-controls">
          <select class="filter-select" id="role-filter">
            <option value="">Role</option>
            <option value="Tank">Tank</option>
            <option value="DPS">DPS</option>
            <option value="Buffer">Buffer</option>
            <option value="Debuffer">Debuffer</option>
            <option value="Healer">Healer</option>
          </select>
          <select class="filter-select" id="class-filter">
            <option value="">Class</option>
            <option value="Guardian">Guardian</option>
            <option value="Warrior">Warrior</option>
            <option value="Rogue">Rogue</option>
            <option value="Mage">Mage</option>
            <option value="Buffer">Buffer</option>
            <option value="Debuffer">Debuffer</option>
            <option value="Healer">Healer</option>
          </select>
          <select class="filter-select" id="rarity-filter">
            <option value="">Rarity</option>
            <option value="SSR">SSR</option>
            <option value="SR">SR</option>
            <option value="R">R</option>
          </select>
          <select class="filter-select" id="element-filter">
            <option value="">Element</option>
            <option value="Fire">Fire</option>
            <option value="Ice">Ice</option>
            <option value="Wind">Wind</option>
            <option value="Holy">Holy</option>
            <option value="Chaos">Chaos</option>
          </select>
        </div>
        <div class="sort-controls">
          <button class="sort-btn" data-sort="hp">HP</button>
          <button class="sort-btn" data-sort="attack">ATK</button>
          <button class="sort-btn" data-sort="defense">DEF</button>
          <button class="sort-btn" data-sort="critRate">CRIT</button>
          <button class="reset-btn" id="clear-filters">Reset</button>
        </div>
      </div>

      <!-- Character Grid -->
      <div class="character-grid" id="character-grid">
        {
          ZONE_NOVA_CHARACTERS.sort(
            (a: any, b: any) =>
              overallAnalysis[a.id].overallRank - overallAnalysis[b.id].overallRank
          ).map((char: any) => (
            <button class="character-select-card" data-character-id={char.id}>
              <div class="character-rank-number">{overallAnalysis[char.id].overallRank}</div>
              <img
                src={char.image}
                alt={char.name}
                class="character-portrait"
                width="80"
                height="80"
                loading="lazy"
              />
              <div class="character-info">
                <h3>{char.name}</h3>
                <div class="character-badges">
                  <span class={`rarity-badge ${char.rarity.toLowerCase()}`}>{char.rarity}</span>
                  <span class={`class-badge ${char.class.toLowerCase().replace(' ', '-')}`}>
                    {char.class}
                  </span>
                </div>
                <div class="character-stats">
                  <div class="stat-item">
                    <span class="stat-label">HP</span>
                    <span class="stat-value">
                      {typeof char.stats.hp === 'string'
                        ? char.stats.hp
                        : char.stats.hp?.toLocaleString() || 'N/A'}
                    </span>
                  </div>
                  <div class="stat-item">
                    <span class="stat-label">ATK</span>
                    <span class="stat-value">
                      {typeof char.stats.attack === 'string'
                        ? char.stats.attack
                        : char.stats.attack?.toLocaleString() || 'N/A'}
                    </span>
                  </div>
                  <div class="stat-item">
                    <span class="stat-label">DEF</span>
                    <span class="stat-value">
                      {typeof char.stats.defense === 'string'
                        ? char.stats.defense
                        : char.stats.defense?.toLocaleString() || 'N/A'}
                    </span>
                  </div>
                  {char.stats.critRate !== undefined && (
                    <div class="stat-item crit-rate">
                      <span class="stat-label">CRIT</span>
                      <span class="stat-value">
                        {typeof char.stats.critRate === 'string'
                          ? char.stats.critRate
                          : `${char.stats.critRate}%`}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </button>
          ))
        }
      </div>
    </div>

    <!-- Rankings Display -->
    <div id="rankings-display" class="rankings-display">
      <div id="character-info" class="character-info">
        <img id="character-image" class="character-image" />
        <h3 id="character-name" class="character-name"></h3>
        <p id="character-class" class="character-details"></p>
      </div>

      <div class="rankings-container">
        <h3 class="rankings-title">Stat Rankings</h3>

        <div id="rankings-grid" class="rankings-grid">
          {
            Object.keys(statNames)
              .filter(statKey => statKey !== 'critRate')
              .map(statKey => (
                <div class="ranking-card">
                  <h4 class="ranking-card-title">{statNames[statKey]}</h4>
                  <div class={`rank-display rank-${statKey}`} />
                  <div class={`rank-total rank-${statKey}-total`} />
                  <div class={`stat-value stat-${statKey}`} />
                </div>
              ))
          }
          <!-- Crit Rate card - conditionally shown -->
          <div class="ranking-card crit-rate-card hidden" id="crit-rate-card">
            <h4 class="ranking-card-title">CRIT RATE</h4>
            <div class="crit-message">Has Crit Rate</div>
            <div class="stat-value stat-critRate"></div>
          </div>
        </div>
      </div>

      <!-- Character Performance Analysis -->
      <div id="character-analysis" class="character-analysis hidden">
        <h4 class="character-analysis-title">Character Performance Breakdown</h4>
        <div class="performance-summary">
          <div class="summary-stats">
            <div class="summary-stat">
              <span class="summary-label">Overall Rank:</span>
              <span class="summary-value" id="overall-rank"></span>
              <span class="summary-note">based on 3 core stats</span>
            </div>
            <div class="summary-stat">
              <span class="summary-label">Top 3 Stats:</span>
              <div class="summary-stat-details">
                <span class="summary-count" id="top3-count"></span>
                <div class="stat-badges" id="top3-stats"></div>
              </div>
            </div>
            <div class="summary-stat">
              <span class="summary-label">Top 10 Stats:</span>
              <div class="summary-stat-details">
                <span class="summary-count" id="top10-count"></span>
                <div class="stat-badges" id="top10-stats"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Back to Database Link -->
    <div class="back-button-container">
      <a href="/guides/zone-nova/characters/" class="back-button"> ← Back to Character Database </a>
    </div>
  </section>

  <script
    is:inline
    define:vars={{
      characters: ZONE_NOVA_CHARACTERS,
      rankings,
      overallAnalysis,
      statNames,
      totalCharacters,
    }}
  >
    document.addEventListener('DOMContentLoaded', () => {
      // Helper function to parse stat values (client-side)
      function parseStatValue(value) {
        return typeof value === 'string' ? parseFloat(value.replace(/[,%]/g, '')) || 0 : value || 0;
      }

      // Cache DOM elements
      const elements = {
        characterCards: document.querySelectorAll('.character-select-card'),
        roleFilter: document.getElementById('role-filter'),
        classFilter: document.getElementById('class-filter'),
        rarityFilter: document.getElementById('rarity-filter'),
        elementFilter: document.getElementById('element-filter'),
        resetBtn: document.getElementById('clear-filters'),
        sortButtons: document.querySelectorAll('.sort-btn'),
        rankingsDisplay: document.getElementById('rankings-display'),
        characterImage: document.getElementById('character-image'),
        characterName: document.getElementById('character-name'),
        characterClass: document.getElementById('character-class'),
        critCard: document.getElementById('crit-rate-card'),
        characterAnalysis: document.getElementById('character-analysis'),
      };

      // Filter functionality
      function filterCharacters() {
        const filters = {
          role: elements.roleFilter?.value.toLowerCase() || '',
          class: elements.classFilter?.value.toLowerCase() || '',
          rarity: elements.rarityFilter?.value.toLowerCase() || '',
          element: elements.elementFilter?.value.toLowerCase() || '',
        };

        console.log('Filters applied:', filters);
        let visibleCount = 0;

        elements.characterCards.forEach(card => {
          const character = characters.find(
            c => c.id === parseInt(card.dataset.characterId || '0')
          );
          if (!character) return;

          const matches = Object.entries(filters).every(([key, value]) => {
            if (!value) return true;
            if (key === 'class') {
              return character.class?.toLowerCase() === value;
            }
            return character[key]?.toLowerCase() === value;
          });

          if (matches) {
            card.style.display = 'flex';
            visibleCount++;
          } else {
            card.style.display = 'none';
          }
        });

        console.log(
          `Filtered results: ${visibleCount}/${elements.characterCards.length} characters visible`
        );
      }

      // Sort functionality
      let sortState = { column: null, asc: false };

      function sortCharacters(column) {
        const cardContainer = document.getElementById('character-grid');
        const cards = Array.from(elements.characterCards);
        const multiplier = sortState.asc ? 1 : -1;

        cards.sort((a, b) => {
          const aChar = characters.find(c => c.id === parseInt(a.dataset.characterId || '0'));
          const bChar = characters.find(c => c.id === parseInt(b.dataset.characterId || '0'));

          if (!aChar || !bChar) return 0;

          const aValue = parseStatValue(aChar.stats[column]);
          const bValue = parseStatValue(bChar.stats[column]);

          return (aValue - bValue) * multiplier;
        });

        cards.forEach(card => cardContainer?.appendChild(card));
      }

      // Event listeners for filters
      console.log('Adding filter event listeners...');
      if (elements.roleFilter) {
        elements.roleFilter.addEventListener('change', () => {
          console.log('Role filter changed to:', elements.roleFilter.value);
          filterCharacters();
        });
      }
      if (elements.classFilter) {
        elements.classFilter.addEventListener('change', () => {
          console.log('Class filter changed to:', elements.classFilter.value);
          filterCharacters();
        });
      }
      if (elements.rarityFilter) {
        elements.rarityFilter.addEventListener('change', () => {
          console.log('Rarity filter changed to:', elements.rarityFilter.value);
          filterCharacters();
        });
      }
      if (elements.elementFilter) {
        elements.elementFilter.addEventListener('change', () => {
          console.log('Element filter changed to:', elements.elementFilter.value);
          filterCharacters();
        });
      }

      // Event listeners for sort buttons
      elements.sortButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          const col = btn.dataset.sort || '';
          // For numerical columns, default to descending (highest first)
          // For text columns, default to ascending
          const numericColumns = ['hp', 'attack', 'defense', 'speed', 'rank', 'rarity'];
          const defaultAsc = !numericColumns.includes(col);
          sortState.asc = sortState.column === col ? !sortState.asc : defaultAsc;
          sortState.column = col;

          elements.sortButtons.forEach(b => b.classList.remove('active'));
          btn.classList.add('active');

          sortCharacters(col);
        });
      });

      // Reset functionality
      elements.resetBtn?.addEventListener('click', () => {
        console.log('Reset button clicked');

        // Clear filter values
        if (elements.roleFilter) elements.roleFilter.value = '';
        if (elements.classFilter) elements.classFilter.value = '';
        if (elements.rarityFilter) elements.rarityFilter.value = '';
        if (elements.elementFilter) elements.elementFilter.value = '';

        // Show all cards
        elements.characterCards.forEach(card => (card.style.display = 'flex'));

        // Remove active class from sort buttons
        elements.sortButtons.forEach(b => b.classList.remove('active'));

        // Reset sort state
        sortState = { column: null, asc: false };

        // Restore original overall ranking order (rank 1, rank 2, rank 3, etc.)
        const cardContainer = document.getElementById('character-grid');
        const cards = Array.from(elements.characterCards);

        cards.sort((a, b) => {
          const aId = parseInt(a.dataset.characterId || '0');
          const bId = parseInt(b.dataset.characterId || '0');
          const aRank = overallAnalysis[aId]?.overallRank || 999;
          const bRank = overallAnalysis[bId]?.overallRank || 999;
          return aRank - bRank;
        });

        // Re-append cards in sorted order
        cards.forEach(card => cardContainer?.appendChild(card));

        console.log(
          'Reset complete - restored to overall ranking order (rank 1, rank 2, rank 3...)'
        );
      });

      elements.characterCards.forEach(card => {
        card.addEventListener('click', () => {
          const characterId = parseInt(card.dataset.characterId || '0');

          // Remove active class from all cards
          elements.characterCards.forEach(c => c.classList.remove('selected'));

          // Add active class to clicked card
          card.classList.add('selected');

          if (!characterId) {
            elements.rankingsDisplay?.classList.remove('active');
            return;
          }

          const character = characters.find(c => c.id === characterId);
          if (!character) return;

          // Update character info
          if (elements.characterImage) {
            elements.characterImage.src = character.image;
            elements.characterImage.alt = character.name;
          }
          if (elements.characterName) elements.characterName.textContent = character.name;
          if (elements.characterClass)
            elements.characterClass.textContent = `${character.rarity} • Role: ${character.role} • Class: ${character.class} • ${character.element}`;

          // Update rankings
          Object.keys(statNames).forEach(statKey => {
            const rank = rankings[statKey][characterId];
            const statValue = character.stats[statKey];

            // Special handling for crit rate - only show if > 0%
            if (statKey === 'critRate') {
              const critVal = parseStatValue(statValue);

              if (critVal > 0) {
                elements.critCard?.classList.remove('hidden');
                const statValueDisplay = document.querySelector(`.stat-${statKey}`);
                if (statValueDisplay) {
                  statValueDisplay.textContent =
                    typeof statValue === 'string' ? statValue : `${statValue}%`;
                }
              } else {
                elements.critCard?.classList.add('hidden');
              }
              return;
            }

            const rankDisplay = document.querySelector(`.rank-${statKey}`);
            const rankTotal = document.querySelector(`.rank-${statKey}-total`);
            const statValueDisplay = document.querySelector(`.stat-${statKey}`);

            if (rankDisplay && rankTotal && statValueDisplay && statValue !== undefined) {
              rankDisplay.textContent = rank ? `#${rank}` : 'N/A';
              rankTotal.textContent = `out of ${totalCharacters}`;

              // Format stat value
              statValueDisplay.textContent =
                typeof statValue === 'string' ? statValue : statValue.toLocaleString();

              // Apply rank styling
              rankDisplay.className = rankDisplay.className.replace(/rank-(top3|top10|other)/g, '');
              if (rank <= 3) {
                rankDisplay.classList.add('rank-top3');
              } else if (rank <= 10) {
                rankDisplay.classList.add('rank-top10');
              } else {
                rankDisplay.classList.add('rank-other');
              }
            }
          });

          elements.rankingsDisplay?.classList.add('active');

          // Update character analysis
          updateCharacterAnalysis(characterId);

          // Smooth scroll to rankings display
          setTimeout(() => {
            if (elements.rankingsDisplay) {
              elements.rankingsDisplay.scrollIntoView({
                behavior: 'smooth',
                block: 'start',
              });
            }
          }, 150);
        });
      });

      // Move updateCharacterAnalysis function inside the scope
      function updateCharacterAnalysis(characterId) {
        const analysis = overallAnalysis[characterId];
        if (!analysis) return;

        const overallRankEl = document.getElementById('overall-rank');
        const top3CountEl = document.getElementById('top3-count');
        const top3StatsEl = document.getElementById('top3-stats');
        const top10CountEl = document.getElementById('top10-count');
        const top10StatsEl = document.getElementById('top10-stats');
        // Get stat names for display
        const coreStats = ['hp', 'attack', 'defense'];
        const top3Stats = [];
        const top10Stats = [];

        coreStats.forEach(statKey => {
          const rank = rankings[statKey][characterId];
          if (rank <= 3) {
            top3Stats.push(statNames[statKey]);
          }
          if (rank <= 10) {
            top10Stats.push(statNames[statKey]);
          }
        });

        // Update overall rank
        if (overallRankEl) overallRankEl.textContent = `#${analysis.overallRank}`;

        // Update top 3 stats
        if (top3CountEl) top3CountEl.textContent = `${top3Stats.length}/3`;
        if (top3Stats.length > 0) {
          if (top3StatsEl)
            top3StatsEl.innerHTML = top3Stats
              .map(stat => `<span class="stat-badge top3-badge">${stat}</span>`)
              .join('');
        } else {
          if (top3StatsEl) top3StatsEl.innerHTML = '<span class="no-stats">None</span>';
        }

        // Update top 10 stats
        if (top10CountEl) top10CountEl.textContent = `${top10Stats.length}/3`;
        if (top10Stats.length > 0) {
          if (top10StatsEl)
            top10StatsEl.innerHTML = top10Stats
              .map(stat => `<span class="stat-badge top10-badge">${stat}</span>`)
              .join('');
        } else {
          if (top10StatsEl) top10StatsEl.innerHTML = '<span class="no-stats">None</span>';
        }

        elements.characterAnalysis?.classList.remove('hidden');
      }
    });
  </script>
</CharacterRankingsLayout>
