---
import ChatbotLayout from '../layouts/ChatbotLayout.astro';
import ariaCharacter from '../data/aria-character.json';
---

<ChatbotLayout title="GachaWiki AI" description="Ask questions about gacha games and get answers from GachaWiki content">
  <div class="chat-interface-fullscreen">
    <div class="chat-messages" id="messages"></div>
    
    <div class="chat-input-container">
      <div class="chat-input">
        <input 
          type="text" 
          id="questionInput" 
          placeholder="Ask a question about gacha games..."
          maxlength="500"
        />
        <button id="sendButton">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
            <path d="M2,21L23,12L2,3V10L17,12L2,14V21Z"/>
          </svg>
        </button>
      </div>
      
    </div>
  </div>

  <script>
    let isLoading = false;

    function addMessage(content, type = 'assistant', sources = [], usage = null) {
      const messagesDiv = document.getElementById('messages');
      if (!messagesDiv) return;
      
      const messageDiv = document.createElement('div');
      messageDiv.className = 'message ' + type;
      
      // Better formatting for readability
      let formattedContent = content
        // Clean up excessive newlines first
        .replace(/\n{3,}/g, '\n\n')
        // Add proper spacing around main sections
        .replace(/\*\*Quick Answer:\*\*/g, '\n**Quick Answer:**\n')
        .replace(/\*\*Key Details:\*\*/g, '\n\n**Key Details:**\n')
        .replace(/\*\*Sources:\*\*/g, '\n\n**Sources:**\n')
        // Fix bullet point spacing - add line break before each bullet
        .replace(/â€¢/g, '\nâ€¢ ')
        // Add spacing after bullet points
        .replace(/â€¢ ([^\n]+)/g, 'â€¢ $1\n')
        // Clean up multiple newlines but keep double spacing
        .replace(/\n{4,}/g, '\n\n\n')
        // Clean up whitespace
        .trim();
      
      let html = formattedContent;
      if (sources && sources.length > 0) {
        html += '\n\n<div class="sources">Sources: ';
        sources.forEach(function(source, index) {
          try {
            const url = new URL(source);
            const pathParts = url.pathname.split('/').filter(function(p) { return p; });
            const displayName = pathParts[pathParts.length - 1] || 'Home';
            html += '<a href="' + source + '" target="_blank">' + displayName + '</a>';
          } catch (e) {
            html += '<a href="' + source + '" target="_blank">Link</a>';
          }
        });
        html += '</div>';
      }
      
      // Add token usage info for assistant messages
      if (type === 'assistant' && usage && usage.total_tokens > 0) {
        html += '\n\n<div class="token-usage">Tokens: ' + usage.total_tokens + ' (' + usage.prompt_tokens + ' prompt + ' + usage.completion_tokens + ' response)</div>';
      }
      
      messageDiv.innerHTML = html;
      messagesDiv.appendChild(messageDiv);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function askExample(question) {
      const input = document.getElementById('questionInput');
      if (!input) return;
      if (input instanceof HTMLInputElement) {
        input.value = question;
      }
      sendMessage();
    }

    async function sendMessage() {
      if (isLoading) return;
      
      const input = document.getElementById('questionInput');
      const button = document.getElementById('sendButton');
      if (!input || !button) return;
      if (!(input instanceof HTMLInputElement) || !(button instanceof HTMLButtonElement)) return;
      
      const question = input.value.trim();
      if (!question) return;
      
      // Add user message
      addMessage(question, 'user');
      
      // Clear input and show loading
      input.value = '';
      isLoading = true;
      button.disabled = true;
      button.innerHTML = '<span class="loading"></span>';
      
      try {
        const response = await fetch('/api/chatbot', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ question: question }),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || 'Something went wrong');
        }
        
        addMessage(data.answer, 'assistant', data.sources, data.usage);
        
      } catch (error) {
        console.error('Error:', error);
        
        // Check if we're in local development and API isn't available
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
          addMessage('ðŸš§ <strong>Local Development Mode</strong><br><br>' +
            'The chatbot API is not available in local development. To test the full chatbot experience:<br><br>' +
            '<strong>Option 1 - Quick Test:</strong><br>' +
            'Deploy to Vercel with: <code>vercel --prod</code><br><br>' +
            '<strong>Option 2 - Local API Test:</strong><br>' +
            '1. Make sure you have the API key in .env<br>' +
            '2. The Vercel API endpoint (/api/chatbot.js) will work when deployed<br><br>' +
            '<strong>Your question was:</strong> "' + question + '"<br>' +
            '<strong>This will work perfectly once deployed! ðŸš€</strong>', 'assistant');
        } else {
          addMessage('Sorry, I encountered an error: ' + error.message, 'error');
        }
      } finally {
        isLoading = false;
        if (button instanceof HTMLButtonElement) {
          button.disabled = false;
          button.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor"><path d="M2,21L23,12L2,3V10L17,12L2,14V21Z"/></svg>';
        }
      }
    }

    // Add click event listener to send button
    document.addEventListener('DOMContentLoaded', function() {
      const sendButton = document.getElementById('sendButton');
      if (sendButton) {
        sendButton.addEventListener('click', sendMessage);
      }

      // Handle Enter key
      const questionInput = document.getElementById('questionInput');
      if (questionInput && questionInput instanceof HTMLInputElement) {
        questionInput.addEventListener('keypress', function(e) {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
          }
        });
      }


      // Simple welcome message
      const welcomeMessage = "Hello! I'm Aria (ï½¡â—•â€¿â—•ï½¡)";
      addMessage(welcomeMessage);
    });
  </script>
</ChatbotLayout>