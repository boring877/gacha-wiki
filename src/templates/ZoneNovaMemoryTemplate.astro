---
// Zone Nova Memory Page Template
// This template creates individual memory pages with complete information
import ZoneNovaLayout from '../layouts/ZoneNovaLayout.astro';
import OptimizedImage from '../components/OptimizedImage.astro';
import ZnBackButton from '../components/zn-backbutton.astro';

// Import the memory-specific CSS
import '../styles/Zonenova/zn-memory-pages.css';

export interface Props {
  memoryData: any;
  memorySEO: any;
}

const { memoryData, memorySEO } = Astro.props;

// Helper function to convert character names to URL slugs
function getCharacterUrl(characterName: string): string {
  const baseUrl = '/guides/zone-nova/characters/';
  
  // Handle special cases
  const specialCases: { [key: string]: string } = {
    "Jeanne d'Arc": 'jeanne-darc',
    'Greed Mammon': 'greed-mammon',
    'Snow Girl': 'snow-girl',
    'Zashiki-warashi': 'zashiki-warashi'
  };
  
  if (specialCases[characterName]) {
    return baseUrl + specialCases[characterName] + '/';
  }
  
  // Default: convert to lowercase and replace spaces with hyphens
  return baseUrl + characterName.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '') + '/';
}

// Helper function to determine memory class subtitle
function getClassMemorySubtitle(effects: string[]): string {
  const effectsText = effects.join(' ').toLowerCase();
  
  if (effectsText.includes('only effective for guardians')) {
    return 'Guardian Class Memory Card';
  } else if (effectsText.includes('only effective for healers')) {
    return 'Healer Class Memory Card';
  } else if (effectsText.includes('only effective for disaster')) {
    return 'Disaster Class Memory Card';
  } else if (effectsText.includes('only effective for strikers')) {
    return 'Striker Class Memory Card';
  } else if (effectsText.includes('only effective for supports')) {
    return 'Support Class Memory Card';
  } else if (effectsText.includes('only effective for disruptors')) {
    return 'Disruptor Class Memory Card';
  } else if (effectsText.includes('only effective for enhancers')) {
    return 'Enhancer Class Memory Card';
  } else if (effectsText.includes('only effective for berserker')) {
    return 'Berserker Class Memory Card';
  } else if (effectsText.includes('only effective for dps')) {
    return 'DPS Class Memory Card';
  } else if (effectsText.includes('only effective for debuffer')) {
    return 'Debuffer Class Memory Card';
  } else {
    return 'Universal Memory Card';
  }
}
---

<ZoneNovaLayout 
  title={memorySEO.title}
  description={memorySEO.description}
  gameTitle={`${memoryData.name} - Memory Card`}
>
  <Fragment slot="head">
    <link rel="preload" as="image" href={memoryData.image} />
  </Fragment>

  <div class="memory-page">
    <!-- Back Button -->
    <ZnBackButton href="/guides/zone-nova/memories/" text="Back to Memories" />

    <!-- Memory Overview Header -->
    <section class="memory-overview">
      <div class="memory-image-container">
        <img 
          src={memoryData.image}
          alt={memoryData.name}
          width="280"
          height="420"
          loading="lazy"
          class="memory-card-image"
        />
      </div>
      
      <div class="memory-info">
        <h1 class="memory-title">{memoryData.name}</h1>
        <p class="memory-subtitle">{memoryData.character ? `Memory Card for ${memoryData.character}` : getClassMemorySubtitle(memoryData.effects)}</p>
        
        <div class="memory-badges">
          <span class={`memory-rarity-badge ${memoryData.rarity.toLowerCase()}`}>{memoryData.rarity}</span>
        </div>

        <!-- Quick Stats in Overview -->
        <div class="memory-stats-grid">
          <div class="memory-stat-item">
            <div class="memory-stat-label">HP</div>
            <div class="memory-stat-value">{memoryData.stats.hp.toLocaleString()}</div>
          </div>
          <div class="memory-stat-item">
            <div class="memory-stat-label">Attack</div>
            <div class="memory-stat-value">{memoryData.stats.attack.toLocaleString()}</div>
          </div>
          <div class="memory-stat-item">
            <div class="memory-stat-label">Defense</div>
            <div class="memory-stat-value">{memoryData.stats.defense.toLocaleString()}</div>
          </div>
        </div>
      </div>
    </section>

    <!-- Memory Effects - Most Important Info First -->
    <section class="memory-content-section">
      <h2 class="memory-section-title">Memory Effects</h2>
      <ul class="memory-effects-list">
        {memoryData.effects.map(effect => (
          <li class="memory-effect-item">{effect}</li>
        ))}
      </ul>
    </section>

    <!-- Character Information -->
    {memoryData.character && (
      <section class="memory-content-section">
        <h2 class="memory-section-title">Character Synergy</h2>
        <p>This memory card is specifically designed for <strong>{memoryData.character}</strong> and provides optimal synergy with their abilities and playstyle.</p>
        <a href={getCharacterUrl(memoryData.character)} class="memory-character-link">
          <span>View {memoryData.character} Character Guide</span>
          <span>â†’</span>
        </a>
      </section>
    )}
  </div>
</ZoneNovaLayout> 