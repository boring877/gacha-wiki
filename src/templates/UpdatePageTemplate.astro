---
// @ts-nocheck
import ZoneNovaUpdateLayout from '../layouts/zone-nova/UpdateLayout.astro';
import FormattedDate from '../components/FormattedDate.astro';

export interface Props {
  updateData: {
    title: string;
    date: string;
    type: string;
    data?: any; // flexible data object
    tldr?: string[];
    officialUpdate: {
      greeting?: string;
      content: string[];
      closing?: string;
    };
    sourceInfo: {
      source: string;
      verified: boolean;
      gameUrl?: string;
    };
  };
  seoData: {
    title: string;
    description: string;
  };
}

const { updateData, seoData } = Astro.props;

// Security: URL validation function
function isValidUrl(url: string): boolean {
  try {
    const urlObj = new URL(url);
    // Only allow http and https protocols
    return urlObj.protocol === 'http:' || urlObj.protocol === 'https:';
  } catch {
    return false;
  }
}

// Security: Validate gameUrl if present
if (updateData.sourceInfo.gameUrl && !isValidUrl(updateData.sourceInfo.gameUrl)) {
  updateData.sourceInfo.gameUrl = undefined; // Remove invalid URL
}

// You can also get updateType from the filename
// const updateType = getUpdateType(Astro.url.pathname);
---

<ZoneNovaUpdateLayout
  title={seoData.title}
  description={seoData.description}
  gameTitle={updateData.title}
  showBackButton={true}
  backButtonHref="/guides/zone-nova/updates/"
  backButtonText="Back to Updates"
>
  <Fragment slot="head">
    <style>
      /* Override layout title glow for update pages */
      .hero-title,
      .title-only-heading {
        animation: none !important;
      }

      /* Responsive visibility classes */
      .mobile-only {
        display: none;
      }

      .desktop-only {
        display: block;
      }

      /* CSS-only collapsible sections for performance */
      .collapsible-content {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease-out;
        contain: layout style;
      }

      .collapsible-section.expanded .collapsible-content {
        max-height: 100vh;
        transition: max-height 0.5s ease-in;
      }

      .collapsible-toggle {
        transition: transform 0.3s ease;
        transform-origin: center;
        contain: layout;
      }

      .collapsible-section.expanded .collapsible-toggle {
        transform: rotate(180deg);
      }

      @media (max-width: 767px) {
        .mobile-only {
          display: block;
        }

        .desktop-only {
          display: none;
        }
      }
    </style>

    <script is:inline>
      function toggleCollapsible(button) {
        const section = button.parentElement;
        if (section) {
          section.classList.toggle('expanded');
        }
      }

      // Auto-expand on desktop - CSS-only solution to eliminate forced reflows
      document.addEventListener('DOMContentLoaded', function () {
        const isMobile = window.innerWidth <= 767;

        // Auto-expand on desktop for better UX
        if (!isMobile) {
          const collapsibleSections = document.querySelectorAll('.collapsible-section');
          collapsibleSections.forEach(section => {
            section.classList.add('expanded');
          });
        }
      });
    </script>
  </Fragment>

  <div class="update-page">
    <div class="update-container">
      <!-- Data Section -->
      {
        updateData.data && (
          <section class="content-section">
            <h2 class="section-title">Data</h2>
            <div class="data-grid">
              <div class="data-item">
                <div class="data-label">Date</div>
                <div class="data-value" set:text={updateData.date} />
              </div>
              <div class="data-item">
                <div class="data-label">Type</div>
                <div class="data-value" set:text={updateData.type} />
              </div>
              {Object.entries(updateData.data).map(([key, value]) => (
                <div class="data-item">
                  <div class="data-label" set:text={key} />
                  <div class="data-value" set:html={value} />
                </div>
              ))}
            </div>
          </section>
        )
      }

      <!-- TLDR Section -->
      {
        updateData.tldr && updateData.tldr.length > 0 && (
          <section class="content-section tldr-section">
            <h2 class="section-title">TL;DR</h2>
            <ul>
              {updateData.tldr.map(point => (
                <li set:html={point} />
              ))}
            </ul>
          </section>
        )
      }

      <!-- Official Update -->
      <section class="content-section official-section">
        <h2 class="section-title">Official Update</h2>

        <!-- Mobile Collapsible Version -->
        <div class="collapsible-section mobile-only">
          <button class="collapsible-header" onclick="toggleCollapsible(this)">
            <span>Full Official Update Details</span>
            <span class="collapsible-toggle">â–¼</span>
          </button>
          <div class="collapsible-content">
            <div class="collapsible-inner">
              {
                updateData.officialUpdate.greeting && (
                  <p>
                    <strong set:html={updateData.officialUpdate.greeting} />
                  </p>
                )
              }
              {
                updateData.officialUpdate.content.map((paragraph, index) => {
                  // Check if paragraph looks like a section header
                  const isHeader =
                    paragraph.match(/^[A-Z][^:]*:?\s*$/) || paragraph.match(/^[0-9]+\.\s/);
                  // Check if paragraph is a numbered event item
                  const isEventItem = paragraph.match(/^[0-9]+\.\s+Launch\s+/i);

                  return (
                    <p
                      class={
                        isHeader ? 'content-section-header' : isEventItem ? 'event-item-header' : ''
                      }
                    >
                      <span set:html={paragraph} />
                    </p>
                  );
                })
              }
            </div>
          </div>
        </div>

        <!-- Desktop Version -->
        <div class="info-card desktop-only">
          {
            updateData.officialUpdate.greeting && (
              <p>
                <strong set:html={updateData.officialUpdate.greeting} />
              </p>
            )
          }
          {
            updateData.officialUpdate.content.map((paragraph, index) => {
              // Check if paragraph looks like a section header
              const isHeader =
                paragraph.match(/^[A-Z][^:]*:?\s*$/) || paragraph.match(/^[0-9]+\.\s/);
              // Check if paragraph is a numbered event item
              const isEventItem = paragraph.match(/^[0-9]+\.\s+Launch\s+/i);

              return (
                <p
                  class={
                    isHeader ? 'content-section-header' : isEventItem ? 'event-item-header' : ''
                  }
                >
                  <span set:html={paragraph} />
                </p>
              );
            })
          }
        </div>
      </section>

      <!-- Closing -->
      {
        updateData.officialUpdate.closing && (
          <section class="content-section">
            <h2 class="section-title">Closing</h2>
            <div class="info-card">
              <p set:html={updateData.officialUpdate.closing} />
            </div>
          </section>
        )
      }

      <!-- Source Information -->
      <section class="content-section">
        <h2 class="section-title">Source Information</h2>
        {
          updateData.sourceInfo.gameUrl ? (
            <a
              href={updateData.sourceInfo.gameUrl}
              target="_blank"
              rel="noopener noreferrer"
              class="source-link"
            >
              <div class="info-card source-info-card">
                <p class="source-text">
                  Source: <span class="source-name" set:text={updateData.sourceInfo.source} />
                </p>
              </div>
            </a>
          ) : (
            <div class="info-card">
              <p class="source-text">
                Source: <span class="source-name" set:text={updateData.sourceInfo.source} />
              </p>
            </div>
          )
        }
      </section>
    </div>
  </div>
</ZoneNovaUpdateLayout>
